
ShiftController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007070  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e8  080072e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080072e8  080072e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072e8  080072e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080072f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000218c  20000010  08007300  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000219c  08007300  0002219c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c14e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003647  00000000  00000000  0003c18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  00040ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a26  00000000  00000000  00042090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017944  00000000  00000000  00045ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aebb2  00000000  00000000  0005d3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010bfac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a98  00000000  00000000  0010c000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071e8 	.word	0x080071e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080071e8 	.word	0x080071e8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__gedf2>:
 8000548:	f04f 3cff 	mov.w	ip, #4294967295
 800054c:	e006      	b.n	800055c <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__ledf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	e002      	b.n	800055c <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__cmpdf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000560:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800056c:	bf18      	it	ne
 800056e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000572:	d01b      	beq.n	80005ac <__cmpdf2+0x54>
 8000574:	b001      	add	sp, #4
 8000576:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800057a:	bf0c      	ite	eq
 800057c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000580:	ea91 0f03 	teqne	r1, r3
 8000584:	bf02      	ittt	eq
 8000586:	ea90 0f02 	teqeq	r0, r2
 800058a:	2000      	moveq	r0, #0
 800058c:	4770      	bxeq	lr
 800058e:	f110 0f00 	cmn.w	r0, #0
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf58      	it	pl
 8000598:	4299      	cmppl	r1, r3
 800059a:	bf08      	it	eq
 800059c:	4290      	cmpeq	r0, r2
 800059e:	bf2c      	ite	cs
 80005a0:	17d8      	asrcs	r0, r3, #31
 80005a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005a6:	f040 0001 	orr.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b4:	d102      	bne.n	80005bc <__cmpdf2+0x64>
 80005b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ba:	d107      	bne.n	80005cc <__cmpdf2+0x74>
 80005bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c4:	d1d6      	bne.n	8000574 <__cmpdf2+0x1c>
 80005c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ca:	d0d3      	beq.n	8000574 <__cmpdf2+0x1c>
 80005cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__aeabi_cdrcmple>:
 80005d4:	4684      	mov	ip, r0
 80005d6:	4610      	mov	r0, r2
 80005d8:	4662      	mov	r2, ip
 80005da:	468c      	mov	ip, r1
 80005dc:	4619      	mov	r1, r3
 80005de:	4663      	mov	r3, ip
 80005e0:	e000      	b.n	80005e4 <__aeabi_cdcmpeq>
 80005e2:	bf00      	nop

080005e4 <__aeabi_cdcmpeq>:
 80005e4:	b501      	push	{r0, lr}
 80005e6:	f7ff ffb7 	bl	8000558 <__cmpdf2>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	bf48      	it	mi
 80005ee:	f110 0f00 	cmnmi.w	r0, #0
 80005f2:	bd01      	pop	{r0, pc}

080005f4 <__aeabi_dcmpeq>:
 80005f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f8:	f7ff fff4 	bl	80005e4 <__aeabi_cdcmpeq>
 80005fc:	bf0c      	ite	eq
 80005fe:	2001      	moveq	r0, #1
 8000600:	2000      	movne	r0, #0
 8000602:	f85d fb08 	ldr.w	pc, [sp], #8
 8000606:	bf00      	nop

08000608 <__aeabi_dcmplt>:
 8000608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800060c:	f7ff ffea 	bl	80005e4 <__aeabi_cdcmpeq>
 8000610:	bf34      	ite	cc
 8000612:	2001      	movcc	r0, #1
 8000614:	2000      	movcs	r0, #0
 8000616:	f85d fb08 	ldr.w	pc, [sp], #8
 800061a:	bf00      	nop

0800061c <__aeabi_dcmple>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff ffe0 	bl	80005e4 <__aeabi_cdcmpeq>
 8000624:	bf94      	ite	ls
 8000626:	2001      	movls	r0, #1
 8000628:	2000      	movhi	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_dcmpge>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffce 	bl	80005d4 <__aeabi_cdrcmple>
 8000638:	bf94      	ite	ls
 800063a:	2001      	movls	r0, #1
 800063c:	2000      	movhi	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_dcmpgt>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffc4 	bl	80005d4 <__aeabi_cdrcmple>
 800064c:	bf34      	ite	cc
 800064e:	2001      	movcc	r0, #1
 8000650:	2000      	movcs	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_d2iz>:
 8000658:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800065c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000660:	d215      	bcs.n	800068e <__aeabi_d2iz+0x36>
 8000662:	d511      	bpl.n	8000688 <__aeabi_d2iz+0x30>
 8000664:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000668:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800066c:	d912      	bls.n	8000694 <__aeabi_d2iz+0x3c>
 800066e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000676:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800067a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067e:	fa23 f002 	lsr.w	r0, r3, r2
 8000682:	bf18      	it	ne
 8000684:	4240      	negne	r0, r0
 8000686:	4770      	bx	lr
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	4770      	bx	lr
 800068e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000692:	d105      	bne.n	80006a0 <__aeabi_d2iz+0x48>
 8000694:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000698:	bf08      	it	eq
 800069a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800069e:	4770      	bx	lr
 80006a0:	f04f 0000 	mov.w	r0, #0
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <Init_SBC>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Initializes SBC
void Init_SBC(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
	uint8_t txdata[2];
	uint8_t rxdata[2];

	//Force SBC in standby mode
	txdata[0] = (UJA_REG_MODECONTROL << 5) | (UJA_RO_RW << 4) | (UJA_MC_STBY << 2);
 80006ae:	2320      	movs	r3, #32
 80006b0:	713b      	strb	r3, [r7, #4]
	txdata[1] = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 fe17 	bl	80022f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 80006c2:	463a      	mov	r2, r7
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2302      	movs	r3, #2
 80006cc:	481e      	ldr	r0, [pc, #120]	; (8000748 <Init_SBC+0xa0>)
 80006ce:	f003 f852 	bl	8003776 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2110      	movs	r1, #16
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f001 fe09 	bl	80022f0 <HAL_GPIO_WritePin>

	//Setup WDG and Status register
	txdata[0] = WD_SETUP;
 80006de:	2306      	movs	r3, #6
 80006e0:	713b      	strb	r3, [r7, #4]
	txdata[1] = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2110      	movs	r1, #16
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f001 fdff 	bl	80022f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 80006f2:	463a      	mov	r2, r7
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2302      	movs	r3, #2
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <Init_SBC+0xa0>)
 80006fe:	f003 f83a 	bl	8003776 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	2110      	movs	r1, #16
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f001 fdf1 	bl	80022f0 <HAL_GPIO_WritePin>

	//Set normal mode and enable CAN voltage
	txdata[0] = (UJA_REG_MODECONTROL << 5) | (UJA_RO_RW << 4) | (UJA_MC_V2ON << 2);
 800070e:	232c      	movs	r3, #44	; 0x2c
 8000710:	713b      	strb	r3, [r7, #4]
	txdata[1] = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 fde7 	bl	80022f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 8000722:	463a      	mov	r2, r7
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2302      	movs	r3, #2
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <Init_SBC+0xa0>)
 800072e:	f003 f822 	bl	8003776 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	2110      	movs	r1, #16
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f001 fdd9 	bl	80022f0 <HAL_GPIO_WritePin>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20002048 	.word	0x20002048

0800074c <ConfigureCANFilters>:



//Procedurally generates and sets CAN Filter configurations from the message[] struct array config
void ConfigureCANFilters(struct message * messageArray, uint8_t size)
{
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b096      	sub	sp, #88	; 0x58
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
 8000758:	466b      	mov	r3, sp
 800075a:	461d      	mov	r5, r3
	uint32_t configuredIDs[size];
 800075c:	78fc      	ldrb	r4, [r7, #3]
 800075e:	4623      	mov	r3, r4
 8000760:	3b01      	subs	r3, #1
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
 8000764:	b2e0      	uxtb	r0, r4
 8000766:	f04f 0100 	mov.w	r1, #0
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	014b      	lsls	r3, r1, #5
 8000774:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000778:	0142      	lsls	r2, r0, #5
 800077a:	b2e0      	uxtb	r0, r4
 800077c:	f04f 0100 	mov.w	r1, #0
 8000780:	f04f 0200 	mov.w	r2, #0
 8000784:	f04f 0300 	mov.w	r3, #0
 8000788:	014b      	lsls	r3, r1, #5
 800078a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800078e:	0142      	lsls	r2, r0, #5
 8000790:	4623      	mov	r3, r4
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	3307      	adds	r3, #7
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	ebad 0d03 	sub.w	sp, sp, r3
 800079e:	466b      	mov	r3, sp
 80007a0:	3303      	adds	r3, #3
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
	int uniques = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < size; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	653b      	str	r3, [r7, #80]	; 0x50
 80007b0:	e050      	b.n	8000854 <ConfigureCANFilters+0x108>
	{
		struct message thismessage = messageArray[i];
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80007be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		//Check if this ID already configured
		int create = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	657b      	str	r3, [r7, #84]	; 0x54
		for (int j = 0; j < size; j++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80007cc:	e00b      	b.n	80007e6 <ConfigureCANFilters+0x9a>
		{
			if (configuredIDs[j] == thismessage.id)
 80007ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d8:	429a      	cmp	r2, r3
 80007da:	d101      	bne.n	80007e0 <ConfigureCANFilters+0x94>
			{
				create = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	657b      	str	r3, [r7, #84]	; 0x54
		for (int j = 0; j < size; j++)
 80007e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007e2:	3301      	adds	r3, #1
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbef      	blt.n	80007ce <ConfigureCANFilters+0x82>
			}
		}
		if (create == 1 && thismessage.enabled)
 80007ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d12c      	bne.n	800084e <ConfigureCANFilters+0x102>
 80007f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d028      	beq.n	800084e <ConfigureCANFilters+0x102>
		{
			//Add this ID to the list of already configured ID's to skip duplicates
			configuredIDs[uniques] = thismessage.id;
 80007fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80007fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			CAN_FilterTypeDef filter;

			//This bit shifting was a massive PITA to figure out... see page 1092 of the RM for reasoning
			filter.FilterIdHigh = ((thismessage.id << 5)  | (thismessage.id >> (32 - 5))) & 0xFFFF;
 8000806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000808:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800080c:	b29b      	uxth	r3, r3
 800080e:	60bb      	str	r3, [r7, #8]
			filter.FilterIdLow = (thismessage.id >> (11 - 3)) & 0xFFF8;
 8000810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000812:	0a1a      	lsrs	r2, r3, #8
 8000814:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]

			//Masks set to full rank to check every bit against ID
			filter.FilterMaskIdHigh = 0xFFFF;
 800081c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000820:	613b      	str	r3, [r7, #16]
			filter.FilterMaskIdLow = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	617b      	str	r3, [r7, #20]

			//Filter options
			filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
			filter.FilterActivation = ENABLE;
 800082c:	2301      	movs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
			filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
			filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]

			//Set filter bank to the current count of uniques
			filter.FilterBank = uniques;
 8000838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800083a:	61fb      	str	r3, [r7, #28]

			//Finally pass filter to HAL
			HAL_CAN_ConfigFilter(&hcan, &filter);
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	4619      	mov	r1, r3
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <ConfigureCANFilters+0x11c>)
 8000844:	f000 fe4d 	bl	80014e2 <HAL_CAN_ConfigFilter>
			uniques++;
 8000848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800084a:	3301      	adds	r3, #1
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < size; i++)
 800084e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000850:	3301      	adds	r3, #1
 8000852:	653b      	str	r3, [r7, #80]	; 0x50
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000858:	429a      	cmp	r2, r3
 800085a:	dbaa      	blt.n	80007b2 <ConfigureCANFilters+0x66>
 800085c:	46ad      	mov	sp, r5
		}
	}
}
 800085e:	bf00      	nop
 8000860:	3758      	adds	r7, #88	; 0x58
 8000862:	46bd      	mov	sp, r7
 8000864:	bdb0      	pop	{r4, r5, r7, pc}
 8000866:	bf00      	nop
 8000868:	20001e38 	.word	0x20001e38

0800086c <Init_CAN>:
		messageArray[i].value = -1;
	}
}

void Init_CAN(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	//Configure all receive filters from the config array
	ConfigureCANFilters(messageArray, sizeof(messageArray) / sizeof(struct message));
 8000870:	2104      	movs	r1, #4
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <Init_CAN+0x2c>)
 8000874:	f7ff ff6a 	bl	800074c <ConfigureCANFilters>

	//Start CAN operation
	HAL_CAN_Start(&hcan);
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <Init_CAN+0x30>)
 800087a:	f000 fefc 	bl	8001676 <HAL_CAN_Start>

	//Enable Message Pending IRQ
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800087e:	2102      	movs	r1, #2
 8000880:	4806      	ldr	r0, [pc, #24]	; (800089c <Init_CAN+0x30>)
 8000882:	f001 f84e 	bl	8001922 <HAL_CAN_ActivateNotification>

	//Start receiving - don't think we need this here
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data);
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <Init_CAN+0x34>)
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <Init_CAN+0x38>)
 800088a:	2100      	movs	r1, #0
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <Init_CAN+0x30>)
 800088e:	f000 ff36 	bl	80016fe <HAL_CAN_GetRxMessage>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200020c4 	.word	0x200020c4
 800089c:	20001e38 	.word	0x20001e38
 80008a0:	20002104 	.word	0x20002104
 80008a4:	20001d9c 	.word	0x20001d9c

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fce8 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f83e 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f000 f8f8 	bl	8000aa8 <MX_GPIO_Init>
  MX_CAN_Init();
 80008b8:	f000 f880 	bl	80009bc <MX_CAN_Init>
  MX_SPI1_Init();
 80008bc:	f000 f8b6 	bl	8000a2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	Init_SBC();
 80008c0:	f7ff fef2 	bl	80006a8 <Init_SBC>


	//Load default message configuration
	//NOTE: This operation takes approximately 100ms!!!!!
	memcpy(&messageArray, &defaultMessageArray, sizeof(messageArray));
 80008c4:	4a12      	ldr	r2, [pc, #72]	; (8000910 <main+0x68>)
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <main+0x6c>)
 80008c8:	4614      	mov	r4, r2
 80008ca:	461d      	mov	r5, r3
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Initialize CAN and all filters
	Init_CAN();
 80008e0:	f7ff ffc4 	bl	800086c <Init_CAN>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008e4:	f003 fe7a 	bl	80045dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Shift */
  ShiftHandle = osThreadNew(StartShift, NULL, &Shift_attributes);
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <main+0x70>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <main+0x74>)
 80008ee:	f003 fedd 	bl	80046ac <osThreadNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <main+0x78>)
 80008f6:	6013      	str	r3, [r2, #0]

  /* creation of FeedWDG */
  FeedWDGHandle = osThreadNew(StartFeedWDG, NULL, &FeedWDG_attributes);
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <main+0x7c>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <main+0x80>)
 80008fe:	f003 fed5 	bl	80046ac <osThreadNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <main+0x84>)
 8000906:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000908:	f003 fe9c 	bl	8004644 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x64>
 800090e:	bf00      	nop
 8000910:	200020c4 	.word	0x200020c4
 8000914:	08007270 	.word	0x08007270
 8000918:	08007228 	.word	0x08007228
 800091c:	08000cfd 	.word	0x08000cfd
 8000920:	20001e60 	.word	0x20001e60
 8000924:	0800724c 	.word	0x0800724c
 8000928:	08000ec9 	.word	0x08000ec9
 800092c:	20002044 	.word	0x20002044

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b090      	sub	sp, #64	; 0x40
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	2228      	movs	r2, #40	; 0x28
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f006 fbc6 	bl	80070d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	2301      	movs	r3, #1
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800096e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fd0b 	bl	8002394 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000984:	f000 fade 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2102      	movs	r1, #2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fbfe 	bl	80031a4 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ae:	f000 fac9 	bl	8000f44 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3740      	adds	r7, #64	; 0x40
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_CAN_Init+0x68>)
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <MX_CAN_Init+0x6c>)
 80009c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_CAN_Init+0x68>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_CAN_Init+0x68>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_CAN_Init+0x68>)
 80009d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009d8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_CAN_Init+0x68>)
 80009dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009e0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_CAN_Init+0x68>)
 80009e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009e8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_CAN_Init+0x68>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_CAN_Init+0x68>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_CAN_Init+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_CAN_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_CAN_Init+0x68>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_CAN_Init+0x68>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_CAN_Init+0x68>)
 8000a10:	f000 fc6c 	bl	80012ec <HAL_CAN_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000a1a:	f000 fa93 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20001e38 	.word	0x20001e38
 8000a28:	40006400 	.word	0x40006400

08000a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_SPI1_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a62:	2228      	movs	r2, #40	; 0x28
 8000a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_SPI1_Init+0x74>)
 8000a8c:	f002 fdd0 	bl	8003630 <HAL_SPI_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 fa55 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20002048 	.word	0x20002048
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a2c      	ldr	r2, [pc, #176]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <MX_GPIO_Init+0xcc>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UJA_CS_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 fbee 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|INH1_Pin|INH2_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	21f0      	movs	r1, #240	; 0xf0
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <MX_GPIO_Init+0xd0>)
 8000b1a:	f001 fbe9 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UJA_CS_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = UJA_CS_Pin|LD2_Pin|LD1_Pin;
 8000b1e:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f001 fa67 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin INH1_Pin INH2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|INH1_Pin|INH2_Pin;
 8000b3e:	23f0      	movs	r3, #240	; 0xf0
 8000b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <MX_GPIO_Init+0xd0>)
 8000b56:	f001 fa59 	bl	800200c <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8000b5a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b5e:	f001 fbf9 	bl	8002354 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8000b62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b66:	f001 fbf5 	bl	8002354 <HAL_I2CEx_EnableFastModePlus>

}
 8000b6a:	bf00      	nop
 8000b6c:	3720      	adds	r7, #32
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	//Get the received message.
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data);
 8000b84:	4b5a      	ldr	r3, [pc, #360]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000b86:	4a5b      	ldr	r2, [pc, #364]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fdb7 	bl	80016fe <HAL_CAN_GetRxMessage>

	//Parse received bytes using message array
	for(int i=0; i < sizeof(messageArray) / sizeof(struct message); i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b94:	e0a2      	b.n	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
	{
		if(messageArray[i].id == can_rx_header.StdId)
 8000b96:	4a58      	ldr	r2, [pc, #352]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	f040 8096 	bne.w	8000cd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
		{

			//Calculate which byte position to start at
			int bytepos = messageArray[i].bit / 8;
 8000baa:	4a53      	ldr	r2, [pc, #332]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	617b      	str	r3, [r7, #20]

			//Calculate number of bytes that need to be checked
			int bytes = ceil(messageArray[i].length / (float)8);
 8000bbc:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3305      	adds	r3, #5
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000bd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000bd8:	ee16 0a90 	vmov	r0, s13
 8000bdc:	f7ff fc5c 	bl	8000498 <__aeabi_f2d>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	ec43 2b10 	vmov	d0, r2, r3
 8000be8:	f006 fa7a 	bl	80070e0 <ceil>
 8000bec:	ec53 2b10 	vmov	r2, r3, d0
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff fd30 	bl	8000658 <__aeabi_d2iz>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	613b      	str	r3, [r7, #16]

			uint32_t finalval = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
			int j = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24

			//Iterate through all bytes that must be read for this message
			for (int b = bytepos; b < bytepos + bytes; b++)
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	623b      	str	r3, [r7, #32]
 8000c08:	e058      	b.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
			{
				uint8_t tempval;
				//If on last byte we may need to truncate unneeded parts dependent on length of data
				if (b == bytepos + bytes - 1)
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4413      	add	r3, r2
 8000c10:	3b01      	subs	r3, #1
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d12d      	bne.n	8000c74 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				{
					//We need a left shift and a right shift to extract the bits we want
					uint8_t byteoffset = (messageArray[i].length - ((bytes-1) * 8));
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	4413      	add	r3, r2
 8000c20:	3305      	adds	r3, #5
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	73fb      	strb	r3, [r7, #15]
					uint8_t leftshift = 8 - (messageArray[i].bit - (bytepos * 8)) - byteoffset;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	492f      	ldr	r1, [pc, #188]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	440b      	add	r3, r1
 8000c42:	3304      	adds	r3, #4
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	3308      	adds	r3, #8
 8000c52:	73bb      	strb	r3, [r7, #14]
					uint8_t rightshift = 8 - byteoffset;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f1c3 0308 	rsb	r3, r3, #8
 8000c5a:	737b      	strb	r3, [r7, #13]
					tempval = (can_rx_data[b] << leftshift) >>  rightshift;
 8000c5c:	4a24      	ldr	r2, [pc, #144]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	409a      	lsls	r2, r3
 8000c6a:	7b7b      	ldrb	r3, [r7, #13]
 8000c6c:	fa42 f303 	asr.w	r3, r2, r3
 8000c70:	77fb      	strb	r3, [r7, #31]
 8000c72:	e004      	b.n	8000c7e <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
				}
				else
				{
					//Use the whole byte
					tempval = can_rx_data[b];
 8000c74:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	4413      	add	r3, r2
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	77fb      	strb	r3, [r7, #31]
				}
				//Calculate the size of the next data section to find the required shift
				int nextsize = messageArray[i].length - ((j+1) * 8);
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	4413      	add	r3, r2
 8000c86:	3305      	adds	r3, #5
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	3301      	adds	r3, #1
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	61bb      	str	r3, [r7, #24]

				//Limit it to 0
				if (nextsize < 0)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	da01      	bge.n	8000ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
				{
					nextsize = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
				}
				finalval += tempval << nextsize;
 8000ca0:	7ffa      	ldrb	r2, [r7, #31]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	4413      	add	r3, r2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
				j++;
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
			for (int b = bytepos; b < bytepos + bytes; b++)
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	6a3a      	ldr	r2, [r7, #32]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dba0      	blt.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
			}

			//Finally set final value into message array struct
			messageArray[i].value = finalval;
 8000cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cca:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	601a      	str	r2, [r3, #0]
	for(int i=0; i < sizeof(messageArray) / sizeof(struct message); i++)
 8000cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd8:	3301      	adds	r3, #1
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	f67f af59 	bls.w	8000b96 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
		}
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20002104 	.word	0x20002104
 8000cf4:	20001d9c 	.word	0x20001d9c
 8000cf8:	200020c4 	.word	0x200020c4

08000cfc <StartShift>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartShift */
void StartShift(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int shiftvalue=0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if (messageArray[0].value==64001 && messageArray[1].value == 1 && messageArray[2].value == 1 && shiftvalue==0)
 8000d08:	4b6d      	ldr	r3, [pc, #436]	; (8000ec0 <StartShift+0x1c4>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f64f 2201 	movw	r2, #64001	; 0xfa01
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d137      	bne.n	8000d84 <StartShift+0x88>
 8000d14:	4b6a      	ldr	r3, [pc, #424]	; (8000ec0 <StartShift+0x1c4>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d133      	bne.n	8000d84 <StartShift+0x88>
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <StartShift+0x1c4>)
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d12f      	bne.n	8000d84 <StartShift+0x88>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d12c      	bne.n	8000d84 <StartShift+0x88>
    {
    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, 1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4865      	ldr	r0, [pc, #404]	; (8000ec4 <StartShift+0x1c8>)
 8000d30:	f001 fade 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	4862      	ldr	r0, [pc, #392]	; (8000ec4 <StartShift+0x1c8>)
 8000d3a:	f001 fad9 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, 1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	4860      	ldr	r0, [pc, #384]	; (8000ec4 <StartShift+0x1c8>)
 8000d44:	f001 fad4 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	485d      	ldr	r0, [pc, #372]	; (8000ec4 <StartShift+0x1c8>)
 8000d4e:	f001 facf 	bl	80022f0 <HAL_GPIO_WritePin>

    	osDelay(30);
 8000d52:	201e      	movs	r0, #30
 8000d54:	f003 fd54 	bl	8004800 <osDelay>

    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	4859      	ldr	r0, [pc, #356]	; (8000ec4 <StartShift+0x1c8>)
 8000d5e:	f001 fac7 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <StartShift+0x1c8>)
 8000d68:	f001 fac2 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4854      	ldr	r0, [pc, #336]	; (8000ec4 <StartShift+0x1c8>)
 8000d72:	f001 fabd 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2120      	movs	r1, #32
 8000d7a:	4852      	ldr	r0, [pc, #328]	; (8000ec4 <StartShift+0x1c8>)
 8000d7c:	f001 fab8 	bl	80022f0 <HAL_GPIO_WritePin>
    	shiftvalue=1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
    }

    if (messageArray[0].value == 1 && messageArray[1].value ==64001 && messageArray[2].value == 1 && messageArray[3].value<=10500 && shiftvalue==0)
 8000d84:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <StartShift+0x1c4>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d13f      	bne.n	8000e0c <StartShift+0x110>
 8000d8c:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <StartShift+0x1c4>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f64f 2201 	movw	r2, #64001	; 0xfa01
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d139      	bne.n	8000e0c <StartShift+0x110>
 8000d98:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <StartShift+0x1c4>)
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d135      	bne.n	8000e0c <StartShift+0x110>
 8000da0:	4b47      	ldr	r3, [pc, #284]	; (8000ec0 <StartShift+0x1c4>)
 8000da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da4:	f642 1204 	movw	r2, #10500	; 0x2904
 8000da8:	4293      	cmp	r3, r2
 8000daa:	dc2f      	bgt.n	8000e0c <StartShift+0x110>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d12c      	bne.n	8000e0c <StartShift+0x110>
    {
    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4843      	ldr	r0, [pc, #268]	; (8000ec4 <StartShift+0x1c8>)
 8000db8:	f001 fa9a 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	4840      	ldr	r0, [pc, #256]	; (8000ec4 <StartShift+0x1c8>)
 8000dc2:	f001 fa95 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2110      	movs	r1, #16
 8000dca:	483e      	ldr	r0, [pc, #248]	; (8000ec4 <StartShift+0x1c8>)
 8000dcc:	f001 fa90 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	483b      	ldr	r0, [pc, #236]	; (8000ec4 <StartShift+0x1c8>)
 8000dd6:	f001 fa8b 	bl	80022f0 <HAL_GPIO_WritePin>

    	osDelay(30);
 8000dda:	201e      	movs	r0, #30
 8000ddc:	f003 fd10 	bl	8004800 <osDelay>

    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2140      	movs	r1, #64	; 0x40
 8000de4:	4837      	ldr	r0, [pc, #220]	; (8000ec4 <StartShift+0x1c8>)
 8000de6:	f001 fa83 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	4835      	ldr	r0, [pc, #212]	; (8000ec4 <StartShift+0x1c8>)
 8000df0:	f001 fa7e 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	4832      	ldr	r0, [pc, #200]	; (8000ec4 <StartShift+0x1c8>)
 8000dfa:	f001 fa79 	bl	80022f0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2120      	movs	r1, #32
 8000e02:	4830      	ldr	r0, [pc, #192]	; (8000ec4 <StartShift+0x1c8>)
 8000e04:	f001 fa74 	bl	80022f0 <HAL_GPIO_WritePin>
    	shiftvalue=2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
    }

    if (messageArray[0].value ==1 && messageArray[1].value == 1 && messageArray[2].value == 64001 && messageArray[3].value<=7000 && shiftvalue==0)
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <StartShift+0x1c4>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d13f      	bne.n	8000e94 <StartShift+0x198>
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <StartShift+0x1c4>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d13b      	bne.n	8000e94 <StartShift+0x198>
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <StartShift+0x1c4>)
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	f64f 2201 	movw	r2, #64001	; 0xfa01
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d135      	bne.n	8000e94 <StartShift+0x198>
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <StartShift+0x1c4>)
 8000e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000e30:	4293      	cmp	r3, r2
 8000e32:	dc2f      	bgt.n	8000e94 <StartShift+0x198>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12c      	bne.n	8000e94 <StartShift+0x198>
    {
    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, 1);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2140      	movs	r1, #64	; 0x40
 8000e3e:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <StartShift+0x1c8>)
 8000e40:	f001 fa56 	bl	80022f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <StartShift+0x1c8>)
 8000e4a:	f001 fa51 	bl	80022f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, 1);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2110      	movs	r1, #16
 8000e52:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <StartShift+0x1c8>)
 8000e54:	f001 fa4c 	bl	80022f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	4819      	ldr	r0, [pc, #100]	; (8000ec4 <StartShift+0x1c8>)
 8000e5e:	f001 fa47 	bl	80022f0 <HAL_GPIO_WritePin>

		osDelay(5);
 8000e62:	2005      	movs	r0, #5
 8000e64:	f003 fccc 	bl	8004800 <osDelay>

		HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2140      	movs	r1, #64	; 0x40
 8000e6c:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <StartShift+0x1c8>)
 8000e6e:	f001 fa3f 	bl	80022f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <StartShift+0x1c8>)
 8000e78:	f001 fa3a 	bl	80022f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <StartShift+0x1c8>)
 8000e82:	f001 fa35 	bl	80022f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <StartShift+0x1c8>)
 8000e8c:	f001 fa30 	bl	80022f0 <HAL_GPIO_WritePin>
    	shiftvalue=3;
 8000e90:	2303      	movs	r3, #3
 8000e92:	60fb      	str	r3, [r7, #12]
    }

    if (messageArray[0].value ==1 && messageArray[1].value == 1 && messageArray[2].value == 1 && shiftvalue!=0)
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <StartShift+0x1c4>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	f47f af35 	bne.w	8000d08 <StartShift+0xc>
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <StartShift+0x1c4>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	f47f af30 	bne.w	8000d08 <StartShift+0xc>
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <StartShift+0x1c4>)
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f47f af2b 	bne.w	8000d08 <StartShift+0xc>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f43f af27 	beq.w	8000d08 <StartShift+0xc>
    {
    	shiftvalue=0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
    if (messageArray[0].value==64001 && messageArray[1].value == 1 && messageArray[2].value == 1 && shiftvalue==0)
 8000ebe:	e723      	b.n	8000d08 <StartShift+0xc>
 8000ec0:	200020c4 	.word	0x200020c4
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <StartFeedWDG>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFeedWDG */
void StartFeedWDG(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFeedWDG */
  /* Infinite loop */
  for(;;)
  {
	  //600 milliseconds is in the lower end of the watchdog window as currently configured in the SBC.
		osDelay(600);
 8000ed0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000ed4:	f003 fc94 	bl	8004800 <osDelay>
	  uint8_t rxdata[2];
	  uint8_t txdata[2];

	  txdata[0] = WD_SETUP;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	723b      	strb	r3, [r7, #8]
		txdata[1] = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	727b      	strb	r3, [r7, #9]

		HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f001 fa02 	bl	80022f0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 8000eec:	f107 020c 	add.w	r2, r7, #12
 8000ef0:	f107 0108 	add.w	r1, r7, #8
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <StartFeedWDG+0x54>)
 8000efc:	f002 fc3b 	bl	8003776 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f001 f9f2 	bl	80022f0 <HAL_GPIO_WritePin>

		//Toggle LED
		HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fa04 	bl	8002320 <HAL_GPIO_TogglePin>
  {
 8000f18:	e7da      	b.n	8000ed0 <StartFeedWDG+0x8>
 8000f1a:	bf00      	nop
 8000f1c:	20002048 	.word	0x20002048

08000f20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f32:	f000 f9bb 	bl	80012ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	210f      	movs	r1, #15
 8000f8a:	f06f 0001 	mvn.w	r0, #1
 8000f8e:	f000 ffd5 	bl	8001f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_CAN_MspInit+0xa0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d139      	bne.n	8001036 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_CAN_MspInit+0xa4>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <HAL_CAN_MspInit+0xa4>)
 8000fc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_CAN_MspInit+0xa4>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_CAN_MspInit+0xa4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_CAN_MspInit+0xa4>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_CAN_MspInit+0xa4>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ff2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001004:	2309      	movs	r3, #9
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f000 fffb 	bl	800200c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	2014      	movs	r0, #20
 800101c:	f000 ff8e 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001020:	2014      	movs	r0, #20
 8001022:	f000 ffa7 	bl	8001f74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	2015      	movs	r0, #21
 800102c:	f000 ff86 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001030:	2015      	movs	r0, #21
 8001032:	f000 ff9f 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40006400 	.word	0x40006400
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_SPI_MspInit+0x8c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d130      	bne.n	80010cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_SPI_MspInit+0x90>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_SPI_MspInit+0x90>)
 8001070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_SPI_MspInit+0x90>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_SPI_MspInit+0x90>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_SPI_MspInit+0x90>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_SPI_MspInit+0x90>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800109a:	23e0      	movs	r3, #224	; 0xe0
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010aa:	2305      	movs	r3, #5
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f000 ffa8 	bl	800200c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2105      	movs	r1, #5
 80010c0:	2023      	movs	r0, #35	; 0x23
 80010c2:	f000 ff3b 	bl	8001f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010c6:	2023      	movs	r0, #35	; 0x23
 80010c8:	f000 ff54 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40013000 	.word	0x40013000
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	2036      	movs	r0, #54	; 0x36
 80010f2:	f000 ff23 	bl	8001f3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80010f6:	2036      	movs	r0, #54	; 0x36
 80010f8:	f000 ff3c 	bl	8001f74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_InitTick+0xa0>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_InitTick+0xa0>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	61d3      	str	r3, [r2, #28]
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_InitTick+0xa0>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001114:	f107 0210 	add.w	r2, r7, #16
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fa54 	bl	80035cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001124:	f002 fa30 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	4a13      	ldr	r2, [pc, #76]	; (8001180 <HAL_InitTick+0xa4>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	3b01      	subs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_InitTick+0xa8>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_InitTick+0xac>)
 8001140:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_InitTick+0xa8>)
 8001144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001148:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_InitTick+0xa8>)
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_InitTick+0xa8>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_InitTick+0xa8>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_InitTick+0xa8>)
 800115e:	f002 ffa1 	bl	80040a4 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_InitTick+0xa8>)
 800116a:	f002 fffd 	bl	8004168 <HAL_TIM_Base_Start_IT>
 800116e:	4603      	mov	r3, r0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	431bde83 	.word	0x431bde83
 8001184:	2000210c 	.word	0x2000210c
 8001188:	40001000 	.word	0x40001000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <CAN_RX0_IRQHandler+0x10>)
 80011be:	f000 fbd6 	bl	800196e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20001e38 	.word	0x20001e38

080011cc <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <CAN_RX1_IRQHandler+0x10>)
 80011d2:	f000 fbcc 	bl	800196e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20001e38 	.word	0x20001e38

080011e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <SPI1_IRQHandler+0x10>)
 80011e6:	f002 fcd9 	bl	8003b9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20002048 	.word	0x20002048

080011f4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM6_DAC1_IRQHandler+0x10>)
 80011fa:	f003 f811 	bl	8004220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000210c 	.word	0x2000210c

08001208 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <LoopForever+0x6>)
  ldr r1, =_edata
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <LoopForever+0xe>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001248:	4c0b      	ldr	r4, [pc, #44]	; (8001278 <LoopForever+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001256:	f7ff ffd7 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f005 ff07 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800125e:	f7ff fb23 	bl	80008a8 <main>

08001262 <LoopForever>:

LoopForever:
    b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001264:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001270:	080072f0 	.word	0x080072f0
  ldr r2, =_sbss
 8001274:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001278:	2000219c 	.word	0x2000219c

0800127c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_2_IRQHandler>
	...

08001280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_Init+0x28>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_Init+0x28>)
 800128a:	f043 0310 	orr.w	r3, r3, #16
 800128e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 fe48 	bl	8001f26 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ff20 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129c:	f7ff fe58 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40022000 	.word	0x40022000

080012ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20002158 	.word	0x20002158

080012d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20002158 	.word	0x20002158

080012ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0ed      	b.n	80014da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe48 	bl	8000fa0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff ffd8 	bl	80012d4 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001326:	e012      	b.n	800134e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001328:	f7ff ffd4 	bl	80012d4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b0a      	cmp	r3, #10
 8001334:	d90b      	bls.n	800134e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0c5      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0e5      	beq.n	8001328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0202 	bic.w	r2, r2, #2
 800136a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff ffb2 	bl	80012d4 <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001372:	e012      	b.n	800139a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001374:	f7ff ffae 	bl	80012d4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b0a      	cmp	r3, #10
 8001380:	d90b      	bls.n	800139a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2205      	movs	r2, #5
 8001392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e09f      	b.n	80014da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e5      	bne.n	8001374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e1b      	ldrb	r3, [r3, #24]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d108      	bne.n	80013c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7e5b      	ldrb	r3, [r3, #25]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d108      	bne.n	80013ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e007      	b.n	80013fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e9b      	ldrb	r3, [r3, #26]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0220 	orr.w	r2, r2, #32
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e007      	b.n	8001426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0220 	bic.w	r2, r2, #32
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7edb      	ldrb	r3, [r3, #27]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0210 	bic.w	r2, r2, #16
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e007      	b.n	8001450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0210 	orr.w	r2, r2, #16
 800144e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0208 	bic.w	r2, r2, #8
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7f5b      	ldrb	r3, [r3, #29]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0204 	orr.w	r2, r2, #4
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e007      	b.n	80014a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	ea42 0103 	orr.w	r1, r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014fa:	7cfb      	ldrb	r3, [r7, #19]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d003      	beq.n	8001508 <HAL_CAN_ConfigFilter+0x26>
 8001500:	7cfb      	ldrb	r3, [r7, #19]
 8001502:	2b02      	cmp	r3, #2
 8001504:	f040 80aa 	bne.w	800165c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2201      	movs	r2, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d123      	bne.n	800158a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001564:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3248      	adds	r2, #72	; 0x48
 800156a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800157e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001580:	6979      	ldr	r1, [r7, #20]
 8001582:	3348      	adds	r3, #72	; 0x48
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d122      	bne.n	80015d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	431a      	orrs	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3248      	adds	r2, #72	; 0x48
 80015b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	3348      	adds	r3, #72	; 0x48
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015f2:	e007      	b.n	8001604 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800161e:	e007      	b.n	8001630 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800164e:	f023 0201 	bic.w	r2, r3, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e006      	b.n	800166a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
  }
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d12e      	bne.n	80016e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016a2:	f7ff fe17 	bl	80012d4 <HAL_GetTick>
 80016a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a8:	e012      	b.n	80016d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016aa:	f7ff fe13 	bl	80012d4 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b0a      	cmp	r3, #10
 80016b6:	d90b      	bls.n	80016d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2205      	movs	r2, #5
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e012      	b.n	80016f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1e5      	bne.n	80016aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e006      	b.n	80016f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
  }
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016fe:	b480      	push	{r7}
 8001700:	b087      	sub	sp, #28
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d003      	beq.n	8001722 <HAL_CAN_GetRxMessage+0x24>
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b02      	cmp	r3, #2
 800171e:	f040 80f3 	bne.w	8001908 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10e      	bne.n	8001746 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0e7      	b.n	8001916 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0d8      	b.n	8001916 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	331b      	adds	r3, #27
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0204 	and.w	r2, r3, #4
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	331b      	adds	r3, #27
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0d5b      	lsrs	r3, r3, #21
 8001792:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	331b      	adds	r3, #27
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	331b      	adds	r3, #27
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4413      	add	r3, r2
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0202 	and.w	r2, r3, #2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	331b      	adds	r3, #27
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 020f 	and.w	r2, r3, #15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	331b      	adds	r3, #27
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	3304      	adds	r3, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	331b      	adds	r3, #27
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	3304      	adds	r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	b29a      	uxth	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	4413      	add	r3, r2
 8001832:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0a1a      	lsrs	r2, r3, #8
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0c1a      	lsrs	r2, r3, #16
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3302      	adds	r3, #2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	4413      	add	r3, r2
 8001866:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0e1a      	lsrs	r2, r3, #24
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3303      	adds	r3, #3
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	3304      	adds	r3, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	4413      	add	r3, r2
 8001898:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0a1a      	lsrs	r2, r3, #8
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3305      	adds	r3, #5
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0c1a      	lsrs	r2, r3, #16
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3306      	adds	r3, #6
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0e1a      	lsrs	r2, r3, #24
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3307      	adds	r3, #7
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0220 	orr.w	r2, r2, #32
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	e007      	b.n	8001904 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0220 	orr.w	r2, r2, #32
 8001902:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e006      	b.n	8001916 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001932:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d002      	beq.n	8001940 <HAL_CAN_ActivateNotification+0x1e>
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d109      	bne.n	8001954 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6959      	ldr	r1, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	e006      	b.n	8001962 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b08a      	sub	sp, #40	; 0x28
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d07c      	beq.n	8001aae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d023      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f983 	bl	8001cdc <HAL_CAN_TxMailbox0CompleteCallback>
 80019d6:	e016      	b.n	8001a06 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	e00c      	b.n	8001a06 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	e002      	b.n	8001a06 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f989 	bl	8001d18 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d024      	beq.n	8001a5a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f963 	bl	8001cf0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a2a:	e016      	b.n	8001a5a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e00c      	b.n	8001a5a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e002      	b.n	8001a5a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f969 	bl	8001d2c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d024      	beq.n	8001aae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f943 	bl	8001d04 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a7e:	e016      	b.n	8001aae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	e00c      	b.n	8001aae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	e002      	b.n	8001aae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f949 	bl	8001d40 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f930 	bl	8001d54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff f835 	bl	8000b7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2210      	movs	r2, #16
 8001b34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f912 	bl	8001d7c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8f9 	bl	8001d68 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8fc 	bl	8001d90 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8f5 	bl	8001da4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d07b      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d072      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d043      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03e      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c3c:	2b60      	cmp	r3, #96	; 0x60
 8001c3e:	d02b      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x32a>
 8001c40:	2b60      	cmp	r3, #96	; 0x60
 8001c42:	d82e      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c44:	2b50      	cmp	r3, #80	; 0x50
 8001c46:	d022      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x320>
 8001c48:	2b50      	cmp	r3, #80	; 0x50
 8001c4a:	d82a      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d019      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x316>
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d826      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c54:	2b30      	cmp	r3, #48	; 0x30
 8001c56:	d010      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x30c>
 8001c58:	2b30      	cmp	r3, #48	; 0x30
 8001c5a:	d822      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c5c:	2b10      	cmp	r3, #16
 8001c5e:	d002      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x2f8>
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d005      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c64:	e01d      	b.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c6e:	e019      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c78:	e014      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f043 0320 	orr.w	r3, r3, #32
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c82:	e00f      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8c:	e00a      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c96:	e005      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ca2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cb2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f872 	bl	8001db8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff4c 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4e:	f7ff ff61 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f7ff ffb1 	bl	8001ec0 <NVIC_EncodePriority>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff80 	bl	8001e6c <__NVIC_SetPriority>
}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff54 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d005      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e027      	b.n	8002002 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 020e 	bic.w	r2, r2, #14
 8001fc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    } 
  }
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	e14e      	b.n	80022ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8140 	beq.w	80022b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d005      	beq.n	800204c <HAL_GPIO_Init+0x40>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d017      	beq.n	80020ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d123      	bne.n	800213e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0203 	and.w	r2, r3, #3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 809a 	beq.w	80022b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x1e0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_GPIO_Init+0x2d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1dc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <HAL_GPIO_Init+0x2d8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1d8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a44      	ldr	r2, [pc, #272]	; (80022e8 <HAL_GPIO_Init+0x2dc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1d4>
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e0:	2305      	movs	r3, #5
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021ec:	2300      	movs	r3, #0
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021fe:	4937      	ldr	r1, [pc, #220]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220c:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002230:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f aea9 	bne.w	800201c <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000800 	.word	0x48000800
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e002      	b.n	8002314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43d9      	mvns	r1, r3
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	400b      	ands	r3, r1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4905      	ldr	r1, [pc, #20]	; (8002390 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40021000 	.word	0x40021000
 8002390:	40010000 	.word	0x40010000

08002394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800239a:	af00      	add	r7, sp, #0
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f000 bef4 	b.w	8003196 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 816a 	beq.w	8002692 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023be:	4bb3      	ldr	r3, [pc, #716]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d00c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ca:	4bb0      	ldr	r3, [pc, #704]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d159      	bne.n	800248a <HAL_RCC_OscConfig+0xf6>
 80023d6:	4bad      	ldr	r3, [pc, #692]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e2:	d152      	bne.n	800248a <HAL_RCC_OscConfig+0xf6>
 80023e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d102      	bne.n	8002416 <HAL_RCC_OscConfig+0x82>
 8002410:	4b9e      	ldr	r3, [pc, #632]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0xae>
 8002416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800241a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800242a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002432:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800243e:	4b93      	ldr	r3, [pc, #588]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002446:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800244a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800244e:	fa92 f2a2 	rbit	r2, r2
 8002452:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002456:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800245a:	fab2 f282 	clz	r2, r2
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f042 0220 	orr.w	r2, r2, #32
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f002 021f 	and.w	r2, r2, #31
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 810c 	beq.w	8002690 <HAL_RCC_OscConfig+0x2fc>
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 8106 	bne.w	8002690 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f000 be86 	b.w	8003196 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x110>
 8002496:	4b7d      	ldr	r3, [pc, #500]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e030      	b.n	8002506 <HAL_RCC_OscConfig+0x172>
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x134>
 80024ae:	4b77      	ldr	r3, [pc, #476]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a76      	ldr	r2, [pc, #472]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b74      	ldr	r3, [pc, #464]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a73      	ldr	r2, [pc, #460]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01e      	b.n	8002506 <HAL_RCC_OscConfig+0x172>
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x15a>
 80024d4:	4b6d      	ldr	r3, [pc, #436]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6c      	ldr	r2, [pc, #432]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a69      	ldr	r2, [pc, #420]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x172>
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a66      	ldr	r2, [pc, #408]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a63      	ldr	r2, [pc, #396]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002506:	4b61      	ldr	r3, [pc, #388]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f023 020f 	bic.w	r2, r3, #15
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	495d      	ldr	r1, [pc, #372]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d059      	beq.n	80025d8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fed6 	bl	80012d4 <HAL_GetTick>
 8002528:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7fe fed1 	bl	80012d4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d902      	bls.n	8002544 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	f000 be29 	b.w	8003196 <HAL_RCC_OscConfig+0xe02>
 8002544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002548:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002558:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_RCC_OscConfig+0x1e2>
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0x20e>
 8002576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800258a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002592:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025b6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025ba:	fab2 f282 	clz	r2, r2
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f002 021f 	and.w	r2, r2, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f202 	lsl.w	r2, r1, r2
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ab      	beq.n	800252e <HAL_RCC_OscConfig+0x19a>
 80025d6:	e05c      	b.n	8002692 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe7c 	bl	80012d4 <HAL_GetTick>
 80025dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e2:	f7fe fe77 	bl	80012d4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d902      	bls.n	80025f8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	f000 bdcf 	b.w	8003196 <HAL_RCC_OscConfig+0xe02>
 80025f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800260c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <HAL_RCC_OscConfig+0x296>
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e015      	b.n	8002656 <HAL_RCC_OscConfig+0x2c2>
 800262a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800263e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002642:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002646:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_RCC_OscConfig+0x2f8>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800265e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002662:	fa92 f2a2 	rbit	r2, r2
 8002666:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800266a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ab      	bne.n	80025e2 <HAL_RCC_OscConfig+0x24e>
 800268a:	e002      	b.n	8002692 <HAL_RCC_OscConfig+0x2fe>
 800268c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 816f 	beq.w	8002980 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026a2:	4bd0      	ldr	r3, [pc, #832]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026ae:	4bcd      	ldr	r3, [pc, #820]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d16c      	bne.n	8002794 <HAL_RCC_OscConfig+0x400>
 80026ba:	4bca      	ldr	r3, [pc, #808]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d166      	bne.n	8002794 <HAL_RCC_OscConfig+0x400>
 80026c6:	2302      	movs	r3, #2
 80026c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d102      	bne.n	80026f6 <HAL_RCC_OscConfig+0x362>
 80026f0:	4bbc      	ldr	r3, [pc, #752]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	e013      	b.n	800271e <HAL_RCC_OscConfig+0x38a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002708:	2302      	movs	r3, #2
 800270a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800270e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800271a:	4bb2      	ldr	r3, [pc, #712]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2202      	movs	r2, #2
 8002720:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002724:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002728:	fa92 f2a2 	rbit	r2, r2
 800272c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002730:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f042 0220 	orr.w	r2, r2, #32
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f002 021f 	and.w	r2, r2, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_RCC_OscConfig+0x3cc>
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d002      	beq.n	8002760 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f000 bd1b 	b.w	8003196 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4ba0      	ldr	r3, [pc, #640]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	21f8      	movs	r1, #248	; 0xf8
 8002770:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002778:	fa91 f1a1 	rbit	r1, r1
 800277c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002780:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002784:	fab1 f181 	clz	r1, r1
 8002788:	b2c9      	uxtb	r1, r1
 800278a:	408b      	lsls	r3, r1
 800278c:	4995      	ldr	r1, [pc, #596]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e0f5      	b.n	8002980 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8085 	beq.w	80028aa <HAL_RCC_OscConfig+0x516>
 80027a0:	2301      	movs	r3, #1
 80027a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80027b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	461a      	mov	r2, r3
 80027c8:	2301      	movs	r3, #1
 80027ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fd82 	bl	80012d4 <HAL_GetTick>
 80027d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fd7d 	bl	80012d4 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d902      	bls.n	80027ec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	f000 bcd5 	b.w	8003196 <HAL_RCC_OscConfig+0xe02>
 80027ec:	2302      	movs	r3, #2
 80027ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <HAL_RCC_OscConfig+0x488>
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	e013      	b.n	8002844 <HAL_RCC_OscConfig+0x4b0>
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800282e:	2302      	movs	r3, #2
 8002830:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002834:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002840:	4b68      	ldr	r3, [pc, #416]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2202      	movs	r2, #2
 8002846:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800284a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800284e:	fa92 f2a2 	rbit	r2, r2
 8002852:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002856:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f042 0220 	orr.w	r2, r2, #32
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	f002 021f 	and.w	r2, r2, #31
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0af      	beq.n	80027d6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	21f8      	movs	r1, #248	; 0xf8
 8002886:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800288e:	fa91 f1a1 	rbit	r1, r1
 8002892:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002896:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800289a:	fab1 f181 	clz	r1, r1
 800289e:	b2c9      	uxtb	r1, r1
 80028a0:	408b      	lsls	r3, r1
 80028a2:	4950      	ldr	r1, [pc, #320]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e06a      	b.n	8002980 <HAL_RCC_OscConfig+0x5ec>
 80028aa:	2301      	movs	r3, #1
 80028ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	461a      	mov	r2, r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fcfd 	bl	80012d4 <HAL_GetTick>
 80028da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fcf8 	bl	80012d4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d902      	bls.n	80028f6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	f000 bc50 	b.w	8003196 <HAL_RCC_OscConfig+0xe02>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_RCC_OscConfig+0x592>
 8002920:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	e013      	b.n	800294e <HAL_RCC_OscConfig+0x5ba>
 8002926:	2302      	movs	r3, #2
 8002928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002938:	2302      	movs	r3, #2
 800293a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800293e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800294a:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <HAL_RCC_OscConfig+0x650>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2202      	movs	r2, #2
 8002950:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002954:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002958:	fa92 f2a2 	rbit	r2, r2
 800295c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002960:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f002 021f 	and.w	r2, r2, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1af      	bne.n	80028e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80da 	beq.w	8002b44 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d069      	beq.n	8002a6e <HAL_RCC_OscConfig+0x6da>
 800299a:	2301      	movs	r3, #1
 800299c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_OscConfig+0x654>)
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	461a      	mov	r2, r3
 80029c0:	2301      	movs	r3, #1
 80029c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c4:	f7fe fc86 	bl	80012d4 <HAL_GetTick>
 80029c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029cc:	e00e      	b.n	80029ec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe fc81 	bl	80012d4 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d906      	bls.n	80029ec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e3d9      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	10908120 	.word	0x10908120
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a02:	2202      	movs	r2, #2
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	4ba5      	ldr	r3, [pc, #660]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a36:	2102      	movs	r1, #2
 8002a38:	6019      	str	r1, [r3, #0]
 8002a3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f1a3 	rbit	r1, r3
 8002a44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a48:	6019      	str	r1, [r3, #0]
  return result;
 8002a4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0b0      	beq.n	80029ce <HAL_RCC_OscConfig+0x63a>
 8002a6c:	e06a      	b.n	8002b44 <HAL_RCC_OscConfig+0x7b0>
 8002a6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	fa93 f2a3 	rbit	r2, r3
 8002a80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a84:	601a      	str	r2, [r3, #0]
  return result;
 8002a86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <HAL_RCC_OscConfig+0x934>)
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fc18 	bl	80012d4 <HAL_GetTick>
 8002aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	e009      	b.n	8002abe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fc13 	bl	80012d4 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e36b      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
 8002abe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ada:	2202      	movs	r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002af2:	2202      	movs	r2, #2
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	fa93 f2a3 	rbit	r2, r3
 8002b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b06:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b0e:	2102      	movs	r1, #2
 8002b10:	6019      	str	r1, [r3, #0]
 8002b12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f1a3 	rbit	r1, r3
 8002b1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b20:	6019      	str	r1, [r3, #0]
  return result;
 8002b22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1b2      	bne.n	8002aaa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8158 	beq.w	8002e04 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b5a      	ldr	r3, [pc, #360]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	4b57      	ldr	r3, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a56      	ldr	r2, [pc, #344]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b54      	ldr	r3, [pc, #336]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b7a:	f107 0308 	add.w	r3, r7, #8
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f107 0308 	add.w	r3, r7, #8
 8002b84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <HAL_RCC_OscConfig+0x938>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11a      	bne.n	8002bce <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b98:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_RCC_OscConfig+0x938>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ccc <HAL_RCC_OscConfig+0x938>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fb96 	bl	80012d4 <HAL_GetTick>
 8002ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bae:	f7fe fb91 	bl	80012d4 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e2e9      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <HAL_RCC_OscConfig+0x938>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ef      	beq.n	8002bae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d106      	bne.n	8002be6 <HAL_RCC_OscConfig+0x852>
 8002bd8:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a39      	ldr	r2, [pc, #228]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	e02f      	b.n	8002c46 <HAL_RCC_OscConfig+0x8b2>
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10c      	bne.n	8002c0a <HAL_RCC_OscConfig+0x876>
 8002bf0:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4a33      	ldr	r2, [pc, #204]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	6213      	str	r3, [r2, #32]
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4a30      	ldr	r2, [pc, #192]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c02:	f023 0304 	bic.w	r3, r3, #4
 8002c06:	6213      	str	r3, [r2, #32]
 8002c08:	e01d      	b.n	8002c46 <HAL_RCC_OscConfig+0x8b2>
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x89a>
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0x8b2>
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d06b      	beq.n	8002d28 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe fb40 	bl	80012d4 <HAL_GetTick>
 8002c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fb3b 	bl	80012d4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e291      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
 8002c72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c76:	2202      	movs	r2, #2
 8002c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c8e:	2202      	movs	r2, #2
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ca0:	601a      	str	r2, [r3, #0]
  return result;
 8002ca2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ca6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d109      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x93c>
 8002cbc:	4b01      	ldr	r3, [pc, #4]	; (8002cc4 <HAL_RCC_OscConfig+0x930>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	e014      	b.n	8002cec <HAL_RCC_OscConfig+0x958>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	10908120 	.word	0x10908120
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4bbb      	ldr	r3, [pc, #748]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	6011      	str	r1, [r2, #0]
 8002cf4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	fa92 f1a2 	rbit	r1, r2
 8002cfe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d02:	6011      	str	r1, [r2, #0]
  return result;
 8002d04:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d099      	beq.n	8002c5a <HAL_RCC_OscConfig+0x8c6>
 8002d26:	e063      	b.n	8002df0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fe fad4 	bl	80012d4 <HAL_GetTick>
 8002d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	e00b      	b.n	8002d4a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe facf 	bl	80012d4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e225      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
 8002d4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d66:	2202      	movs	r2, #2
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d78:	601a      	str	r2, [r3, #0]
  return result;
 8002d7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_OscConfig+0xa06>
 8002d94:	4b90      	ldr	r3, [pc, #576]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	e00d      	b.n	8002db6 <HAL_RCC_OscConfig+0xa22>
 8002d9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d9e:	2202      	movs	r2, #2
 8002da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	4b89      	ldr	r3, [pc, #548]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dba:	2102      	movs	r1, #2
 8002dbc:	6011      	str	r1, [r2, #0]
 8002dbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	fa92 f1a2 	rbit	r1, r2
 8002dc8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002dcc:	6011      	str	r1, [r2, #0]
  return result;
 8002dce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1a0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a76      	ldr	r2, [pc, #472]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 81c2 	beq.w	8003194 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e10:	4b71      	ldr	r3, [pc, #452]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	f000 819c 	beq.w	8003156 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	f040 8114 	bne.w	8003052 <HAL_RCC_OscConfig+0xcbe>
 8002e2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	fa93 f2a3 	rbit	r2, r3
 8002e3e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e42:	601a      	str	r2, [r3, #0]
  return result;
 8002e44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fa38 	bl	80012d4 <HAL_GetTick>
 8002e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fe fa33 	bl	80012d4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e18b      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
 8002e7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e96:	601a      	str	r2, [r3, #0]
  return result;
 8002e98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xb24>
 8002eb2:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	e01b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb5c>
 8002eb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ef4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ef8:	6011      	str	r1, [r2, #0]
 8002efa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	fa92 f1a2 	rbit	r1, r2
 8002f04:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f08:	6011      	str	r1, [r2, #0]
  return result;
 8002f0a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d19e      	bne.n	8002e6a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	4925      	ldr	r1, [pc, #148]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
 8002f48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f60:	601a      	str	r2, [r3, #0]
  return result;
 8002f62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f66:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f9a9 	bl	80012d4 <HAL_GetTick>
 8002f82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f86:	e009      	b.n	8002f9c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f9a4 	bl	80012d4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0fc      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
 8002f9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fb4:	601a      	str	r2, [r3, #0]
  return result;
 8002fb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0xc48>
 8002fd0:	4b01      	ldr	r3, [pc, #4]	; (8002fd8 <HAL_RCC_OscConfig+0xc44>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	e01e      	b.n	8003014 <HAL_RCC_OscConfig+0xc80>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ffa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_OscConfig+0xe0c>)
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003018:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	fa92 f1a2 	rbit	r1, r2
 8003028:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800302c:	6011      	str	r1, [r2, #0]
  return result;
 800302e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	fab2 f282 	clz	r2, r2
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f042 0220 	orr.w	r2, r2, #32
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f002 021f 	and.w	r2, r2, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d09b      	beq.n	8002f88 <HAL_RCC_OscConfig+0xbf4>
 8003050:	e0a0      	b.n	8003194 <HAL_RCC_OscConfig+0xe00>
 8003052:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003056:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800305a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306a:	601a      	str	r2, [r3, #0]
  return result;
 800306c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003070:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800307c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe f924 	bl	80012d4 <HAL_GetTick>
 800308c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003092:	f7fe f91f 	bl	80012d4 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e077      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
 80030a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	fa93 f2a3 	rbit	r2, r3
 80030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030be:	601a      	str	r2, [r3, #0]
  return result;
 80030c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0xd4c>
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_RCC_OscConfig+0xe0c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	e01b      	b.n	8003118 <HAL_RCC_OscConfig+0xd84>
 80030e0:	f107 0320 	add.w	r3, r7, #32
 80030e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f107 0320 	add.w	r3, r7, #32
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fa93 f2a3 	rbit	r2, r3
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f107 0318 	add.w	r3, r7, #24
 80030fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f107 0318 	add.w	r3, r7, #24
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_OscConfig+0xe0c>)
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f107 0210 	add.w	r2, r7, #16
 800311c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	f107 0210 	add.w	r2, r7, #16
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	fa92 f1a2 	rbit	r1, r2
 800312c:	f107 020c 	add.w	r2, r7, #12
 8003130:	6011      	str	r1, [r2, #0]
  return result;
 8003132:	f107 020c 	add.w	r2, r7, #12
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	fab2 f282 	clz	r2, r2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f002 021f 	and.w	r2, r2, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d19e      	bne.n	8003092 <HAL_RCC_OscConfig+0xcfe>
 8003154:	e01e      	b.n	8003194 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e018      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_RCC_OscConfig+0xe0c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800316c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	429a      	cmp	r2, r3
 800317c:	d108      	bne.n	8003190 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800317e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b09e      	sub	sp, #120	; 0x78
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e162      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b90      	ldr	r3, [pc, #576]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d910      	bls.n	80031ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b8d      	ldr	r3, [pc, #564]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	498b      	ldr	r1, [pc, #556]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b89      	ldr	r3, [pc, #548]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e14a      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	497f      	ldr	r1, [pc, #508]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80dc 	beq.w	80033d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d13c      	bne.n	800329a <HAL_RCC_ClockConfig+0xf6>
 8003220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003224:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800322e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_RCC_ClockConfig+0xa6>
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	e00f      	b.n	800326a <HAL_RCC_ClockConfig+0xc6>
 800324a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800324e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	667b      	str	r3, [r7, #100]	; 0x64
 8003258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325c:	663b      	str	r3, [r7, #96]	; 0x60
 800325e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800326e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003272:	fa92 f2a2 	rbit	r2, r2
 8003276:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800327a:	fab2 f282 	clz	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f042 0220 	orr.w	r2, r2, #32
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	f002 021f 	and.w	r2, r2, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f202 	lsl.w	r2, r1, r2
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d17b      	bne.n	800338e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0f3      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d13c      	bne.n	800331c <HAL_RCC_ClockConfig+0x178>
 80032a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_ClockConfig+0x128>
 80032c6:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e00f      	b.n	80032ec <HAL_RCC_ClockConfig+0x148>
 80032cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
 80032da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032de:	643b      	str	r3, [r7, #64]	; 0x40
 80032e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e8:	4b46      	ldr	r3, [pc, #280]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80032f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f4:	fa92 f2a2 	rbit	r2, r2
 80032f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fc:	fab2 f282 	clz	r2, r2
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f042 0220 	orr.w	r2, r2, #32
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	f002 021f 	and.w	r2, r2, #31
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d13a      	bne.n	800338e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b2      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
 800331c:	2302      	movs	r3, #2
 800331e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d102      	bne.n	8003344 <HAL_RCC_ClockConfig+0x1a0>
 800333e:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	e00d      	b.n	8003360 <HAL_RCC_ClockConfig+0x1bc>
 8003344:	2302      	movs	r3, #2
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	2302      	movs	r3, #2
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2202      	movs	r2, #2
 8003362:	61ba      	str	r2, [r7, #24]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	fa92 f2a2 	rbit	r2, r2
 800336a:	617a      	str	r2, [r7, #20]
  return result;
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	fab2 f282 	clz	r2, r2
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	f042 0220 	orr.w	r2, r2, #32
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f002 021f 	and.w	r2, r2, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e079      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	491a      	ldr	r1, [pc, #104]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a0:	f7fd ff98 	bl	80012d4 <HAL_GetTick>
 80033a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fd ff94 	bl	80012d4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e061      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_ClockConfig+0x260>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 020c 	and.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1eb      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d214      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	4906      	ldr	r1, [pc, #24]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e040      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
 8003400:	40022000 	.word	0x40022000
 8003404:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	491a      	ldr	r1, [pc, #104]	; (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4912      	ldr	r1, [pc, #72]	; (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003446:	f000 f829 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800344a:	4601      	mov	r1, r0
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_RCC_ClockConfig+0x2e8>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003454:	22f0      	movs	r2, #240	; 0xf0
 8003456:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	fa92 f2a2 	rbit	r2, r2
 800345e:	60fa      	str	r2, [r7, #12]
  return result;
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	fab2 f282 	clz	r2, r2
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	40d3      	lsrs	r3, r2
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <HAL_RCC_ClockConfig+0x2ec>)
 800346c:	5cd3      	ldrb	r3, [r2, r3]
 800346e:	fa21 f303 	lsr.w	r3, r1, r3
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_RCC_ClockConfig+0x2f0>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_ClockConfig+0x2f4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fe2e 	bl	80010dc <HAL_InitTick>
  
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3778      	adds	r7, #120	; 0x78
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	080072b0 	.word	0x080072b0
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b08b      	sub	sp, #44	; 0x2c
 80034a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x30>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ca:	e03c      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034ce:	623b      	str	r3, [r7, #32]
      break;
 80034d0:	e03c      	b.n	800354c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	607a      	str	r2, [r7, #4]
  return result;
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	40d3      	lsrs	r3, r2
 80034f0:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	220f      	movs	r2, #15
 8003500:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	fa92 f2a2 	rbit	r2, r2
 8003508:	60fa      	str	r2, [r7, #12]
  return result;
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	40d3      	lsrs	r3, r2
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003524:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	fbb2 f2f3 	udiv	r2, r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	e004      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a0c      	ldr	r2, [pc, #48]	; (800356c <HAL_RCC_GetSysClockFreq+0xd0>)
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	623b      	str	r3, [r7, #32]
      break;
 8003544:	e002      	b.n	800354c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003548:	623b      	str	r3, [r7, #32]
      break;
 800354a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354c:	6a3b      	ldr	r3, [r7, #32]
}
 800354e:	4618      	mov	r0, r3
 8003550:	372c      	adds	r7, #44	; 0x2c
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	007a1200 	.word	0x007a1200
 8003564:	080072c8 	.word	0x080072c8
 8003568:	080072d8 	.word	0x080072d8
 800356c:	003d0900 	.word	0x003d0900

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800358e:	f7ff ffef 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003592:	4601      	mov	r1, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800359c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	fa92 f2a2 	rbit	r2, r2
 80035a8:	603a      	str	r2, [r7, #0]
  return result;
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	40d3      	lsrs	r3, r2
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	080072c0 	.word	0x080072c0

080035cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	220f      	movs	r2, #15
 80035da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	08db      	lsrs	r3, r3, #3
 8003606:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <HAL_RCC_GetClockConfig+0x60>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e095      	b.n	800376e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d009      	beq.n	8003668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
 800365a:	e005      	b.n	8003668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fce0 	bl	8001048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036a8:	d902      	bls.n	80036b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e002      	b.n	80036b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036be:	d007      	beq.n	80036d0 <HAL_SPI_Init+0xa0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c8:	d002      	beq.n	80036d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	ea42 0103 	orr.w	r1, r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	f003 0204 	and.w	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800374c:	ea42 0103 	orr.w	r1, r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b08a      	sub	sp, #40	; 0x28
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003784:	2301      	movs	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_SPI_TransmitReceive+0x26>
 8003798:	2302      	movs	r3, #2
 800379a:	e1fb      	b.n	8003b94 <HAL_SPI_TransmitReceive+0x41e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a4:	f7fd fd96 	bl	80012d4 <HAL_GetTick>
 80037a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037bc:	887b      	ldrh	r3, [r7, #2]
 80037be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037c0:	7efb      	ldrb	r3, [r7, #27]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d00e      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x6e>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037cc:	d106      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x66>
 80037d6:	7efb      	ldrb	r3, [r7, #27]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d003      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037e2:	e1cd      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x80>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x80>
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037fc:	e1c0      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b04      	cmp	r3, #4
 8003808:	d003      	beq.n	8003812 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2205      	movs	r2, #5
 800380e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	887a      	ldrh	r2, [r7, #2]
 8003822:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	887a      	ldrh	r2, [r7, #2]
 800382a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	887a      	ldrh	r2, [r7, #2]
 800383e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003854:	d802      	bhi.n	800385c <HAL_SPI_TransmitReceive+0xe6>
 8003856:	8a3b      	ldrh	r3, [r7, #16]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d908      	bls.n	800386e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	e007      	b.n	800387e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d007      	beq.n	800389c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a4:	d97c      	bls.n	80039a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0x13e>
 80038ae:	8a7b      	ldrh	r3, [r7, #18]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d169      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d8:	e056      	b.n	8003988 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d11b      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x1aa>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x1aa>
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d113      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d11c      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x1f2>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	b292      	uxth	r2, r2
 8003946:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	1c9a      	adds	r2, r3, #2
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003964:	2301      	movs	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003968:	f7fd fcb4 	bl	80012d4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003974:	429a      	cmp	r2, r3
 8003976:	d807      	bhi.n	8003988 <HAL_SPI_TransmitReceive+0x212>
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d003      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003986:	e0fb      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1a3      	bne.n	80038da <HAL_SPI_TransmitReceive+0x164>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d19d      	bne.n	80038da <HAL_SPI_TransmitReceive+0x164>
 800399e:	e0df      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x23a>
 80039a8:	8a7b      	ldrh	r3, [r7, #18]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	f040 80cb 	bne.w	8003b46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d912      	bls.n	80039e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	1c9a      	adds	r2, r3, #2
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b02      	subs	r3, #2
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039de:	e0b2      	b.n	8003b46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	7812      	ldrb	r2, [r2, #0]
 80039ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a06:	e09e      	b.n	8003b46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d134      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x30a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02f      	beq.n	8003a80 <HAL_SPI_TransmitReceive+0x30a>
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d12c      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d912      	bls.n	8003a56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b02      	subs	r3, #2
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a54:	e012      	b.n	8003a7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d148      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x3aa>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d042      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d923      	bls.n	8003aee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	1c9a      	adds	r2, r3, #2
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b02      	subs	r3, #2
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d81f      	bhi.n	8003b1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	e016      	b.n	8003b1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f103 020c 	add.w	r2, r3, #12
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b20:	f7fd fbd8 	bl	80012d4 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d803      	bhi.n	8003b38 <HAL_SPI_TransmitReceive+0x3c2>
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d102      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x3c8>
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b44:	e01c      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f af5b 	bne.w	8003a08 <HAL_SPI_TransmitReceive+0x292>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f47f af54 	bne.w	8003a08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fa57 	bl	8004018 <SPI_EndRxTxTransaction>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	661a      	str	r2, [r3, #96]	; 0x60
 8003b7c:	e000      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003b7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	099b      	lsrs	r3, r3, #6
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
    return;
 8003bde:	e0d7      	b.n	8003d90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_SPI_IRQHandler+0x66>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	09db      	lsrs	r3, r3, #7
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
    return;
 8003c00:	e0c6      	b.n	8003d90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10c      	bne.n	8003c28 <HAL_SPI_IRQHandler+0x8c>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80b4 	beq.w	8003d90 <HAL_SPI_IRQHandler+0x1f4>
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80ad 	beq.w	8003d90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d023      	beq.n	8003c8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d011      	beq.n	8003c72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	e00b      	b.n	8003c8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
        return;
 8003c88:	e082      	b.n	8003d90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d014      	beq.n	8003cc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00c      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	f043 0208 	orr.w	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04f      	beq.n	8003d8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d104      	bne.n	8003d1a <HAL_SPI_IRQHandler+0x17e>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d034      	beq.n	8003d84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0203 	bic.w	r2, r2, #3
 8003d28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_SPI_IRQHandler+0x1fc>)
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe f926 	bl	8001f90 <HAL_DMA_Abort_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <HAL_SPI_IRQHandler+0x1fc>)
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe f910 	bl	8001f90 <HAL_DMA_Abort_IT>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003d82:	e003      	b.n	8003d8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f809 	bl	8003d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d8a:	e000      	b.n	8003d8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d8c:	bf00      	nop
    return;
 8003d8e:	bf00      	nop
  }
}
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	08003db1 	.word	0x08003db1

08003d9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ffe5 	bl	8003d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dec:	f7fd fa72 	bl	80012d4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dfc:	f7fd fa6a 	bl	80012d4 <HAL_GetTick>
 8003e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	015b      	lsls	r3, r3, #5
 8003e08:	0d1b      	lsrs	r3, r3, #20
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e12:	e054      	b.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d050      	beq.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e1c:	f7fd fa5a 	bl	80012d4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d902      	bls.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d13d      	bne.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4a:	d111      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d004      	beq.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d107      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e78:	d10f      	bne.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e017      	b.n	8003ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d19b      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000000 	.word	0x20000000

08003eec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003efe:	f7fd f9e9 	bl	80012d4 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f0e:	f7fd f9e1 	bl	80012d4 <HAL_GetTick>
 8003f12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f1c:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00da      	lsls	r2, r3, #3
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	0d1b      	lsrs	r3, r3, #20
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f34:	e060      	b.n	8003ff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f3c:	d107      	bne.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d050      	beq.n	8003ff8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f56:	f7fd f9bd 	bl	80012d4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d902      	bls.n	8003f6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d13d      	bne.n	8003fe8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f84:	d111      	bne.n	8003faa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8e:	d004      	beq.n	8003f9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d107      	bne.n	8003faa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb2:	d10f      	bne.n	8003fd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e010      	b.n	800400a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d196      	bne.n	8003f36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000000 	.word	0x20000000

08004018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2200      	movs	r2, #0
 800402c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff ff5b 	bl	8003eec <SPI_WaitFifoStateUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e027      	b.n	800409c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fec0 	bl	8003ddc <SPI_WaitFlagStateUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e014      	b.n	800409c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7ff ff34 	bl	8003eec <SPI_WaitFifoStateUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408e:	f043 0220 	orr.w	r2, r3, #32
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e000      	b.n	800409c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e049      	b.n	800414a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f841 	bl	8004152 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f000 f9e4 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d001      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e040      	b.n	8004202 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <HAL_TIM_Base_Start_IT+0xa8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00e      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x58>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041aa:	d009      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x58>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a18      	ldr	r2, [pc, #96]	; (8004214 <HAL_TIM_Base_Start_IT+0xac>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x58>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_TIM_Base_Start_IT+0xb0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d115      	bne.n	80041ec <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_TIM_Base_Start_IT+0xb4>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d015      	beq.n	80041fe <HAL_TIM_Base_Start_IT+0x96>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d011      	beq.n	80041fe <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ea:	e008      	b.n	80041fe <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e000      	b.n	8004200 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40000400 	.word	0x40000400
 8004218:	40014000 	.word	0x40014000
 800421c:	00010007 	.word	0x00010007

08004220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d122      	bne.n	800427c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b02      	cmp	r3, #2
 8004242:	d11b      	bne.n	800427c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0202 	mvn.w	r2, #2
 800424c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f905 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8f7 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f908 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b04      	cmp	r3, #4
 8004288:	d122      	bne.n	80042d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d11b      	bne.n	80042d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0204 	mvn.w	r2, #4
 80042a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f8db 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f8cd 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f8de 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d122      	bne.n	8004324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d11b      	bne.n	8004324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0208 	mvn.w	r2, #8
 80042f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2204      	movs	r2, #4
 80042fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8b1 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8a3 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f8b4 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b10      	cmp	r3, #16
 8004330:	d122      	bne.n	8004378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b10      	cmp	r3, #16
 800433e:	d11b      	bne.n	8004378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0210 	mvn.w	r2, #16
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2208      	movs	r2, #8
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f887 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f879 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f88a 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0201 	mvn.w	r2, #1
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fdbe 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d10e      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d107      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8f2 	bl	80045b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d10e      	bne.n	80043fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b80      	cmp	r3, #128	; 0x80
 80043ec:	d107      	bne.n	80043fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8e5 	bl	80045c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d10e      	bne.n	800442a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d107      	bne.n	800442a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f838 	bl	800449a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b20      	cmp	r3, #32
 8004436:	d10e      	bne.n	8004456 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b20      	cmp	r3, #32
 8004444:	d107      	bne.n	8004456 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0220 	mvn.w	r2, #32
 800444e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f8a5 	bl	80045a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a32      	ldr	r2, [pc, #200]	; (800458c <TIM_Base_SetConfig+0xdc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0x28>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0x28>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <TIM_Base_SetConfig+0xe0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <TIM_Base_SetConfig+0xdc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <TIM_Base_SetConfig+0x6a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d00f      	beq.n	800451a <TIM_Base_SetConfig+0x6a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a24      	ldr	r2, [pc, #144]	; (8004590 <TIM_Base_SetConfig+0xe0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_Base_SetConfig+0x6a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a23      	ldr	r2, [pc, #140]	; (8004594 <TIM_Base_SetConfig+0xe4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0x6a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <TIM_Base_SetConfig+0xe8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0x6a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a21      	ldr	r2, [pc, #132]	; (800459c <TIM_Base_SetConfig+0xec>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0e      	ldr	r2, [pc, #56]	; (800458c <TIM_Base_SetConfig+0xdc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0xc0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <TIM_Base_SetConfig+0xe4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0xc0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <TIM_Base_SetConfig+0xe8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0xc0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a0c      	ldr	r2, [pc, #48]	; (800459c <TIM_Base_SetConfig+0xec>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d103      	bne.n	8004578 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	615a      	str	r2, [r3, #20]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400
 800459c:	40014800 	.word	0x40014800

080045a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e2:	f3ef 8305 	mrs	r3, IPSR
 80045e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80045e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ee:	f3ef 8310 	mrs	r3, PRIMASK
 80045f2:	607b      	str	r3, [r7, #4]
  return(result);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <osKernelInitialize+0x32>
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <osKernelInitialize+0x64>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d109      	bne.n	8004616 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004602:	f3ef 8311 	mrs	r3, BASEPRI
 8004606:	603b      	str	r3, [r7, #0]
  return(result);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800460e:	f06f 0305 	mvn.w	r3, #5
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e00c      	b.n	8004630 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <osKernelInitialize+0x64>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <osKernelInitialize+0x64>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e002      	b.n	8004630 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004630:	68fb      	ldr	r3, [r7, #12]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	2000002c 	.word	0x2000002c

08004644 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464a:	f3ef 8305 	mrs	r3, IPSR
 800464e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004650:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004656:	f3ef 8310 	mrs	r3, PRIMASK
 800465a:	607b      	str	r3, [r7, #4]
  return(result);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <osKernelStart+0x32>
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <osKernelStart+0x64>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d109      	bne.n	800467e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800466a:	f3ef 8311 	mrs	r3, BASEPRI
 800466e:	603b      	str	r3, [r7, #0]
  return(result);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004676:	f06f 0305 	mvn.w	r3, #5
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e00e      	b.n	800469c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <osKernelStart+0x64>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d107      	bne.n	8004696 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <osKernelStart+0x64>)
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800468c:	f001 f880 	bl	8005790 <vTaskStartScheduler>
      stat = osOK;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e002      	b.n	800469c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000002c 	.word	0x2000002c

080046ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b092      	sub	sp, #72	; 0x48
 80046b0:	af04      	add	r7, sp, #16
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046bc:	f3ef 8305 	mrs	r3, IPSR
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f040 8094 	bne.w	80047f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ca:	f3ef 8310 	mrs	r3, PRIMASK
 80046ce:	623b      	str	r3, [r7, #32]
  return(result);
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 808d 	bne.w	80047f2 <osThreadNew+0x146>
 80046d8:	4b48      	ldr	r3, [pc, #288]	; (80047fc <osThreadNew+0x150>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d106      	bne.n	80046ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046e0:	f3ef 8311 	mrs	r3, BASEPRI
 80046e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 8082 	bne.w	80047f2 <osThreadNew+0x146>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d07e      	beq.n	80047f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80046f8:	2318      	movs	r3, #24
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80046fc:	2300      	movs	r3, #0
 80046fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004700:	f107 031b 	add.w	r3, r7, #27
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d045      	beq.n	800479e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <osThreadNew+0x74>
        name = attr->name;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <osThreadNew+0x9a>
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	2b38      	cmp	r3, #56	; 0x38
 8004738:	d805      	bhi.n	8004746 <osThreadNew+0x9a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <osThreadNew+0x9e>
        return (NULL);
 8004746:	2300      	movs	r3, #0
 8004748:	e054      	b.n	80047f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00e      	beq.n	8004780 <osThreadNew+0xd4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b5b      	cmp	r3, #91	; 0x5b
 8004768:	d90a      	bls.n	8004780 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <osThreadNew+0xd4>
        mem = 1;
 800477a:	2301      	movs	r3, #1
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	e010      	b.n	80047a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10c      	bne.n	80047a2 <osThreadNew+0xf6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <osThreadNew+0xf6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <osThreadNew+0xf6>
          mem = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
 800479c:	e001      	b.n	80047a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d110      	bne.n	80047ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b0:	9202      	str	r2, [sp, #8]
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fe1a 	bl	80053f8 <xTaskCreateStatic>
 80047c4:	4603      	mov	r3, r0
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e013      	b.n	80047f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d110      	bne.n	80047f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fe64 	bl	80054b0 <xTaskCreate>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <osThreadNew+0x146>
          hTask = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047f2:	697b      	ldr	r3, [r7, #20]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3738      	adds	r7, #56	; 0x38
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	2000002c 	.word	0x2000002c

08004800 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004808:	f3ef 8305 	mrs	r3, IPSR
 800480c:	613b      	str	r3, [r7, #16]
  return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10f      	bne.n	8004834 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	60fb      	str	r3, [r7, #12]
  return(result);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <osDelay+0x34>
 8004820:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <osDelay+0x58>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d109      	bne.n	800483c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004828:	f3ef 8311 	mrs	r3, BASEPRI
 800482c:	60bb      	str	r3, [r7, #8]
  return(result);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <osDelay+0x3c>
    stat = osErrorISR;
 8004834:	f06f 0305 	mvn.w	r3, #5
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e007      	b.n	800484c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 ff6e 	bl	8005728 <vTaskDelay>
    }
  }

  return (stat);
 800484c:	697b      	ldr	r3, [r7, #20]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	2000002c 	.word	0x2000002c

0800485c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <vApplicationGetIdleTaskMemory+0x2c>)
 800486c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a06      	ldr	r2, [pc, #24]	; (800488c <vApplicationGetIdleTaskMemory+0x30>)
 8004872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000030 	.word	0x20000030
 800488c:	2000008c 	.word	0x2000008c

08004890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <vApplicationGetTimerTaskMemory+0x2c>)
 80048a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4a06      	ldr	r2, [pc, #24]	; (80048c0 <vApplicationGetTimerTaskMemory+0x30>)
 80048a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	2000028c 	.word	0x2000028c
 80048c0:	200002e8 	.word	0x200002e8

080048c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f103 0208 	add.w	r2, r3, #8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f103 0208 	add.w	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0208 	add.w	r2, r3, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e00c      	b.n	80049a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3308      	adds	r3, #8
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e002      	b.n	8004994 <vListInsert+0x2e>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d2f6      	bcs.n	800498e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	601a      	str	r2, [r3, #0]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6852      	ldr	r2, [r2, #4]
 80049f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d103      	bne.n	8004a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	1e5a      	subs	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a56:	f002 f80d 	bl	8006a74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	441a      	add	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	3b01      	subs	r3, #1
 8004a88:	68f9      	ldr	r1, [r7, #12]
 8004a8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	22ff      	movs	r2, #255	; 0xff
 8004a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	; 0xff
 8004aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d114      	bne.n	8004ad6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01a      	beq.n	8004aea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3310      	adds	r3, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 f8f7 	bl	8005cac <xTaskRemoveFromEventList>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <xQueueGenericReset+0xcc>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	e009      	b.n	8004aea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3310      	adds	r3, #16
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fef2 	bl	80048c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3324      	adds	r3, #36	; 0x24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff feed 	bl	80048c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004aea:	f001 fff3 	bl	8006ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aee:	2301      	movs	r3, #1
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08e      	sub	sp, #56	; 0x38
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <xQueueGenericCreateStatic+0x52>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <xQueueGenericCreateStatic+0x56>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <xQueueGenericCreateStatic+0x58>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <xQueueGenericCreateStatic+0x7e>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <xQueueGenericCreateStatic+0x82>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <xQueueGenericCreateStatic+0x84>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	61fb      	str	r3, [r7, #28]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b9a:	2350      	movs	r3, #80	; 0x50
 8004b9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b50      	cmp	r3, #80	; 0x50
 8004ba2:	d00a      	beq.n	8004bba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61bb      	str	r3, [r7, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00d      	beq.n	8004be0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bcc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f805 	bl	8004bea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3730      	adds	r7, #48	; 0x30
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e002      	b.n	8004c0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c18:	2101      	movs	r1, #1
 8004c1a:	69b8      	ldr	r0, [r7, #24]
 8004c1c:	f7ff ff06 	bl	8004a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08e      	sub	sp, #56	; 0x38
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xQueueGenericSend+0x32>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <xQueueGenericSend+0x40>
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <xQueueGenericSend+0x44>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <xQueueGenericSend+0x46>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <xQueueGenericSend+0x60>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d103      	bne.n	8004c9e <xQueueGenericSend+0x6e>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <xQueueGenericSend+0x72>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <xQueueGenericSend+0x74>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	623b      	str	r3, [r7, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cbe:	f001 f9b9 	bl	8006034 <xTaskGetSchedulerState>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <xQueueGenericSend+0x9e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <xQueueGenericSend+0xa2>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <xQueueGenericSend+0xa4>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueGenericSend+0xbe>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	61fb      	str	r3, [r7, #28]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cee:	f001 fec1 	bl	8006a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <xQueueGenericSend+0xd4>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d129      	bne.n	8004d58 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0a:	f000 fa07 	bl	800511c <prvCopyDataToQueue>
 8004d0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 ffc5 	bl	8005cac <xTaskRemoveFromEventList>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d28:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <xQueueGenericSend+0x1f8>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	e00a      	b.n	8004d50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d40:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <xQueueGenericSend+0x1f8>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d50:	f001 fec0 	bl	8006ad4 <vPortExitCritical>
				return pdPASS;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e063      	b.n	8004e20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d5e:	f001 feb9 	bl	8006ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e05c      	b.n	8004e20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 ffff 	bl	8005d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d7a:	f001 feab 	bl	8006ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7e:	f000 fd6d 	bl	800585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d82:	f001 fe77 	bl	8006a74 <vPortEnterCritical>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d103      	bne.n	8004d9c <xQueueGenericSend+0x16c>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da2:	b25b      	sxtb	r3, r3
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d103      	bne.n	8004db2 <xQueueGenericSend+0x182>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db2:	f001 fe8f 	bl	8006ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db6:	1d3a      	adds	r2, r7, #4
 8004db8:	f107 0314 	add.w	r3, r7, #20
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 ffee 	bl	8005da0 <xTaskCheckForTimeOut>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d124      	bne.n	8004e14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dcc:	f000 fa9e 	bl	800530c <prvIsQueueFull>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	3310      	adds	r3, #16
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ff14 	bl	8005c0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004de6:	f000 fa29 	bl	800523c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dea:	f000 fd45 	bl	8005878 <xTaskResumeAll>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af7c 	bne.w	8004cee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <xQueueGenericSend+0x1f8>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	e772      	b.n	8004cee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0a:	f000 fa17 	bl	800523c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e0e:	f000 fd33 	bl	8005878 <xTaskResumeAll>
 8004e12:	e76c      	b.n	8004cee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e16:	f000 fa11 	bl	800523c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e1a:	f000 fd2d 	bl	8005878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e1e:	2300      	movs	r3, #0
		}
	}
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3738      	adds	r7, #56	; 0x38
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <xQueueGenericSendFromISR+0x3c>
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <xQueueGenericSendFromISR+0x40>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <xQueueGenericSendFromISR+0x42>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	623b      	str	r3, [r7, #32]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d103      	bne.n	8004e96 <xQueueGenericSendFromISR+0x6a>
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <xQueueGenericSendFromISR+0x6e>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <xQueueGenericSendFromISR+0x70>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	61fb      	str	r3, [r7, #28]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eb6:	f001 febf 	bl	8006c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004eba:	f3ef 8211 	mrs	r2, BASEPRI
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	61ba      	str	r2, [r7, #24]
 8004ed0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <xQueueGenericSendFromISR+0xbc>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d12c      	bne.n	8004f42 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef8:	f000 f910 	bl	800511c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004efc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d112      	bne.n	8004f2c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	3324      	adds	r3, #36	; 0x24
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 feca 	bl	8005cac <xTaskRemoveFromEventList>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00e      	beq.n	8004f3c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00b      	beq.n	8004f3c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e007      	b.n	8004f3c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f30:	3301      	adds	r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	b25a      	sxtb	r2, r3
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f40:	e001      	b.n	8004f46 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3738      	adds	r7, #56	; 0x38
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	; 0x30
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <xQueueReceive+0x30>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	623b      	str	r3, [r7, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <xQueueReceive+0x3e>
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <xQueueReceive+0x42>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <xQueueReceive+0x44>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <xQueueReceive+0x5e>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	61fb      	str	r3, [r7, #28]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fba:	f001 f83b 	bl	8006034 <xTaskGetSchedulerState>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <xQueueReceive+0x6e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <xQueueReceive+0x72>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <xQueueReceive+0x74>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <xQueueReceive+0x8e>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	61bb      	str	r3, [r7, #24]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fea:	f001 fd43 	bl	8006a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01f      	beq.n	800503a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffe:	f000 f8f7 	bl	80051f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00f      	beq.n	8005032 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	3310      	adds	r3, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fe48 	bl	8005cac <xTaskRemoveFromEventList>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005022:	4b3d      	ldr	r3, [pc, #244]	; (8005118 <xQueueReceive+0x1bc>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005032:	f001 fd4f 	bl	8006ad4 <vPortExitCritical>
				return pdPASS;
 8005036:	2301      	movs	r3, #1
 8005038:	e069      	b.n	800510e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005040:	f001 fd48 	bl	8006ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005044:	2300      	movs	r3, #0
 8005046:	e062      	b.n	800510e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800504e:	f107 0310 	add.w	r3, r7, #16
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fe8e 	bl	8005d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800505c:	f001 fd3a 	bl	8006ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005060:	f000 fbfc 	bl	800585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005064:	f001 fd06 	bl	8006a74 <vPortEnterCritical>
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d103      	bne.n	800507e <xQueueReceive+0x122>
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005084:	b25b      	sxtb	r3, r3
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d103      	bne.n	8005094 <xQueueReceive+0x138>
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005094:	f001 fd1e 	bl	8006ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005098:	1d3a      	adds	r2, r7, #4
 800509a:	f107 0310 	add.w	r3, r7, #16
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fe7d 	bl	8005da0 <xTaskCheckForTimeOut>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d123      	bne.n	80050f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ae:	f000 f917 	bl	80052e0 <prvIsQueueEmpty>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d017      	beq.n	80050e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	3324      	adds	r3, #36	; 0x24
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fda3 	bl	8005c0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c8:	f000 f8b8 	bl	800523c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050cc:	f000 fbd4 	bl	8005878 <xTaskResumeAll>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d189      	bne.n	8004fea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <xQueueReceive+0x1bc>)
 80050d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	e780      	b.n	8004fea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ea:	f000 f8a7 	bl	800523c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ee:	f000 fbc3 	bl	8005878 <xTaskResumeAll>
 80050f2:	e77a      	b.n	8004fea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f6:	f000 f8a1 	bl	800523c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050fa:	f000 fbbd 	bl	8005878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005100:	f000 f8ee 	bl	80052e0 <prvIsQueueEmpty>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	f43f af6f 	beq.w	8004fea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800510c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800510e:	4618      	mov	r0, r3
 8005110:	3730      	adds	r7, #48	; 0x30
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10d      	bne.n	8005156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d14d      	bne.n	80051de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 ff92 	bl	8006070 <xTaskPriorityDisinherit>
 800514c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	e043      	b.n	80051de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d119      	bne.n	8005190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6898      	ldr	r0, [r3, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	461a      	mov	r2, r3
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	f001 ffa4 	bl	80070b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	441a      	add	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d32b      	bcc.n	80051de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	609a      	str	r2, [r3, #8]
 800518e:	e026      	b.n	80051de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68d8      	ldr	r0, [r3, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	461a      	mov	r2, r3
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	f001 ff8a 	bl	80070b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	425b      	negs	r3, r3
 80051aa:	441a      	add	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d207      	bcs.n	80051cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	425b      	negs	r3, r3
 80051c6:	441a      	add	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d105      	bne.n	80051de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	3b01      	subs	r3, #1
 80051dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051e6:	697b      	ldr	r3, [r7, #20]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	441a      	add	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d303      	bcc.n	8005224 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68d9      	ldr	r1, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	461a      	mov	r2, r3
 800522e:	6838      	ldr	r0, [r7, #0]
 8005230:	f001 ff40 	bl	80070b4 <memcpy>
	}
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005244:	f001 fc16 	bl	8006a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800524e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005250:	e011      	b.n	8005276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3324      	adds	r3, #36	; 0x24
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fd24 	bl	8005cac <xTaskRemoveFromEventList>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800526a:	f000 fdfb 	bl	8005e64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	3b01      	subs	r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	dce9      	bgt.n	8005252 <prvUnlockQueue+0x16>
 800527e:	e000      	b.n	8005282 <prvUnlockQueue+0x46>
					break;
 8005280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800528a:	f001 fc23 	bl	8006ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800528e:	f001 fbf1 	bl	8006a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800529a:	e011      	b.n	80052c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d012      	beq.n	80052ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3310      	adds	r3, #16
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fcff 	bl	8005cac <xTaskRemoveFromEventList>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052b4:	f000 fdd6 	bl	8005e64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dce9      	bgt.n	800529c <prvUnlockQueue+0x60>
 80052c8:	e000      	b.n	80052cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	22ff      	movs	r2, #255	; 0xff
 80052d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052d4:	f001 fbfe 	bl	8006ad4 <vPortExitCritical>
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052e8:	f001 fbc4 	bl	8006a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e001      	b.n	80052fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052fe:	f001 fbe9 	bl	8006ad4 <vPortExitCritical>

	return xReturn;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005314:	f001 fbae 	bl	8006a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	429a      	cmp	r2, r3
 8005322:	d102      	bne.n	800532a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e001      	b.n	800532e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800532e:	f001 fbd1 	bl	8006ad4 <vPortExitCritical>

	return xReturn;
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e014      	b.n	8005376 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800534c:	4a0f      	ldr	r2, [pc, #60]	; (800538c <vQueueAddToRegistry+0x50>)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005358:	490c      	ldr	r1, [pc, #48]	; (800538c <vQueueAddToRegistry+0x50>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005362:	4a0a      	ldr	r2, [pc, #40]	; (800538c <vQueueAddToRegistry+0x50>)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800536e:	e006      	b.n	800537e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b07      	cmp	r3, #7
 800537a:	d9e7      	bls.n	800534c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	2000215c 	.word	0x2000215c

08005390 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053a0:	f001 fb68 	bl	8006a74 <vPortEnterCritical>
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d103      	bne.n	80053ba <vQueueWaitForMessageRestricted+0x2a>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d103      	bne.n	80053d0 <vQueueWaitForMessageRestricted+0x40>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d0:	f001 fb80 	bl	8006ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3324      	adds	r3, #36	; 0x24
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fc35 	bl	8005c54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053ea:	6978      	ldr	r0, [r7, #20]
 80053ec:	f7ff ff26 	bl	800523c <prvUnlockQueue>
	}
 80053f0:	bf00      	nop
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08e      	sub	sp, #56	; 0x38
 80053fc:	af04      	add	r7, sp, #16
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xTaskCreateStatic+0x2a>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	623b      	str	r3, [r7, #32]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xTaskCreateStatic+0x46>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	61fb      	str	r3, [r7, #28]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800543e:	235c      	movs	r3, #92	; 0x5c
 8005440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b5c      	cmp	r3, #92	; 0x5c
 8005446:	d00a      	beq.n	800545e <xTaskCreateStatic+0x66>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	61bb      	str	r3, [r7, #24]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01e      	beq.n	80054a2 <xTaskCreateStatic+0xaa>
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01b      	beq.n	80054a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005472:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800547c:	2300      	movs	r3, #0
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	9302      	str	r3, [sp, #8]
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f850 	bl	800553a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800549a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800549c:	f000 f8d4 	bl	8005648 <prvAddNewTaskToReadyList>
 80054a0:	e001      	b.n	80054a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054a6:	697b      	ldr	r3, [r7, #20]
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3728      	adds	r7, #40	; 0x28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af04      	add	r7, sp, #16
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fbf7 	bl	8006cb8 <pvPortMalloc>
 80054ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80054d2:	205c      	movs	r0, #92	; 0x5c
 80054d4:	f001 fbf0 	bl	8006cb8 <pvPortMalloc>
 80054d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
 80054e6:	e005      	b.n	80054f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f001 fca9 	bl	8006e40 <vPortFree>
 80054ee:	e001      	b.n	80054f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	2300      	movs	r3, #0
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	9302      	str	r3, [sp, #8]
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f80e 	bl	800553a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800551e:	69f8      	ldr	r0, [r7, #28]
 8005520:	f000 f892 	bl	8005648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005524:	2301      	movs	r3, #1
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e002      	b.n	8005530 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005530:	69bb      	ldr	r3, [r7, #24]
	}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	461a      	mov	r2, r3
 8005552:	21a5      	movs	r1, #165	; 0xa5
 8005554:	f001 fdbc 	bl	80070d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005562:	3b01      	subs	r3, #1
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <prvInitialiseNewTask+0x58>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	617b      	str	r3, [r7, #20]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e012      	b.n	80055be <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	7819      	ldrb	r1, [r3, #0]
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	3334      	adds	r3, #52	; 0x34
 80055a8:	460a      	mov	r2, r1
 80055aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	3301      	adds	r3, #1
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d9e9      	bls.n	8005598 <prvInitialiseNewTask+0x5e>
 80055c4:	e000      	b.n	80055c8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80055c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	2b37      	cmp	r3, #55	; 0x37
 80055d4:	d901      	bls.n	80055da <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055d6:	2337      	movs	r3, #55	; 0x37
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2200      	movs	r2, #0
 80055ea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	3304      	adds	r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff f987 	bl	8004904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	3318      	adds	r3, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff f982 	bl	8004904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005604:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	69b8      	ldr	r0, [r7, #24]
 800562a:	f001 f8f5 	bl	8006818 <pxPortInitialiseStack>
 800562e:	4602      	mov	r2, r0
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005640:	bf00      	nop
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005650:	f001 fa10 	bl	8006a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005654:	4b2d      	ldr	r3, [pc, #180]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a2c      	ldr	r2, [pc, #176]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 800565c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800565e:	4b2c      	ldr	r3, [pc, #176]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005666:	4a2a      	ldr	r2, [pc, #168]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800566c:	4b27      	ldr	r3, [pc, #156]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d110      	bne.n	8005696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005674:	f000 fc1a 	bl	8005eac <prvInitialiseTaskLists>
 8005678:	e00d      	b.n	8005696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <prvAddNewTaskToReadyList+0xcc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d802      	bhi.n	8005696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005690:	4a1f      	ldr	r2, [pc, #124]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005696:	4b20      	ldr	r3, [pc, #128]	; (8005718 <prvAddNewTaskToReadyList+0xd0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <prvAddNewTaskToReadyList+0xd0>)
 800569e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <prvAddNewTaskToReadyList+0xd0>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4b1b      	ldr	r3, [pc, #108]	; (800571c <prvAddNewTaskToReadyList+0xd4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d903      	bls.n	80056bc <prvAddNewTaskToReadyList+0x74>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	4a18      	ldr	r2, [pc, #96]	; (800571c <prvAddNewTaskToReadyList+0xd4>)
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <prvAddNewTaskToReadyList+0xd8>)
 80056ca:	441a      	add	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f7ff f923 	bl	800491e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056d8:	f001 f9fc 	bl	8006ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <prvAddNewTaskToReadyList+0xcc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00e      	beq.n	8005702 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d207      	bcs.n	8005702 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <prvAddNewTaskToReadyList+0xdc>)
 80056f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000bbc 	.word	0x20000bbc
 8005710:	200006e8 	.word	0x200006e8
 8005714:	20000bc8 	.word	0x20000bc8
 8005718:	20000bd8 	.word	0x20000bd8
 800571c:	20000bc4 	.word	0x20000bc4
 8005720:	200006ec 	.word	0x200006ec
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d017      	beq.n	800576a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <vTaskDelay+0x60>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <vTaskDelay+0x30>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	60bb      	str	r3, [r7, #8]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005758:	f000 f880 	bl	800585c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800575c:	2100      	movs	r1, #0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fcf4 	bl	800614c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005764:	f000 f888 	bl	8005878 <xTaskResumeAll>
 8005768:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d107      	bne.n	8005780 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <vTaskDelay+0x64>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000be4 	.word	0x20000be4
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800579e:	463a      	mov	r2, r7
 80057a0:	1d39      	adds	r1, r7, #4
 80057a2:	f107 0308 	add.w	r3, r7, #8
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff f858 	bl	800485c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	9202      	str	r2, [sp, #8]
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	460a      	mov	r2, r1
 80057be:	4921      	ldr	r1, [pc, #132]	; (8005844 <vTaskStartScheduler+0xb4>)
 80057c0:	4821      	ldr	r0, [pc, #132]	; (8005848 <vTaskStartScheduler+0xb8>)
 80057c2:	f7ff fe19 	bl	80053f8 <xTaskCreateStatic>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4a20      	ldr	r2, [pc, #128]	; (800584c <vTaskStartScheduler+0xbc>)
 80057ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057cc:	4b1f      	ldr	r3, [pc, #124]	; (800584c <vTaskStartScheduler+0xbc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057d4:	2301      	movs	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e001      	b.n	80057de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d102      	bne.n	80057ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057e4:	f000 fd06 	bl	80061f4 <xTimerCreateTimerTask>
 80057e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d116      	bne.n	800581e <vTaskStartScheduler+0x8e>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	613b      	str	r3, [r7, #16]
}
 8005802:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005804:	4b12      	ldr	r3, [pc, #72]	; (8005850 <vTaskStartScheduler+0xc0>)
 8005806:	f04f 32ff 	mov.w	r2, #4294967295
 800580a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800580c:	4b11      	ldr	r3, [pc, #68]	; (8005854 <vTaskStartScheduler+0xc4>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005812:	4b11      	ldr	r3, [pc, #68]	; (8005858 <vTaskStartScheduler+0xc8>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005818:	f001 f88a 	bl	8006930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800581c:	e00e      	b.n	800583c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d10a      	bne.n	800583c <vTaskStartScheduler+0xac>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60fb      	str	r3, [r7, #12]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <vTaskStartScheduler+0xaa>
}
 800583c:	bf00      	nop
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	08007210 	.word	0x08007210
 8005848:	08005e7d 	.word	0x08005e7d
 800584c:	20000be0 	.word	0x20000be0
 8005850:	20000bdc 	.word	0x20000bdc
 8005854:	20000bc8 	.word	0x20000bc8
 8005858:	20000bc0 	.word	0x20000bc0

0800585c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <vTaskSuspendAll+0x18>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3301      	adds	r3, #1
 8005866:	4a03      	ldr	r2, [pc, #12]	; (8005874 <vTaskSuspendAll+0x18>)
 8005868:	6013      	str	r3, [r2, #0]
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20000be4 	.word	0x20000be4

08005878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005882:	2300      	movs	r3, #0
 8005884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005886:	4b42      	ldr	r3, [pc, #264]	; (8005990 <xTaskResumeAll+0x118>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	603b      	str	r3, [r7, #0]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058a4:	f001 f8e6 	bl	8006a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058a8:	4b39      	ldr	r3, [pc, #228]	; (8005990 <xTaskResumeAll+0x118>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	4a38      	ldr	r2, [pc, #224]	; (8005990 <xTaskResumeAll+0x118>)
 80058b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b2:	4b37      	ldr	r3, [pc, #220]	; (8005990 <xTaskResumeAll+0x118>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d162      	bne.n	8005980 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058ba:	4b36      	ldr	r3, [pc, #216]	; (8005994 <xTaskResumeAll+0x11c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d05e      	beq.n	8005980 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c2:	e02f      	b.n	8005924 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80058c4:	4b34      	ldr	r3, [pc, #208]	; (8005998 <xTaskResumeAll+0x120>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3318      	adds	r3, #24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff f881 	bl	80049d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3304      	adds	r3, #4
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff f87c 	bl	80049d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <xTaskResumeAll+0x124>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d903      	bls.n	80058f4 <xTaskResumeAll+0x7c>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4a2a      	ldr	r2, [pc, #168]	; (800599c <xTaskResumeAll+0x124>)
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <xTaskResumeAll+0x128>)
 8005902:	441a      	add	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f7ff f807 	bl	800491e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005914:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <xTaskResumeAll+0x12c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800591e:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <xTaskResumeAll+0x130>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005924:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <xTaskResumeAll+0x120>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1cb      	bne.n	80058c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005932:	f000 fb59 	bl	8005fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005936:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <xTaskResumeAll+0x134>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d010      	beq.n	8005964 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005942:	f000 f847 	bl	80059d4 <xTaskIncrementTick>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800594c:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <xTaskResumeAll+0x130>)
 800594e:	2201      	movs	r2, #1
 8005950:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3b01      	subs	r3, #1
 8005956:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f1      	bne.n	8005942 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <xTaskResumeAll+0x134>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005964:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <xTaskResumeAll+0x130>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005970:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <xTaskResumeAll+0x138>)
 8005972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005980:	f001 f8a8 	bl	8006ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8005984:	68bb      	ldr	r3, [r7, #8]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000be4 	.word	0x20000be4
 8005994:	20000bbc 	.word	0x20000bbc
 8005998:	20000b7c 	.word	0x20000b7c
 800599c:	20000bc4 	.word	0x20000bc4
 80059a0:	200006ec 	.word	0x200006ec
 80059a4:	200006e8 	.word	0x200006e8
 80059a8:	20000bd0 	.word	0x20000bd0
 80059ac:	20000bcc 	.word	0x20000bcc
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <xTaskGetTickCount+0x1c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059c0:	687b      	ldr	r3, [r7, #4]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000bc0 	.word	0x20000bc0

080059d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059de:	4b51      	ldr	r3, [pc, #324]	; (8005b24 <xTaskIncrementTick+0x150>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 808e 	bne.w	8005b04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059e8:	4b4f      	ldr	r3, [pc, #316]	; (8005b28 <xTaskIncrementTick+0x154>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059f0:	4a4d      	ldr	r2, [pc, #308]	; (8005b28 <xTaskIncrementTick+0x154>)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d120      	bne.n	8005a3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059fc:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <xTaskIncrementTick+0x158>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <xTaskIncrementTick+0x48>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	603b      	str	r3, [r7, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <xTaskIncrementTick+0x46>
 8005a1c:	4b43      	ldr	r3, [pc, #268]	; (8005b2c <xTaskIncrementTick+0x158>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	4b43      	ldr	r3, [pc, #268]	; (8005b30 <xTaskIncrementTick+0x15c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a41      	ldr	r2, [pc, #260]	; (8005b2c <xTaskIncrementTick+0x158>)
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	4a41      	ldr	r2, [pc, #260]	; (8005b30 <xTaskIncrementTick+0x15c>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4b40      	ldr	r3, [pc, #256]	; (8005b34 <xTaskIncrementTick+0x160>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	4a3f      	ldr	r2, [pc, #252]	; (8005b34 <xTaskIncrementTick+0x160>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	f000 fad5 	bl	8005fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	; (8005b38 <xTaskIncrementTick+0x164>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d34e      	bcc.n	8005ae6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a48:	4b38      	ldr	r3, [pc, #224]	; (8005b2c <xTaskIncrementTick+0x158>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <xTaskIncrementTick+0x82>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xTaskIncrementTick+0x84>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5c:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <xTaskIncrementTick+0x164>)
 8005a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a62:	601a      	str	r2, [r3, #0]
					break;
 8005a64:	e03f      	b.n	8005ae6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a66:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <xTaskIncrementTick+0x158>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d203      	bcs.n	8005a86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a7e:	4a2e      	ldr	r2, [pc, #184]	; (8005b38 <xTaskIncrementTick+0x164>)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6013      	str	r3, [r2, #0]
						break;
 8005a84:	e02f      	b.n	8005ae6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe ffa4 	bl	80049d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	3318      	adds	r3, #24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe ff9b 	bl	80049d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <xTaskIncrementTick+0x168>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d903      	bls.n	8005ab6 <xTaskIncrementTick+0xe2>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <xTaskIncrementTick+0x168>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <xTaskIncrementTick+0x16c>)
 8005ac4:	441a      	add	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fe ff26 	bl	800491e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <xTaskIncrementTick+0x170>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d3b3      	bcc.n	8005a48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae4:	e7b0      	b.n	8005a48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ae6:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <xTaskIncrementTick+0x170>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aec:	4914      	ldr	r1, [pc, #80]	; (8005b40 <xTaskIncrementTick+0x16c>)
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d907      	bls.n	8005b0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005afe:	2301      	movs	r3, #1
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e004      	b.n	8005b0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b04:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <xTaskIncrementTick+0x174>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a0f      	ldr	r2, [pc, #60]	; (8005b48 <xTaskIncrementTick+0x174>)
 8005b0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <xTaskIncrementTick+0x178>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005b16:	2301      	movs	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b1a:	697b      	ldr	r3, [r7, #20]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000be4 	.word	0x20000be4
 8005b28:	20000bc0 	.word	0x20000bc0
 8005b2c:	20000b74 	.word	0x20000b74
 8005b30:	20000b78 	.word	0x20000b78
 8005b34:	20000bd4 	.word	0x20000bd4
 8005b38:	20000bdc 	.word	0x20000bdc
 8005b3c:	20000bc4 	.word	0x20000bc4
 8005b40:	200006ec 	.word	0x200006ec
 8005b44:	200006e8 	.word	0x200006e8
 8005b48:	20000bcc 	.word	0x20000bcc
 8005b4c:	20000bd0 	.word	0x20000bd0

08005b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b56:	4b28      	ldr	r3, [pc, #160]	; (8005bf8 <vTaskSwitchContext+0xa8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b5e:	4b27      	ldr	r3, [pc, #156]	; (8005bfc <vTaskSwitchContext+0xac>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b64:	e041      	b.n	8005bea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005b66:	4b25      	ldr	r3, [pc, #148]	; (8005bfc <vTaskSwitchContext+0xac>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <vTaskSwitchContext+0xb0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e010      	b.n	8005b96 <vTaskSwitchContext+0x46>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	607b      	str	r3, [r7, #4]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vTaskSwitchContext+0x3e>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	491b      	ldr	r1, [pc, #108]	; (8005c04 <vTaskSwitchContext+0xb4>)
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0e4      	beq.n	8005b74 <vTaskSwitchContext+0x24>
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <vTaskSwitchContext+0xb4>)
 8005bb6:	4413      	add	r3, r2
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	605a      	str	r2, [r3, #4]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	3308      	adds	r3, #8
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d104      	bne.n	8005bda <vTaskSwitchContext+0x8a>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <vTaskSwitchContext+0xb8>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <vTaskSwitchContext+0xb0>)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6013      	str	r3, [r2, #0]
}
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000be4 	.word	0x20000be4
 8005bfc:	20000bd0 	.word	0x20000bd0
 8005c00:	20000bc4 	.word	0x20000bc4
 8005c04:	200006ec 	.word	0x200006ec
 8005c08:	200006e8 	.word	0x200006e8

08005c0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	60fb      	str	r3, [r7, #12]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c32:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <vTaskPlaceOnEventList+0x44>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3318      	adds	r3, #24
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fe fe93 	bl	8004966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c40:	2101      	movs	r1, #1
 8005c42:	6838      	ldr	r0, [r7, #0]
 8005c44:	f000 fa82 	bl	800614c <prvAddCurrentTaskToDelayedList>
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	200006e8 	.word	0x200006e8

08005c54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	617b      	str	r3, [r7, #20]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3318      	adds	r3, #24
 8005c82:	4619      	mov	r1, r3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7fe fe4a 	bl	800491e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295
 8005c94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	68b8      	ldr	r0, [r7, #8]
 8005c9a:	f000 fa57 	bl	800614c <prvAddCurrentTaskToDelayedList>
	}
 8005c9e:	bf00      	nop
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200006e8 	.word	0x200006e8

08005cac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	3318      	adds	r3, #24
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe fe7b 	bl	80049d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <xTaskRemoveFromEventList+0xb0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d11d      	bne.n	8005d26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fe72 	bl	80049d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <xTaskRemoveFromEventList+0xb4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d903      	bls.n	8005d08 <xTaskRemoveFromEventList+0x5c>
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <xTaskRemoveFromEventList+0xb4>)
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <xTaskRemoveFromEventList+0xb8>)
 8005d16:	441a      	add	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f7fe fdfd 	bl	800491e <vListInsertEnd>
 8005d24:	e005      	b.n	8005d32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3318      	adds	r3, #24
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	480e      	ldr	r0, [pc, #56]	; (8005d68 <xTaskRemoveFromEventList+0xbc>)
 8005d2e:	f7fe fdf6 	bl	800491e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <xTaskRemoveFromEventList+0xc0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d905      	bls.n	8005d4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <xTaskRemoveFromEventList+0xc4>)
 8005d46:	2201      	movs	r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e001      	b.n	8005d50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005d50:	697b      	ldr	r3, [r7, #20]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000be4 	.word	0x20000be4
 8005d60:	20000bc4 	.word	0x20000bc4
 8005d64:	200006ec 	.word	0x200006ec
 8005d68:	20000b7c 	.word	0x20000b7c
 8005d6c:	200006e8 	.word	0x200006e8
 8005d70:	20000bd0 	.word	0x20000bd0

08005d74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <vTaskInternalSetTimeOutState+0x24>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <vTaskInternalSetTimeOutState+0x28>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	605a      	str	r2, [r3, #4]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	20000bd4 	.word	0x20000bd4
 8005d9c:	20000bc0 	.word	0x20000bc0

08005da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	613b      	str	r3, [r7, #16]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60fb      	str	r3, [r7, #12]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005de2:	f000 fe47 	bl	8006a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005de6:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <xTaskCheckForTimeOut+0xbc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d102      	bne.n	8005e06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	e023      	b.n	8005e4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <xTaskCheckForTimeOut+0xc0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d007      	beq.n	8005e22 <xTaskCheckForTimeOut+0x82>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d302      	bcc.n	8005e22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	e015      	b.n	8005e4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d20b      	bcs.n	8005e44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff ff9b 	bl	8005d74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	e004      	b.n	8005e4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e4e:	f000 fe41 	bl	8006ad4 <vPortExitCritical>

	return xReturn;
 8005e52:	69fb      	ldr	r3, [r7, #28]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000bc0 	.word	0x20000bc0
 8005e60:	20000bd4 	.word	0x20000bd4

08005e64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <vTaskMissedYield+0x14>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20000bd0 	.word	0x20000bd0

08005e7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e84:	f000 f852 	bl	8005f2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e88:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <prvIdleTask+0x28>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d9f9      	bls.n	8005e84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <prvIdleTask+0x2c>)
 8005e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ea0:	e7f0      	b.n	8005e84 <prvIdleTask+0x8>
 8005ea2:	bf00      	nop
 8005ea4:	200006ec 	.word	0x200006ec
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	607b      	str	r3, [r7, #4]
 8005eb6:	e00c      	b.n	8005ed2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <prvInitialiseTaskLists+0x60>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fcfc 	bl	80048c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b37      	cmp	r3, #55	; 0x37
 8005ed6:	d9ef      	bls.n	8005eb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ed8:	480d      	ldr	r0, [pc, #52]	; (8005f10 <prvInitialiseTaskLists+0x64>)
 8005eda:	f7fe fcf3 	bl	80048c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ede:	480d      	ldr	r0, [pc, #52]	; (8005f14 <prvInitialiseTaskLists+0x68>)
 8005ee0:	f7fe fcf0 	bl	80048c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ee4:	480c      	ldr	r0, [pc, #48]	; (8005f18 <prvInitialiseTaskLists+0x6c>)
 8005ee6:	f7fe fced 	bl	80048c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eea:	480c      	ldr	r0, [pc, #48]	; (8005f1c <prvInitialiseTaskLists+0x70>)
 8005eec:	f7fe fcea 	bl	80048c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ef0:	480b      	ldr	r0, [pc, #44]	; (8005f20 <prvInitialiseTaskLists+0x74>)
 8005ef2:	f7fe fce7 	bl	80048c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <prvInitialiseTaskLists+0x78>)
 8005ef8:	4a05      	ldr	r2, [pc, #20]	; (8005f10 <prvInitialiseTaskLists+0x64>)
 8005efa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <prvInitialiseTaskLists+0x7c>)
 8005efe:	4a05      	ldr	r2, [pc, #20]	; (8005f14 <prvInitialiseTaskLists+0x68>)
 8005f00:	601a      	str	r2, [r3, #0]
}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200006ec 	.word	0x200006ec
 8005f10:	20000b4c 	.word	0x20000b4c
 8005f14:	20000b60 	.word	0x20000b60
 8005f18:	20000b7c 	.word	0x20000b7c
 8005f1c:	20000b90 	.word	0x20000b90
 8005f20:	20000ba8 	.word	0x20000ba8
 8005f24:	20000b74 	.word	0x20000b74
 8005f28:	20000b78 	.word	0x20000b78

08005f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f32:	e019      	b.n	8005f68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f34:	f000 fd9e 	bl	8006a74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <prvCheckTasksWaitingTermination+0x50>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fe fd47 	bl	80049d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <prvCheckTasksWaitingTermination+0x54>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	4a0b      	ldr	r2, [pc, #44]	; (8005f80 <prvCheckTasksWaitingTermination+0x54>)
 8005f52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <prvCheckTasksWaitingTermination+0x58>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	4a0a      	ldr	r2, [pc, #40]	; (8005f84 <prvCheckTasksWaitingTermination+0x58>)
 8005f5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f5e:	f000 fdb9 	bl	8006ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f810 	bl	8005f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <prvCheckTasksWaitingTermination+0x58>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e1      	bne.n	8005f34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000b90 	.word	0x20000b90
 8005f80:	20000bbc 	.word	0x20000bbc
 8005f84:	20000ba4 	.word	0x20000ba4

08005f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d108      	bne.n	8005fac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 ff4e 	bl	8006e40 <vPortFree>
				vPortFree( pxTCB );
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 ff4b 	bl	8006e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005faa:	e018      	b.n	8005fde <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d103      	bne.n	8005fbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ff42 	bl	8006e40 <vPortFree>
	}
 8005fbc:	e00f      	b.n	8005fde <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d00a      	beq.n	8005fde <prvDeleteTCB+0x56>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60fb      	str	r3, [r7, #12]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <prvDeleteTCB+0x54>
	}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <prvResetNextTaskUnblockTime+0x44>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <prvResetNextTaskUnblockTime+0x14>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <prvResetNextTaskUnblockTime+0x16>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <prvResetNextTaskUnblockTime+0x48>)
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800600a:	e008      	b.n	800601e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800600c:	4b07      	ldr	r3, [pc, #28]	; (800602c <prvResetNextTaskUnblockTime+0x44>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4a05      	ldr	r2, [pc, #20]	; (8006030 <prvResetNextTaskUnblockTime+0x48>)
 800601c:	6013      	str	r3, [r2, #0]
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000b74 	.word	0x20000b74
 8006030:	20000bdc 	.word	0x20000bdc

08006034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <xTaskGetSchedulerState+0x34>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006042:	2301      	movs	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e008      	b.n	800605a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <xTaskGetSchedulerState+0x38>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006050:	2302      	movs	r3, #2
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	e001      	b.n	800605a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006056:	2300      	movs	r3, #0
 8006058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800605a:	687b      	ldr	r3, [r7, #4]
	}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20000bc8 	.word	0x20000bc8
 800606c:	20000be4 	.word	0x20000be4

08006070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d056      	beq.n	8006134 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006086:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <xTaskPriorityDisinherit+0xd0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	429a      	cmp	r2, r3
 800608e:	d00a      	beq.n	80060a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60bb      	str	r3, [r7, #8]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	1e5a      	subs	r2, r3, #1
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d02c      	beq.n	8006134 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d128      	bne.n	8006134 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe fc76 	bl	80049d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <xTaskPriorityDisinherit+0xd4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d903      	bls.n	8006114 <xTaskPriorityDisinherit+0xa4>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	4a0c      	ldr	r2, [pc, #48]	; (8006144 <xTaskPriorityDisinherit+0xd4>)
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4a09      	ldr	r2, [pc, #36]	; (8006148 <xTaskPriorityDisinherit+0xd8>)
 8006122:	441a      	add	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7fe fbf7 	bl	800491e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006130:	2301      	movs	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006134:	697b      	ldr	r3, [r7, #20]
	}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200006e8 	.word	0x200006e8
 8006144:	20000bc4 	.word	0x20000bc4
 8006148:	200006ec 	.word	0x200006ec

0800614c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006156:	4b21      	ldr	r3, [pc, #132]	; (80061dc <prvAddCurrentTaskToDelayedList+0x90>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800615c:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3304      	adds	r3, #4
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fc38 	bl	80049d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d10a      	bne.n	8006186 <prvAddCurrentTaskToDelayedList+0x3a>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3304      	adds	r3, #4
 800617c:	4619      	mov	r1, r3
 800617e:	4819      	ldr	r0, [pc, #100]	; (80061e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006180:	f7fe fbcd 	bl	800491e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006184:	e026      	b.n	80061d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4413      	add	r3, r2
 800618c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800618e:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d209      	bcs.n	80061b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3304      	adds	r3, #4
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f7fe fbdb 	bl	8004966 <vListInsert>
}
 80061b0:	e010      	b.n	80061d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061b2:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f7fe fbd1 	bl	8004966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d202      	bcs.n	80061d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061ce:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6013      	str	r3, [r2, #0]
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20000bc0 	.word	0x20000bc0
 80061e0:	200006e8 	.word	0x200006e8
 80061e4:	20000ba8 	.word	0x20000ba8
 80061e8:	20000b78 	.word	0x20000b78
 80061ec:	20000b74 	.word	0x20000b74
 80061f0:	20000bdc 	.word	0x20000bdc

080061f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061fe:	f000 facb 	bl	8006798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006202:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <xTimerCreateTimerTask+0x80>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d021      	beq.n	800624e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006212:	1d3a      	adds	r2, r7, #4
 8006214:	f107 0108 	add.w	r1, r7, #8
 8006218:	f107 030c 	add.w	r3, r7, #12
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fb37 	bl	8004890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	9202      	str	r2, [sp, #8]
 800622a:	9301      	str	r3, [sp, #4]
 800622c:	2302      	movs	r3, #2
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2300      	movs	r3, #0
 8006232:	460a      	mov	r2, r1
 8006234:	4910      	ldr	r1, [pc, #64]	; (8006278 <xTimerCreateTimerTask+0x84>)
 8006236:	4811      	ldr	r0, [pc, #68]	; (800627c <xTimerCreateTimerTask+0x88>)
 8006238:	f7ff f8de 	bl	80053f8 <xTaskCreateStatic>
 800623c:	4603      	mov	r3, r0
 800623e:	4a10      	ldr	r2, [pc, #64]	; (8006280 <xTimerCreateTimerTask+0x8c>)
 8006240:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <xTimerCreateTimerTask+0x8c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800624a:	2301      	movs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	613b      	str	r3, [r7, #16]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800626a:	697b      	ldr	r3, [r7, #20]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000c18 	.word	0x20000c18
 8006278:	08007218 	.word	0x08007218
 800627c:	080063a1 	.word	0x080063a1
 8006280:	20000c1c 	.word	0x20000c1c

08006284 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	623b      	str	r3, [r7, #32]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062b2:	4b1a      	ldr	r3, [pc, #104]	; (800631c <xTimerGenericCommand+0x98>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d02a      	beq.n	8006310 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b05      	cmp	r3, #5
 80062ca:	dc18      	bgt.n	80062fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062cc:	f7ff feb2 	bl	8006034 <xTaskGetSchedulerState>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d109      	bne.n	80062ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062d6:	4b11      	ldr	r3, [pc, #68]	; (800631c <xTimerGenericCommand+0x98>)
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	f107 0110 	add.w	r1, r7, #16
 80062de:	2300      	movs	r3, #0
 80062e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e2:	f7fe fca5 	bl	8004c30 <xQueueGenericSend>
 80062e6:	6278      	str	r0, [r7, #36]	; 0x24
 80062e8:	e012      	b.n	8006310 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062ea:	4b0c      	ldr	r3, [pc, #48]	; (800631c <xTimerGenericCommand+0x98>)
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	f107 0110 	add.w	r1, r7, #16
 80062f2:	2300      	movs	r3, #0
 80062f4:	2200      	movs	r2, #0
 80062f6:	f7fe fc9b 	bl	8004c30 <xQueueGenericSend>
 80062fa:	6278      	str	r0, [r7, #36]	; 0x24
 80062fc:	e008      	b.n	8006310 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <xTimerGenericCommand+0x98>)
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	f107 0110 	add.w	r1, r7, #16
 8006306:	2300      	movs	r3, #0
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	f7fe fd8f 	bl	8004e2c <xQueueGenericSendFromISR>
 800630e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006312:	4618      	mov	r0, r3
 8006314:	3728      	adds	r7, #40	; 0x28
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000c18 	.word	0x20000c18

08006320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800632a:	4b1c      	ldr	r3, [pc, #112]	; (800639c <prvProcessExpiredTimer+0x7c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3304      	adds	r3, #4
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe fb4d 	bl	80049d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d122      	bne.n	800638c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	18d1      	adds	r1, r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	6978      	ldr	r0, [r7, #20]
 8006354:	f000 f8c8 	bl	80064e8 <prvInsertTimerInActiveList>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d016      	beq.n	800638c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800635e:	2300      	movs	r3, #0
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	2300      	movs	r3, #0
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	2100      	movs	r1, #0
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f7ff ff8b 	bl	8006284 <xTimerGenericCommand>
 800636e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60fb      	str	r3, [r7, #12]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	6978      	ldr	r0, [r7, #20]
 8006392:	4798      	blx	r3
}
 8006394:	bf00      	nop
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000c10 	.word	0x20000c10

080063a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 f857 	bl	8006460 <prvGetNextExpireTime>
 80063b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4619      	mov	r1, r3
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f803 	bl	80063c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063be:	f000 f8d5 	bl	800656c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063c2:	e7f1      	b.n	80063a8 <prvTimerTask+0x8>

080063c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063ce:	f7ff fa45 	bl	800585c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063d2:	f107 0308 	add.w	r3, r7, #8
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f866 	bl	80064a8 <prvSampleTimeNow>
 80063dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d130      	bne.n	8006446 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <prvProcessTimerOrBlockTask+0x3c>
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d806      	bhi.n	8006400 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063f2:	f7ff fa41 	bl	8005878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ff91 	bl	8006320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063fe:	e024      	b.n	800644a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d008      	beq.n	8006418 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <prvProcessTimerOrBlockTask+0x90>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <prvProcessTimerOrBlockTask+0x94>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	4619      	mov	r1, r3
 8006426:	f7fe ffb3 	bl	8005390 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800642a:	f7ff fa25 	bl	8005878 <xTaskResumeAll>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006434:	4b09      	ldr	r3, [pc, #36]	; (800645c <prvProcessTimerOrBlockTask+0x98>)
 8006436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	f3bf 8f6f 	isb	sy
}
 8006444:	e001      	b.n	800644a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006446:	f7ff fa17 	bl	8005878 <xTaskResumeAll>
}
 800644a:	bf00      	nop
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000c14 	.word	0x20000c14
 8006458:	20000c18 	.word	0x20000c18
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <prvGetNextExpireTime+0x44>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d105      	bne.n	8006492 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <prvGetNextExpireTime+0x44>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e001      	b.n	8006496 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000c10 	.word	0x20000c10

080064a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064b0:	f7ff fa80 	bl	80059b4 <xTaskGetTickCount>
 80064b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <prvSampleTimeNow+0x3c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d205      	bcs.n	80064cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064c0:	f000 f908 	bl	80066d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064d2:	4a04      	ldr	r2, [pc, #16]	; (80064e4 <prvSampleTimeNow+0x3c>)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000c20 	.word	0x20000c20

080064e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	429a      	cmp	r2, r3
 800650c:	d812      	bhi.n	8006534 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	1ad2      	subs	r2, r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	429a      	cmp	r2, r3
 800651a:	d302      	bcc.n	8006522 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e01b      	b.n	800655a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006522:	4b10      	ldr	r3, [pc, #64]	; (8006564 <prvInsertTimerInActiveList+0x7c>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7fe fa1a 	bl	8004966 <vListInsert>
 8006532:	e012      	b.n	800655a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d206      	bcs.n	800654a <prvInsertTimerInActiveList+0x62>
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d302      	bcc.n	800654a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	e007      	b.n	800655a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800654a:	4b07      	ldr	r3, [pc, #28]	; (8006568 <prvInsertTimerInActiveList+0x80>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3304      	adds	r3, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f7fe fa06 	bl	8004966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800655a:	697b      	ldr	r3, [r7, #20]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000c14 	.word	0x20000c14
 8006568:	20000c10 	.word	0x20000c10

0800656c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08e      	sub	sp, #56	; 0x38
 8006570:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006572:	e09d      	b.n	80066b0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	da18      	bge.n	80065ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800657a:	1d3b      	adds	r3, r7, #4
 800657c:	3304      	adds	r3, #4
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	61fb      	str	r3, [r7, #28]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a2:	6850      	ldr	r0, [r2, #4]
 80065a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a6:	6892      	ldr	r2, [r2, #8]
 80065a8:	4611      	mov	r1, r2
 80065aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	db7d      	blt.n	80066ae <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	3304      	adds	r3, #4
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fa08 	bl	80049d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065c8:	463b      	mov	r3, r7
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ff6c 	bl	80064a8 <prvSampleTimeNow>
 80065d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d86b      	bhi.n	80066b0 <prvProcessReceivedCommands+0x144>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <prvProcessReceivedCommands+0x74>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	08006609 	.word	0x08006609
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006609 	.word	0x08006609
 80065ec:	080066b1 	.word	0x080066b1
 80065f0:	08006665 	.word	0x08006665
 80065f4:	0800669d 	.word	0x0800669d
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006609 	.word	0x08006609
 8006600:	080066b1 	.word	0x080066b1
 8006604:	08006665 	.word	0x08006665
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	18d1      	adds	r1, r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006616:	f7ff ff67 	bl	80064e8 <prvInsertTimerInActiveList>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d047      	beq.n	80066b0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006626:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d13f      	bne.n	80066b0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	441a      	add	r2, r3
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	2100      	movs	r1, #0
 8006640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006642:	f7ff fe1f 	bl	8006284 <xTimerGenericCommand>
 8006646:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d130      	bne.n	80066b0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	61bb      	str	r3, [r7, #24]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10a      	bne.n	8006688 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	617b      	str	r3, [r7, #20]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	699a      	ldr	r2, [r3, #24]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	18d1      	adds	r1, r2, r3
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006696:	f7ff ff27 	bl	80064e8 <prvInsertTimerInActiveList>
					break;
 800669a:	e009      	b.n	80066b0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80066a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a8:	f000 fbca 	bl	8006e40 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066ac:	e000      	b.n	80066b0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <prvProcessReceivedCommands+0x164>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	1d39      	adds	r1, r7, #4
 80066b6:	2200      	movs	r2, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fc4f 	bl	8004f5c <xQueueReceive>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f47f af57 	bne.w	8006574 <prvProcessReceivedCommands+0x8>
	}
}
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	3730      	adds	r7, #48	; 0x30
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000c18 	.word	0x20000c18

080066d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066da:	e045      	b.n	8006768 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066dc:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <prvSwitchTimerLists+0xbc>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <prvSwitchTimerLists+0xbc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe f96f 	bl	80049d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d12e      	bne.n	8006768 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4413      	add	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d90e      	bls.n	800673a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006728:	4b19      	ldr	r3, [pc, #100]	; (8006790 <prvSwitchTimerLists+0xbc>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fe f917 	bl	8004966 <vListInsert>
 8006738:	e016      	b.n	8006768 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800673a:	2300      	movs	r3, #0
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	2300      	movs	r3, #0
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	2100      	movs	r1, #0
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7ff fd9d 	bl	8006284 <xTimerGenericCommand>
 800674a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	603b      	str	r3, [r7, #0]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006768:	4b09      	ldr	r3, [pc, #36]	; (8006790 <prvSwitchTimerLists+0xbc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1b4      	bne.n	80066dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <prvSwitchTimerLists+0xbc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <prvSwitchTimerLists+0xc0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a04      	ldr	r2, [pc, #16]	; (8006790 <prvSwitchTimerLists+0xbc>)
 800677e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006780:	4a04      	ldr	r2, [pc, #16]	; (8006794 <prvSwitchTimerLists+0xc0>)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	6013      	str	r3, [r2, #0]
}
 8006786:	bf00      	nop
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000c10 	.word	0x20000c10
 8006794:	20000c14 	.word	0x20000c14

08006798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800679e:	f000 f969 	bl	8006a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <prvCheckForValidListAndQueue+0x60>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d120      	bne.n	80067ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067aa:	4814      	ldr	r0, [pc, #80]	; (80067fc <prvCheckForValidListAndQueue+0x64>)
 80067ac:	f7fe f88a 	bl	80048c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067b0:	4813      	ldr	r0, [pc, #76]	; (8006800 <prvCheckForValidListAndQueue+0x68>)
 80067b2:	f7fe f887 	bl	80048c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067b6:	4b13      	ldr	r3, [pc, #76]	; (8006804 <prvCheckForValidListAndQueue+0x6c>)
 80067b8:	4a10      	ldr	r2, [pc, #64]	; (80067fc <prvCheckForValidListAndQueue+0x64>)
 80067ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067bc:	4b12      	ldr	r3, [pc, #72]	; (8006808 <prvCheckForValidListAndQueue+0x70>)
 80067be:	4a10      	ldr	r2, [pc, #64]	; (8006800 <prvCheckForValidListAndQueue+0x68>)
 80067c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067c2:	2300      	movs	r3, #0
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <prvCheckForValidListAndQueue+0x74>)
 80067c8:	4a11      	ldr	r2, [pc, #68]	; (8006810 <prvCheckForValidListAndQueue+0x78>)
 80067ca:	2110      	movs	r1, #16
 80067cc:	200a      	movs	r0, #10
 80067ce:	f7fe f995 	bl	8004afc <xQueueGenericCreateStatic>
 80067d2:	4603      	mov	r3, r0
 80067d4:	4a08      	ldr	r2, [pc, #32]	; (80067f8 <prvCheckForValidListAndQueue+0x60>)
 80067d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067d8:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <prvCheckForValidListAndQueue+0x60>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <prvCheckForValidListAndQueue+0x60>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	490b      	ldr	r1, [pc, #44]	; (8006814 <prvCheckForValidListAndQueue+0x7c>)
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fda8 	bl	800533c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067ec:	f000 f972 	bl	8006ad4 <vPortExitCritical>
}
 80067f0:	bf00      	nop
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000c18 	.word	0x20000c18
 80067fc:	20000be8 	.word	0x20000be8
 8006800:	20000bfc 	.word	0x20000bfc
 8006804:	20000c10 	.word	0x20000c10
 8006808:	20000c14 	.word	0x20000c14
 800680c:	20000cc4 	.word	0x20000cc4
 8006810:	20000c24 	.word	0x20000c24
 8006814:	08007220 	.word	0x08007220

08006818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3b04      	subs	r3, #4
 8006828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3b04      	subs	r3, #4
 8006836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f023 0201 	bic.w	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3b04      	subs	r3, #4
 8006846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006848:	4a0c      	ldr	r2, [pc, #48]	; (800687c <pxPortInitialiseStack+0x64>)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3b14      	subs	r3, #20
 8006852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3b04      	subs	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f06f 0202 	mvn.w	r2, #2
 8006866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3b20      	subs	r3, #32
 800686c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800686e:	68fb      	ldr	r3, [r7, #12]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	08006881 	.word	0x08006881

08006880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800688a:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <prvTaskExitError+0x54>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006892:	d00a      	beq.n	80068aa <prvTaskExitError+0x2a>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60fb      	str	r3, [r7, #12]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <prvTaskExitError+0x28>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	60bb      	str	r3, [r7, #8]
}
 80068bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068be:	bf00      	nop
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0fc      	beq.n	80068c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	2000000c 	.word	0x2000000c
	...

080068e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <pxCurrentTCBConst2>)
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	6808      	ldr	r0, [r1, #0]
 80068e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	f380 8809 	msr	PSP, r0
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8811 	msr	BASEPRI, r0
 80068fa:	4770      	bx	lr
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst2>:
 8006900:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006908:	4808      	ldr	r0, [pc, #32]	; (800692c <prvPortStartFirstTask+0x24>)
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	6800      	ldr	r0, [r0, #0]
 800690e:	f380 8808 	msr	MSP, r0
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8814 	msr	CONTROL, r0
 800691a:	b662      	cpsie	i
 800691c:	b661      	cpsie	f
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	df00      	svc	0
 8006928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800692a:	bf00      	nop
 800692c:	e000ed08 	.word	0xe000ed08

08006930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006936:	4b46      	ldr	r3, [pc, #280]	; (8006a50 <xPortStartScheduler+0x120>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a46      	ldr	r2, [pc, #280]	; (8006a54 <xPortStartScheduler+0x124>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10a      	bne.n	8006956 <xPortStartScheduler+0x26>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	613b      	str	r3, [r7, #16]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006956:	4b3e      	ldr	r3, [pc, #248]	; (8006a50 <xPortStartScheduler+0x120>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a3f      	ldr	r2, [pc, #252]	; (8006a58 <xPortStartScheduler+0x128>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d10a      	bne.n	8006976 <xPortStartScheduler+0x46>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	60fb      	str	r3, [r7, #12]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006976:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <xPortStartScheduler+0x12c>)
 8006978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006998:	b2da      	uxtb	r2, r3
 800699a:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <xPortStartScheduler+0x130>)
 800699c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800699e:	4b31      	ldr	r3, [pc, #196]	; (8006a64 <xPortStartScheduler+0x134>)
 80069a0:	2207      	movs	r2, #7
 80069a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069a4:	e009      	b.n	80069ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80069a6:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <xPortStartScheduler+0x134>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	4a2d      	ldr	r2, [pc, #180]	; (8006a64 <xPortStartScheduler+0x134>)
 80069ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d0ef      	beq.n	80069a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069c6:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <xPortStartScheduler+0x134>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f1c3 0307 	rsb	r3, r3, #7
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d00a      	beq.n	80069e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60bb      	str	r3, [r7, #8]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069e8:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <xPortStartScheduler+0x134>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <xPortStartScheduler+0x134>)
 80069f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <xPortStartScheduler+0x134>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069fa:	4a1a      	ldr	r2, [pc, #104]	; (8006a64 <xPortStartScheduler+0x134>)
 80069fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a06:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <xPortStartScheduler+0x138>)
 8006a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a1e:	f000 f8dd 	bl	8006bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a22:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <xPortStartScheduler+0x13c>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a28:	f000 f8fc 	bl	8006c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <xPortStartScheduler+0x140>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <xPortStartScheduler+0x140>)
 8006a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a38:	f7ff ff66 	bl	8006908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a3c:	f7ff f888 	bl	8005b50 <vTaskSwitchContext>
	prvTaskExitError();
 8006a40:	f7ff ff1e 	bl	8006880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	e000ed00 	.word	0xe000ed00
 8006a54:	410fc271 	.word	0x410fc271
 8006a58:	410fc270 	.word	0x410fc270
 8006a5c:	e000e400 	.word	0xe000e400
 8006a60:	20000d14 	.word	0x20000d14
 8006a64:	20000d18 	.word	0x20000d18
 8006a68:	e000ed20 	.word	0xe000ed20
 8006a6c:	2000000c 	.word	0x2000000c
 8006a70:	e000ef34 	.word	0xe000ef34

08006a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	607b      	str	r3, [r7, #4]
}
 8006a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <vPortEnterCritical+0x58>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	4a0d      	ldr	r2, [pc, #52]	; (8006acc <vPortEnterCritical+0x58>)
 8006a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <vPortEnterCritical+0x58>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d10f      	bne.n	8006ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <vPortEnterCritical+0x5c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	603b      	str	r3, [r7, #0]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <vPortEnterCritical+0x4a>
	}
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	2000000c 	.word	0x2000000c
 8006ad0:	e000ed04 	.word	0xe000ed04

08006ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <vPortExitCritical+0x50>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <vPortExitCritical+0x24>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <vPortExitCritical+0x50>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <vPortExitCritical+0x50>)
 8006b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <vPortExitCritical+0x50>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <vPortExitCritical+0x42>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f383 8811 	msr	BASEPRI, r3
}
 8006b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2000000c 	.word	0x2000000c
	...

08006b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b30:	f3ef 8009 	mrs	r0, PSP
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <pxCurrentTCBConst>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f01e 0f10 	tst.w	lr, #16
 8006b40:	bf08      	it	eq
 8006b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b54:	f380 8811 	msr	BASEPRI, r0
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f7fe fff6 	bl	8005b50 <vTaskSwitchContext>
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f380 8811 	msr	BASEPRI, r0
 8006b6c:	bc09      	pop	{r0, r3}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b76:	f01e 0f10 	tst.w	lr, #16
 8006b7a:	bf08      	it	eq
 8006b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b80:	f380 8809 	msr	PSP, r0
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst>:
 8006b90:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bb2:	f7fe ff0f 	bl	80059d4 <xTaskIncrementTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <SysTick_Handler+0x40>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f383 8811 	msr	BASEPRI, r3
}
 8006bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be6:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <vPortSetupTimerInterrupt+0x38>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <vPortSetupTimerInterrupt+0x3c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <vPortSetupTimerInterrupt+0x40>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <vPortSetupTimerInterrupt+0x44>)
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006c00:	2207      	movs	r2, #7
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	e000e010 	.word	0xe000e010
 8006c14:	e000e018 	.word	0xe000e018
 8006c18:	20000000 	.word	0x20000000
 8006c1c:	10624dd3 	.word	0x10624dd3
 8006c20:	e000e014 	.word	0xe000e014

08006c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c34 <vPortEnableVFP+0x10>
 8006c28:	6801      	ldr	r1, [r0, #0]
 8006c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c2e:	6001      	str	r1, [r0, #0]
 8006c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c32:	bf00      	nop
 8006c34:	e000ed88 	.word	0xe000ed88

08006c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c3e:	f3ef 8305 	mrs	r3, IPSR
 8006c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d914      	bls.n	8006c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <vPortValidateInterruptPriority+0x70>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c54:	4b15      	ldr	r3, [pc, #84]	; (8006cac <vPortValidateInterruptPriority+0x74>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	7afa      	ldrb	r2, [r7, #11]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d20a      	bcs.n	8006c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <vPortValidateInterruptPriority+0x78>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <vPortValidateInterruptPriority+0x7c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d90a      	bls.n	8006c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	603b      	str	r3, [r7, #0]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <vPortValidateInterruptPriority+0x60>
	}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	e000e3f0 	.word	0xe000e3f0
 8006cac:	20000d14 	.word	0x20000d14
 8006cb0:	e000ed0c 	.word	0xe000ed0c
 8006cb4:	20000d18 	.word	0x20000d18

08006cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cc4:	f7fe fdca 	bl	800585c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cc8:	4b58      	ldr	r3, [pc, #352]	; (8006e2c <pvPortMalloc+0x174>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cd0:	f000 f910 	bl	8006ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cd4:	4b56      	ldr	r3, [pc, #344]	; (8006e30 <pvPortMalloc+0x178>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 808e 	bne.w	8006dfe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01d      	beq.n	8006d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ce8:	2208      	movs	r2, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	3308      	adds	r3, #8
 8006d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <pvPortMalloc+0x6c>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	617b      	str	r3, [r7, #20]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d069      	beq.n	8006dfe <pvPortMalloc+0x146>
 8006d2a:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <pvPortMalloc+0x17c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d864      	bhi.n	8006dfe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d34:	4b40      	ldr	r3, [pc, #256]	; (8006e38 <pvPortMalloc+0x180>)
 8006d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d38:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <pvPortMalloc+0x180>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d3e:	e004      	b.n	8006d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d903      	bls.n	8006d5c <pvPortMalloc+0xa4>
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f1      	bne.n	8006d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d5c:	4b33      	ldr	r3, [pc, #204]	; (8006e2c <pvPortMalloc+0x174>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d04b      	beq.n	8006dfe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	2308      	movs	r3, #8
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d91f      	bls.n	8006dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <pvPortMalloc+0xf8>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	613b      	str	r3, [r7, #16]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dc2:	69b8      	ldr	r0, [r7, #24]
 8006dc4:	f000 f8f8 	bl	8006fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <pvPortMalloc+0x17c>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <pvPortMalloc+0x17c>)
 8006dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dd6:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <pvPortMalloc+0x17c>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4b18      	ldr	r3, [pc, #96]	; (8006e3c <pvPortMalloc+0x184>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d203      	bcs.n	8006dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006de2:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <pvPortMalloc+0x17c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <pvPortMalloc+0x184>)
 8006de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <pvPortMalloc+0x178>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dfe:	f7fe fd3b 	bl	8005878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <pvPortMalloc+0x16a>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	60fb      	str	r3, [r7, #12]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <pvPortMalloc+0x168>
	return pvReturn;
 8006e22:	69fb      	ldr	r3, [r7, #28]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3728      	adds	r7, #40	; 0x28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20001d8c 	.word	0x20001d8c
 8006e30:	20001d98 	.word	0x20001d98
 8006e34:	20001d90 	.word	0x20001d90
 8006e38:	20001d84 	.word	0x20001d84
 8006e3c:	20001d94 	.word	0x20001d94

08006e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d048      	beq.n	8006ee4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e52:	2308      	movs	r3, #8
 8006e54:	425b      	negs	r3, r3
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	4b21      	ldr	r3, [pc, #132]	; (8006eec <vPortFree+0xac>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <vPortFree+0x44>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60fb      	str	r3, [r7, #12]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <vPortFree+0x62>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	60bb      	str	r3, [r7, #8]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <vPortFree+0xac>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d019      	beq.n	8006ee4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d115      	bne.n	8006ee4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <vPortFree+0xac>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ec8:	f7fe fcc8 	bl	800585c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <vPortFree+0xb0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4a06      	ldr	r2, [pc, #24]	; (8006ef0 <vPortFree+0xb0>)
 8006ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eda:	6938      	ldr	r0, [r7, #16]
 8006edc:	f000 f86c 	bl	8006fb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ee0:	f7fe fcca 	bl	8005878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ee4:	bf00      	nop
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20001d98 	.word	0x20001d98
 8006ef0:	20001d90 	.word	0x20001d90

08006ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006efa:	f241 0368 	movw	r3, #4200	; 0x1068
 8006efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f00:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <prvHeapInit+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3307      	adds	r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <prvHeapInit+0xac>)
 8006f24:	4413      	add	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f40:	2208      	movs	r2, #8
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0307 	bic.w	r3, r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <prvHeapInit+0xb8>)
 8006f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <prvHeapInit+0xbc>)
 8006f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <prvHeapInit+0xc0>)
 8006f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000d1c 	.word	0x20000d1c
 8006fa4:	20001d84 	.word	0x20001d84
 8006fa8:	20001d8c 	.word	0x20001d8c
 8006fac:	20001d94 	.word	0x20001d94
 8006fb0:	20001d90 	.word	0x20001d90
 8006fb4:	20001d98 	.word	0x20001d98

08006fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fc0:	4b28      	ldr	r3, [pc, #160]	; (8007064 <prvInsertBlockIntoFreeList+0xac>)
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e002      	b.n	8006fcc <prvInsertBlockIntoFreeList+0x14>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d8f7      	bhi.n	8006fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d108      	bne.n	8006ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d118      	bne.n	8007040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d00d      	beq.n	8007036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	441a      	add	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e008      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007036:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e003      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d002      	beq.n	8007056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20001d84 	.word	0x20001d84
 8007068:	20001d8c 	.word	0x20001d8c

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	; (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	; (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2600      	movs	r6, #0
 8007078:	42a6      	cmp	r6, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4d0b      	ldr	r5, [pc, #44]	; (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	; (80070b0 <__libc_init_array+0x44>)
 8007080:	f000 f8b2 	bl	80071e8 <_init>
 8007084:	1b64      	subs	r4, r4, r5
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2600      	movs	r6, #0
 800708a:	42a6      	cmp	r6, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f855 3b04 	ldr.w	r3, [r5], #4
 8007094:	4798      	blx	r3
 8007096:	3601      	adds	r6, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f855 3b04 	ldr.w	r3, [r5], #4
 800709e:	4798      	blx	r3
 80070a0:	3601      	adds	r6, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	080072e8 	.word	0x080072e8
 80070a8:	080072e8 	.word	0x080072e8
 80070ac:	080072e8 	.word	0x080072e8
 80070b0:	080072ec 	.word	0x080072ec

080070b4 <memcpy>:
 80070b4:	440a      	add	r2, r1
 80070b6:	4291      	cmp	r1, r2
 80070b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070bc:	d100      	bne.n	80070c0 <memcpy+0xc>
 80070be:	4770      	bx	lr
 80070c0:	b510      	push	{r4, lr}
 80070c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ca:	4291      	cmp	r1, r2
 80070cc:	d1f9      	bne.n	80070c2 <memcpy+0xe>
 80070ce:	bd10      	pop	{r4, pc}

080070d0 <memset>:
 80070d0:	4402      	add	r2, r0
 80070d2:	4603      	mov	r3, r0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d100      	bne.n	80070da <memset+0xa>
 80070d8:	4770      	bx	lr
 80070da:	f803 1b01 	strb.w	r1, [r3], #1
 80070de:	e7f9      	b.n	80070d4 <memset+0x4>

080070e0 <ceil>:
 80070e0:	ec51 0b10 	vmov	r0, r1, d0
 80070e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80070ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80070f0:	2e13      	cmp	r6, #19
 80070f2:	ee10 5a10 	vmov	r5, s0
 80070f6:	ee10 8a10 	vmov	r8, s0
 80070fa:	460c      	mov	r4, r1
 80070fc:	dc30      	bgt.n	8007160 <ceil+0x80>
 80070fe:	2e00      	cmp	r6, #0
 8007100:	da12      	bge.n	8007128 <ceil+0x48>
 8007102:	a335      	add	r3, pc, #212	; (adr r3, 80071d8 <ceil+0xf8>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f868 	bl	80001dc <__adddf3>
 800710c:	2200      	movs	r2, #0
 800710e:	2300      	movs	r3, #0
 8007110:	f7f9 fa98 	bl	8000644 <__aeabi_dcmpgt>
 8007114:	b128      	cbz	r0, 8007122 <ceil+0x42>
 8007116:	2c00      	cmp	r4, #0
 8007118:	db55      	blt.n	80071c6 <ceil+0xe6>
 800711a:	432c      	orrs	r4, r5
 800711c:	d057      	beq.n	80071ce <ceil+0xee>
 800711e:	4c30      	ldr	r4, [pc, #192]	; (80071e0 <ceil+0x100>)
 8007120:	2500      	movs	r5, #0
 8007122:	4621      	mov	r1, r4
 8007124:	4628      	mov	r0, r5
 8007126:	e025      	b.n	8007174 <ceil+0x94>
 8007128:	4f2e      	ldr	r7, [pc, #184]	; (80071e4 <ceil+0x104>)
 800712a:	4137      	asrs	r7, r6
 800712c:	ea01 0307 	and.w	r3, r1, r7
 8007130:	4303      	orrs	r3, r0
 8007132:	d01f      	beq.n	8007174 <ceil+0x94>
 8007134:	a328      	add	r3, pc, #160	; (adr r3, 80071d8 <ceil+0xf8>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f84f 	bl	80001dc <__adddf3>
 800713e:	2200      	movs	r2, #0
 8007140:	2300      	movs	r3, #0
 8007142:	f7f9 fa7f 	bl	8000644 <__aeabi_dcmpgt>
 8007146:	2800      	cmp	r0, #0
 8007148:	d0eb      	beq.n	8007122 <ceil+0x42>
 800714a:	2c00      	cmp	r4, #0
 800714c:	bfc2      	ittt	gt
 800714e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8007152:	fa43 f606 	asrgt.w	r6, r3, r6
 8007156:	19a4      	addgt	r4, r4, r6
 8007158:	ea24 0407 	bic.w	r4, r4, r7
 800715c:	2500      	movs	r5, #0
 800715e:	e7e0      	b.n	8007122 <ceil+0x42>
 8007160:	2e33      	cmp	r6, #51	; 0x33
 8007162:	dd0b      	ble.n	800717c <ceil+0x9c>
 8007164:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007168:	d104      	bne.n	8007174 <ceil+0x94>
 800716a:	ee10 2a10 	vmov	r2, s0
 800716e:	460b      	mov	r3, r1
 8007170:	f7f9 f834 	bl	80001dc <__adddf3>
 8007174:	ec41 0b10 	vmov	d0, r0, r1
 8007178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800717c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007180:	f04f 33ff 	mov.w	r3, #4294967295
 8007184:	fa23 f707 	lsr.w	r7, r3, r7
 8007188:	4207      	tst	r7, r0
 800718a:	d0f3      	beq.n	8007174 <ceil+0x94>
 800718c:	a312      	add	r3, pc, #72	; (adr r3, 80071d8 <ceil+0xf8>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f7f9 f823 	bl	80001dc <__adddf3>
 8007196:	2200      	movs	r2, #0
 8007198:	2300      	movs	r3, #0
 800719a:	f7f9 fa53 	bl	8000644 <__aeabi_dcmpgt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d0bf      	beq.n	8007122 <ceil+0x42>
 80071a2:	2c00      	cmp	r4, #0
 80071a4:	dd02      	ble.n	80071ac <ceil+0xcc>
 80071a6:	2e14      	cmp	r6, #20
 80071a8:	d103      	bne.n	80071b2 <ceil+0xd2>
 80071aa:	3401      	adds	r4, #1
 80071ac:	ea25 0507 	bic.w	r5, r5, r7
 80071b0:	e7b7      	b.n	8007122 <ceil+0x42>
 80071b2:	2301      	movs	r3, #1
 80071b4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80071b8:	fa03 f606 	lsl.w	r6, r3, r6
 80071bc:	4435      	add	r5, r6
 80071be:	4545      	cmp	r5, r8
 80071c0:	bf38      	it	cc
 80071c2:	18e4      	addcc	r4, r4, r3
 80071c4:	e7f2      	b.n	80071ac <ceil+0xcc>
 80071c6:	2500      	movs	r5, #0
 80071c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80071cc:	e7a9      	b.n	8007122 <ceil+0x42>
 80071ce:	4625      	mov	r5, r4
 80071d0:	e7a7      	b.n	8007122 <ceil+0x42>
 80071d2:	bf00      	nop
 80071d4:	f3af 8000 	nop.w
 80071d8:	8800759c 	.word	0x8800759c
 80071dc:	7e37e43c 	.word	0x7e37e43c
 80071e0:	3ff00000 	.word	0x3ff00000
 80071e4:	000fffff 	.word	0x000fffff

080071e8 <_init>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	bf00      	nop
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr

080071f4 <_fini>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr
