
Shiftcontroller2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009654  08009654  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009654  08009654  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009654  08009654  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800965c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002014  20000074  080096d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002088  080096d0  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faa9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9b  00000000  00000000  0003fb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  000439e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00045210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be9f  00000000  00000000  00046890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001929f  00000000  00000000  0006272f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bab0  00000000  00000000  0007b9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011747e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f34  00000000  00000000  001174d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093d0 	.word	0x080093d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080093d0 	.word	0x080093d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_d2iz>:
 80006f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000700:	d215      	bcs.n	800072e <__aeabi_d2iz+0x36>
 8000702:	d511      	bpl.n	8000728 <__aeabi_d2iz+0x30>
 8000704:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000708:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800070c:	d912      	bls.n	8000734 <__aeabi_d2iz+0x3c>
 800070e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000716:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800071a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800071e:	fa23 f002 	lsr.w	r0, r3, r2
 8000722:	bf18      	it	ne
 8000724:	4240      	negne	r0, r0
 8000726:	4770      	bx	lr
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000732:	d105      	bne.n	8000740 <__aeabi_d2iz+0x48>
 8000734:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000738:	bf08      	it	eq
 800073a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800073e:	4770      	bx	lr
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <Init_SBC>:
//Prints a message to UART1 for debugging


//Initializes SBC
void Init_SBC(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af02      	add	r7, sp, #8
	uint8_t txdata[2];
	uint8_t rxdata[2];

	//Force SBC in standby mode
	txdata[0] = (UJA_REG_MODECONTROL << 5) | (UJA_RO_RW << 4) | (UJA_MC_STBY << 2);
 800075e:	2320      	movs	r3, #32
 8000760:	713b      	strb	r3, [r7, #4]
	txdata[1] = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2110      	movs	r1, #16
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f002 f9e3 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 8000772:	463a      	mov	r2, r7
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2302      	movs	r3, #2
 800077c:	481e      	ldr	r0, [pc, #120]	; (80007f8 <Init_SBC+0xa0>)
 800077e:	f003 fc07 	bl	8003f90 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	2110      	movs	r1, #16
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f002 f9d5 	bl	8002b38 <HAL_GPIO_WritePin>

	//Setup WDG and Status register
	txdata[0] = WD_SETUP;
 800078e:	2306      	movs	r3, #6
 8000790:	713b      	strb	r3, [r7, #4]
	txdata[1] = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2110      	movs	r1, #16
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f002 f9cb 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 80007a2:	463a      	mov	r2, r7
 80007a4:	1d39      	adds	r1, r7, #4
 80007a6:	2364      	movs	r3, #100	; 0x64
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2302      	movs	r3, #2
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <Init_SBC+0xa0>)
 80007ae:	f003 fbef 	bl	8003f90 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2110      	movs	r1, #16
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f002 f9bd 	bl	8002b38 <HAL_GPIO_WritePin>

	//Set normal mode and enable CAN voltage
	txdata[0] = (UJA_REG_MODECONTROL << 5) | (UJA_RO_RW << 4) | (UJA_MC_V2ON << 2);
 80007be:	232c      	movs	r3, #44	; 0x2c
 80007c0:	713b      	strb	r3, [r7, #4]
	txdata[1] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f002 f9b3 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 80007d2:	463a      	mov	r2, r7
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2302      	movs	r3, #2
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <Init_SBC+0xa0>)
 80007de:	f003 fbd7 	bl	8003f90 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f002 f9a5 	bl	8002b38 <HAL_GPIO_WritePin>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20001eac 	.word	0x20001eac

080007fc <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b0bd      	sub	sp, #244	; 0xf4
 8000800:	af00      	add	r7, sp, #0
 8000802:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800080e:	fa93 f3a3 	rbit	r3, r3
 8000812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000816:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800081a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800081e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000822:	fa93 f3a3 	rbit	r3, r3
 8000826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800082a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800082e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000836:	fa93 f3a3 	rbit	r3, r3
 800083a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800083e:	4bc1      	ldr	r3, [pc, #772]	; (8000b44 <reset_cause_get+0x348>)
 8000840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000842:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000846:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800084a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800084e:	fa93 f3a3 	rbit	r3, r3
 8000852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800085a:	fab3 f383 	clz	r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	4013      	ands	r3, r2
 8000872:	2b00      	cmp	r3, #0
 8000874:	d003      	beq.n	800087e <reset_cause_get+0x82>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8000876:	2301      	movs	r3, #1
 8000878:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800087c:	e147      	b.n	8000b0e <reset_cause_get+0x312>
 800087e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800088a:	fa93 f3a3 	rbit	r3, r3
 800088e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800089a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800089e:	fa93 f3a3 	rbit	r3, r3
 80008a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80008a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80008ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80008b2:	fa93 f3a3 	rbit	r3, r3
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80008ba:	4ba2      	ldr	r3, [pc, #648]	; (8000b44 <reset_cause_get+0x348>)
 80008bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80008c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80008ca:	fa93 f3a3 	rbit	r3, r3
 80008ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80008d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 031f 	and.w	r3, r3, #31
 80008e6:	2101      	movs	r1, #1
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4013      	ands	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <reset_cause_get+0xfe>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80008f8:	e109      	b.n	8000b0e <reset_cause_get+0x312>
 80008fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000906:	fa93 f3a3 	rbit	r3, r3
 800090a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800090e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800091a:	fa93 f3a3 	rbit	r3, r3
 800091e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000922:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000926:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800092a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800092e:	fa93 f3a3 	rbit	r3, r3
 8000932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8000936:	4b83      	ldr	r3, [pc, #524]	; (8000b44 <reset_cause_get+0x348>)
 8000938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800093e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000946:	fa93 f3a3 	rbit	r3, r3
 800094a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return result;
 800094e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000952:	fab3 f383 	clz	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	2101      	movs	r1, #1
 8000964:	fa01 f303 	lsl.w	r3, r1, r3
 8000968:	4013      	ands	r3, r2
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <reset_cause_get+0x17a>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800096e:	2303      	movs	r3, #3
 8000970:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000974:	e0cb      	b.n	8000b0e <reset_cause_get+0x312>
 8000976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800097a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800098a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800098e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000996:	fa93 f3a3 	rbit	r3, r3
 800099a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800099c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80009a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009a4:	fa93 f3a3 	rbit	r3, r3
 80009a8:	677b      	str	r3, [r7, #116]	; 0x74
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 80009aa:	4b66      	ldr	r3, [pc, #408]	; (8000b44 <reset_cause_get+0x348>)
 80009ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009b2:	673b      	str	r3, [r7, #112]	; 0x70
 80009b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009b6:	fa93 f3a3 	rbit	r3, r3
 80009ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80009bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009be:	fab3 f383 	clz	r3, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <reset_cause_get+0x1e6>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 80009da:	2304      	movs	r3, #4
 80009dc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80009e0:	e095      	b.n	8000b0e <reset_cause_get+0x312>
 80009e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ea:	fa93 f3a3 	rbit	r3, r3
 80009ee:	667b      	str	r3, [r7, #100]	; 0x64
 80009f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009f4:	663b      	str	r3, [r7, #96]	; 0x60
 80009f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f8:	fa93 f3a3 	rbit	r3, r3
 80009fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a02:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a06:	fa93 f3a3 	rbit	r3, r3
 8000a0a:	657b      	str	r3, [r7, #84]	; 0x54
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <reset_cause_get+0x348>)
 8000a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a14:	653b      	str	r3, [r7, #80]	; 0x50
 8000a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a18:	fa93 f3a3 	rbit	r3, r3
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 031f 	and.w	r3, r3, #31
 8000a30:	2101      	movs	r1, #1
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <reset_cause_get+0x248>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000a42:	e064      	b.n	8000b0e <reset_cause_get+0x312>
 8000a44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a4c:	fa93 f3a3 	rbit	r3, r3
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
 8000a52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
 8000a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a5a:	fa93 f3a3 	rbit	r3, r3
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a68:	fa93 f3a3 	rbit	r3, r3
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <reset_cause_get+0x348>)
 8000a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
 8000a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 031f 	and.w	r3, r3, #31
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <reset_cause_get+0x2aa>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000aa4:	e033      	b.n	8000b0e <reset_cause_get+0x312>
 8000aa6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	fa93 f3a3 	rbit	r3, r3
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa93 f3a3 	rbit	r3, r3
 8000ace:	617b      	str	r3, [r7, #20]
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <reset_cause_get+0x348>)
 8000ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa93 f3a3 	rbit	r3, r3
 8000ae0:	60fb      	str	r3, [r7, #12]
  return result;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	fab3 f383 	clz	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	2101      	movs	r1, #1
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	4013      	ands	r3, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <reset_cause_get+0x30c>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 8000b00:	2307      	movs	r3, #7
 8000b02:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000b06:	e002      	b.n	8000b0e <reset_cause_get+0x312>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b12:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	fa93 f3a3 	rbit	r3, r3
 8000b1a:	607b      	str	r3, [r7, #4]
  return result;
 8000b1c:	687b      	ldr	r3, [r7, #4]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8000b1e:	fab3 f383 	clz	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <reset_cause_get+0x34c>)
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2301      	movs	r3, #1
 8000b30:	6013      	str	r3, [r2, #0]

    return reset_cause;
 8000b32:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	37f4      	adds	r7, #244	; 0xf4
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000
 8000b48:	10908120 	.word	0x10908120

08000b4c <reset_cause_get_name>:
///             from a reset cause type
/// @param[in]  reset_cause     The previously-obtained system reset cause
/// @return     A null-terminated ASCII name string describing the system
///             reset cause
const char * reset_cause_get_name(reset_cause_t reset_cause)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
    const char * reset_cause_name = "TBD";
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <reset_cause_get_name+0x7c>)
 8000b58:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	d82b      	bhi.n	8000bb8 <reset_cause_get_name+0x6c>
 8000b60:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <reset_cause_get_name+0x1c>)
 8000b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b66:	bf00      	nop
 8000b68:	08000b89 	.word	0x08000b89
 8000b6c:	08000b8f 	.word	0x08000b8f
 8000b70:	08000b95 	.word	0x08000b95
 8000b74:	08000b9b 	.word	0x08000b9b
 8000b78:	08000ba1 	.word	0x08000ba1
 8000b7c:	08000ba7 	.word	0x08000ba7
 8000b80:	08000bad 	.word	0x08000bad
 8000b84:	08000bb3 	.word	0x08000bb3
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <reset_cause_get_name+0x80>)
 8000b8a:	60fb      	str	r3, [r7, #12]
            break;
 8000b8c:	e014      	b.n	8000bb8 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <reset_cause_get_name+0x84>)
 8000b90:	60fb      	str	r3, [r7, #12]
            break;
 8000b92:	e011      	b.n	8000bb8 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <reset_cause_get_name+0x88>)
 8000b96:	60fb      	str	r3, [r7, #12]
            break;
 8000b98:	e00e      	b.n	8000bb8 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <reset_cause_get_name+0x8c>)
 8000b9c:	60fb      	str	r3, [r7, #12]
            break;
 8000b9e:	e00b      	b.n	8000bb8 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <reset_cause_get_name+0x90>)
 8000ba2:	60fb      	str	r3, [r7, #12]
            break;
 8000ba4:	e008      	b.n	8000bb8 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <reset_cause_get_name+0x94>)
 8000ba8:	60fb      	str	r3, [r7, #12]
            break;
 8000baa:	e005      	b.n	8000bb8 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <reset_cause_get_name+0x98>)
 8000bae:	60fb      	str	r3, [r7, #12]
            break;
 8000bb0:	e002      	b.n	8000bb8 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <reset_cause_get_name+0x9c>)
 8000bb4:	60fb      	str	r3, [r7, #12]
            break;
 8000bb6:	bf00      	nop
    }

    return reset_cause_name;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	080093fc 	.word	0x080093fc
 8000bcc:	08009400 	.word	0x08009400
 8000bd0:	08009408 	.word	0x08009408
 8000bd4:	08009418 	.word	0x08009418
 8000bd8:	08009430 	.word	0x08009430
 8000bdc:	0800944c 	.word	0x0800944c
 8000be0:	0800945c 	.word	0x0800945c
 8000be4:	0800948c 	.word	0x0800948c
 8000be8:	080094a8 	.word	0x080094a8

08000bec <ConfigureCANFilters>:


//Procedurally generates and sets CAN Filter configurations from the message[] struct array config
void ConfigureCANFilters(struct message * messageArray, uint8_t size)
{
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	b096      	sub	sp, #88	; 0x58
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
 8000bf8:	466b      	mov	r3, sp
 8000bfa:	461d      	mov	r5, r3
	uint32_t configuredIDs[size];
 8000bfc:	78fc      	ldrb	r4, [r7, #3]
 8000bfe:	4623      	mov	r3, r4
 8000c00:	3b01      	subs	r3, #1
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
 8000c04:	b2e0      	uxtb	r0, r4
 8000c06:	f04f 0100 	mov.w	r1, #0
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	014b      	lsls	r3, r1, #5
 8000c14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c18:	0142      	lsls	r2, r0, #5
 8000c1a:	b2e0      	uxtb	r0, r4
 8000c1c:	f04f 0100 	mov.w	r1, #0
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	014b      	lsls	r3, r1, #5
 8000c2a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c2e:	0142      	lsls	r2, r0, #5
 8000c30:	4623      	mov	r3, r4
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	3307      	adds	r3, #7
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c3e:	466b      	mov	r3, sp
 8000c40:	3303      	adds	r3, #3
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
	int uniques = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < size; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8000c50:	e050      	b.n	8000cf4 <ConfigureCANFilters+0x108>
	{
		struct message thismessage = messageArray[i];
 8000c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		//Check if this ID already configured
		int create = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	657b      	str	r3, [r7, #84]	; 0x54
		for (int j = 0; j < size; j++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c6c:	e00b      	b.n	8000c86 <ConfigureCANFilters+0x9a>
		{
			if (configuredIDs[j] == thismessage.id)
 8000c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d101      	bne.n	8000c80 <ConfigureCANFilters+0x94>
			{
				create = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	657b      	str	r3, [r7, #84]	; 0x54
		for (int j = 0; j < size; j++)
 8000c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c82:	3301      	adds	r3, #1
 8000c84:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbef      	blt.n	8000c6e <ConfigureCANFilters+0x82>
			}
		}
		if (create == 1 && thismessage.enabled)
 8000c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d12c      	bne.n	8000cee <ConfigureCANFilters+0x102>
 8000c94:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d028      	beq.n	8000cee <ConfigureCANFilters+0x102>
		{
			//Add this ID to the list of already configured ID's to skip duplicates
			configuredIDs[uniques] = thismessage.id;
 8000c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			CAN_FilterTypeDef filter;

			//This bit shifting was a massive PITA to figure out... see page 1092 of the RM for reasoning
			filter.FilterIdHigh = ((thismessage.id << 5)  | (thismessage.id >> (32 - 5))) & 0xFFFF;
 8000ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	60bb      	str	r3, [r7, #8]
			filter.FilterIdLow = (thismessage.id >> (11 - 3)) & 0xFFF8;
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb2:	0a1a      	lsrs	r2, r3, #8
 8000cb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

			//Masks set to full rank to check every bit against ID
			filter.FilterMaskIdHigh = 0xFFFF;
 8000cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc0:	613b      	str	r3, [r7, #16]
			filter.FilterMaskIdLow = 0xFFFF;
 8000cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc6:	617b      	str	r3, [r7, #20]

			//Filter options
			filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
			filter.FilterActivation = ENABLE;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
			filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
			filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]

			//Set filter bank to the current count of uniques
			filter.FilterBank = uniques;
 8000cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cda:	61fb      	str	r3, [r7, #28]

			//Finally pass filter to HAL
			HAL_CAN_ConfigFilter(&hcan, &filter);
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4809      	ldr	r0, [pc, #36]	; (8000d08 <ConfigureCANFilters+0x11c>)
 8000ce4:	f001 f821 	bl	8001d2a <HAL_CAN_ConfigFilter>
			uniques++;
 8000ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cea:	3301      	adds	r3, #1
 8000cec:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < size; i++)
 8000cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbaa      	blt.n	8000c52 <ConfigureCANFilters+0x66>
 8000cfc:	46ad      	mov	sp, r5
		}
	}
}
 8000cfe:	bf00      	nop
 8000d00:	3758      	adds	r7, #88	; 0x58
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bdb0      	pop	{r4, r5, r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20001aa0 	.word	0x20001aa0

08000d0c <Init_CAN>:
		messageArray[i].value = -1;
	}
}

void Init_CAN(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	//Configure all receive filters from the config array
	ConfigureCANFilters(messageArray, sizeof(messageArray) / sizeof(struct message));
 8000d10:	2104      	movs	r1, #4
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <Init_CAN+0x2c>)
 8000d14:	f7ff ff6a 	bl	8000bec <ConfigureCANFilters>

	//Start CAN operation
	HAL_CAN_Start(&hcan);
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <Init_CAN+0x30>)
 8000d1a:	f001 f8d0 	bl	8001ebe <HAL_CAN_Start>

	//Enable Message Pending IRQ
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d1e:	2102      	movs	r1, #2
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <Init_CAN+0x30>)
 8000d22:	f001 fa22 	bl	800216a <HAL_CAN_ActivateNotification>

	//Start receiving - don't think we need this here
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data);
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <Init_CAN+0x34>)
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <Init_CAN+0x38>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <Init_CAN+0x30>)
 8000d2e:	f001 f90a 	bl	8001f46 <HAL_CAN_GetRxMessage>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001fa8 	.word	0x20001fa8
 8000d3c:	20001aa0 	.word	0x20001aa0
 8000d40:	20001fe8 	.word	0x20001fe8
 8000d44:	20001a04 	.word	0x20001a04

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fe97 	bl	8001a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f86d 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 f973 	bl	8001040 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d5a:	f000 f8cb 	bl	8000ef4 <MX_CAN_Init>
  MX_SPI1_Init();
 8000d5e:	f000 f901 	bl	8000f64 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d62:	f000 f93d 	bl	8000fe0 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d66:	f000 f8a8 	bl	8000eba <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f001 fee0 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 fed9 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2110      	movs	r1, #16
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f001 fed3 	bl	8002b38 <HAL_GPIO_WritePin>

	Init_SBC();
 8000d92:	f7ff fce1 	bl	8000758 <Init_SBC>


	//Load default message configuration
	//NOTE: This operation takes approximately 100ms!!!!!
	memcpy(&messageArray, &defaultMessageArray, sizeof(messageArray));
 8000d96:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <main+0xbc>)
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <main+0xc0>)
 8000d9a:	4614      	mov	r4, r2
 8000d9c:	461d      	mov	r5, r3
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Initialize CAN and all filters
	Init_CAN();
 8000db2:	f7ff ffab 	bl	8000d0c <Init_CAN>


  //Start receiving UART
	HAL_UART_Receive_IT(&huart2, uart_rec_buff, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	4914      	ldr	r1, [pc, #80]	; (8000e0c <main+0xc4>)
 8000dba:	4815      	ldr	r0, [pc, #84]	; (8000e10 <main+0xc8>)
 8000dbc:	f003 ffc4 	bl	8004d48 <HAL_UART_Receive_IT>

	reset_cause_t reset_cause = reset_cause_get();
 8000dc0:	f7ff fd1c 	bl	80007fc <reset_cause_get>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
	printf("The system reset cause is \"%s\"\n", reset_cause_get_name(reset_cause));
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff febe 	bl	8000b4c <reset_cause_get_name>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480f      	ldr	r0, [pc, #60]	; (8000e14 <main+0xcc>)
 8000dd6:	f007 fb21 	bl	800841c <iprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dda:	f004 fd93 	bl	8005904 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ShiftCar */
  ShiftCarHandle = osThreadNew(StartShiftCar, NULL, &ShiftCar_attributes);
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <main+0xd0>)
 8000de0:	2100      	movs	r1, #0
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <main+0xd4>)
 8000de4:	f004 fdf6 	bl	80059d4 <osThreadNew>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <main+0xd8>)
 8000dec:	6013      	str	r3, [r2, #0]

  /* creation of FeedWDG */
  FeedWDGHandle = osThreadNew(StartFeedWDG, NULL, &FeedWDG_attributes);
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <main+0xdc>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <main+0xe0>)
 8000df4:	f004 fdee 	bl	80059d4 <osThreadNew>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <main+0xe4>)
 8000dfc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dfe:	f004 fdb5 	bl	800596c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <main+0xba>
 8000e04:	20001fa8 	.word	0x20001fa8
 8000e08:	08009544 	.word	0x08009544
 8000e0c:	20001f90 	.word	0x20001f90
 8000e10:	20001f10 	.word	0x20001f10
 8000e14:	080094c0 	.word	0x080094c0
 8000e18:	080094fc 	.word	0x080094fc
 8000e1c:	08001335 	.word	0x08001335
 8000e20:	20001ff0 	.word	0x20001ff0
 8000e24:	08009520 	.word	0x08009520
 8000e28:	08001501 	.word	0x08001501
 8000e2c:	20001ea8 	.word	0x20001ea8

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2228      	movs	r2, #40	; 0x28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f007 fae4 	bl	800840c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000e6e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fe8f 	bl	8002b9c <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e84:	f000 fb7a 	bl	800157c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	230f      	movs	r3, #15
 8000e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fd82 	bl	80039ac <HAL_RCC_ClockConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eae:	f000 fb65 	bl	800157c <Error_Handler>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3740      	adds	r7, #64	; 0x40
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* CAN_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN_RX0_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2014      	movs	r0, #20
 8000ec4:	f001 fc5e 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ec8:	2014      	movs	r0, #20
 8000eca:	f001 fc77 	bl	80027bc <HAL_NVIC_EnableIRQ>
  /* CAN_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN_RX1_IRQn, 5, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	2015      	movs	r0, #21
 8000ed4:	f001 fc56 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000ed8:	2015      	movs	r0, #21
 8000eda:	f001 fc6f 	bl	80027bc <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	2026      	movs	r0, #38	; 0x26
 8000ee4:	f001 fc4e 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee8:	2026      	movs	r0, #38	; 0x26
 8000eea:	f001 fc67 	bl	80027bc <HAL_NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_CAN_Init+0x68>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <MX_CAN_Init+0x6c>)
 8000efc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f00:	2204      	movs	r2, #4
 8000f02:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f10:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f18:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f20:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_CAN_Init+0x68>)
 8000f48:	f000 fdf4 	bl	8001b34 <HAL_CAN_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000f52:	f000 fb13 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20001aa0 	.word	0x20001aa0
 8000f60:	40006400 	.word	0x40006400

08000f64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_SPI1_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000f9a:	2228      	movs	r2, #40	; 0x28
 8000f9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_SPI1_Init+0x74>)
 8000fc4:	f002 ff5a 	bl	8003e7c <HAL_SPI_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 fad5 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20001eac 	.word	0x20001eac
 8000fdc:	40013000 	.word	0x40013000

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <MX_USART2_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001024:	f003 fe42 	bl	8004cac <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f000 faa5 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20001f10 	.word	0x20001f10
 800103c:	40004400 	.word	0x40004400

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_GPIO_Init+0xbc>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <MX_GPIO_Init+0xbc>)
 800105c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_GPIO_Init+0xbc>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <MX_GPIO_Init+0xbc>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <MX_GPIO_Init+0xbc>)
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_GPIO_Init+0xbc>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_GPIO_Init+0xbc>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_GPIO_Init+0xbc>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6153      	str	r3, [r2, #20]
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_GPIO_Init+0xbc>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UJA_CS_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f001 fd46 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|INH1_Pin|INH2_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	21f0      	movs	r1, #240	; 0xf0
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <MX_GPIO_Init+0xc0>)
 80010b2:	f001 fd41 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UJA_CS_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = UJA_CS_Pin|LD2_Pin|LD1_Pin;
 80010b6:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f001 fbbf 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin INH1_Pin INH2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|INH1_Pin|INH2_Pin;
 80010d6:	23f0      	movs	r3, #240	; 0xf0
 80010d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_GPIO_Init+0xc0>)
 80010ee:	f001 fbb1 	bl	8002854 <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//IRQ's
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	//Check if enter or cmdbuff reaches its limit (prevents overflow)
	if (uart_rec_buff[0] == *(uint8_t *)"\r" || cmdcharbuffindex > 23)
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_UART_RxCpltCallback+0x9c>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_UART_RxCpltCallback+0xa0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d004      	beq.n	8001122 <HAL_UART_RxCpltCallback+0x1e>
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_UART_RxCpltCallback+0xa4>)
 800111a:	f993 3000 	ldrsb.w	r3, [r3]
 800111e:	2b17      	cmp	r3, #23
 8001120:	dd19      	ble.n	8001156 <HAL_UART_RxCpltCallback+0x52>
	{
		//Make sure theres more than just \r sent.
		if (cmdcharbuffindex != 0)
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_UART_RxCpltCallback+0xa4>)
 8001124:	f993 3000 	ldrsb.w	r3, [r3]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d030      	beq.n	800118e <HAL_UART_RxCpltCallback+0x8a>
		{
			//Increase command buffer index
			cmdbuffindex++;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_UART_RxCpltCallback+0xa8>)
 800112e:	f993 3000 	ldrsb.w	r3, [r3]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	3301      	adds	r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	b25a      	sxtb	r2, r3
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_UART_RxCpltCallback+0xa8>)
 800113c:	701a      	strb	r2, [r3, #0]

			//Limit number of commands to 16.
			if (cmdbuffindex > 16)
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_UART_RxCpltCallback+0xa8>)
 8001140:	f993 3000 	ldrsb.w	r3, [r3]
 8001144:	2b10      	cmp	r3, #16
 8001146:	dd02      	ble.n	800114e <HAL_UART_RxCpltCallback+0x4a>
			{
				cmdbuffindex = 16;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_UART_RxCpltCallback+0xa8>)
 800114a:	2210      	movs	r2, #16
 800114c:	701a      	strb	r2, [r3, #0]
			}
			//Pass command onto task

			//Reset char index
			cmdcharbuffindex = 0;
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_UART_RxCpltCallback+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
		if (cmdcharbuffindex != 0)
 8001154:	e01b      	b.n	800118e <HAL_UART_RxCpltCallback+0x8a>
		}
	}
	else
	{
		//Put received char into buffer
		cmdbuff[cmdbuffindex][cmdcharbuffindex] = uart_rec_buff[0];
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_RxCpltCallback+0xa8>)
 8001158:	f993 3000 	ldrsb.w	r3, [r3]
 800115c:	4619      	mov	r1, r3
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_UART_RxCpltCallback+0xa4>)
 8001160:	f993 3000 	ldrsb.w	r3, [r3]
 8001164:	461c      	mov	r4, r3
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_UART_RxCpltCallback+0x9c>)
 8001168:	7818      	ldrb	r0, [r3, #0]
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_UART_RxCpltCallback+0xac>)
 800116c:	460b      	mov	r3, r1
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	440b      	add	r3, r1
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	4423      	add	r3, r4
 8001178:	4602      	mov	r2, r0
 800117a:	701a      	strb	r2, [r3, #0]
		//Increase char index
		cmdcharbuffindex++;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_UART_RxCpltCallback+0xa4>)
 800117e:	f993 3000 	ldrsb.w	r3, [r3]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	b25a      	sxtb	r2, r3
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_UART_RxCpltCallback+0xa4>)
 800118c:	701a      	strb	r2, [r3, #0]
	}

	//Start receiving again
	HAL_UART_Receive_IT(huart, uart_rec_buff, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	4903      	ldr	r1, [pc, #12]	; (80011a0 <HAL_UART_RxCpltCallback+0x9c>)
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f003 fdd8 	bl	8004d48 <HAL_UART_Receive_IT>
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	20001f90 	.word	0x20001f90
 80011a4:	080094e0 	.word	0x080094e0
 80011a8:	20000090 	.word	0x20000090
 80011ac:	20000091 	.word	0x20000091
 80011b0:	20001cc8 	.word	0x20001cc8

080011b4 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	//Get the received message.
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data);
 80011bc:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80011be:	4a5b      	ldr	r2, [pc, #364]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80011c0:	2100      	movs	r1, #0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 febf 	bl	8001f46 <HAL_CAN_GetRxMessage>

	//Parse received bytes using message array
	for(int i=0; i < sizeof(messageArray) / sizeof(struct message); i++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011cc:	e0a2      	b.n	8001314 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
	{
		if(messageArray[i].id == can_rx_header.StdId)
 80011ce:	4a58      	ldr	r2, [pc, #352]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b54      	ldr	r3, [pc, #336]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8096 	bne.w	800130e <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
		{

			//Calculate which byte position to start at
			int bytepos = messageArray[i].bit / 8;
 80011e2:	4a53      	ldr	r2, [pc, #332]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	3304      	adds	r3, #4
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	617b      	str	r3, [r7, #20]

			//Calculate number of bytes that need to be checked
			int bytes = ceil(messageArray[i].length / (float)8);
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	3305      	adds	r3, #5
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800120c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001210:	ee16 0a90 	vmov	r0, s13
 8001214:	f7ff f990 	bl	8000538 <__aeabi_f2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	ec43 2b10 	vmov	d0, r2, r3
 8001220:	f008 f852 	bl	80092c8 <ceil>
 8001224:	ec53 2b10 	vmov	r2, r3, d0
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fa64 	bl	80006f8 <__aeabi_d2iz>
 8001230:	4603      	mov	r3, r0
 8001232:	613b      	str	r3, [r7, #16]

			uint32_t finalval = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
			int j = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24

			//Iterate through all bytes that must be read for this message
			for (int b = bytepos; b < bytepos + bytes; b++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	e058      	b.n	80012f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
			{
				uint8_t tempval;
				//If on last byte we may need to truncate unneeded parts dependent on length of data
				if (b == bytepos + bytes - 1)
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4413      	add	r3, r2
 8001248:	3b01      	subs	r3, #1
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	429a      	cmp	r2, r3
 800124e:	d12d      	bne.n	80012ac <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				{
					//We need a left shift and a right shift to extract the bits we want
					uint8_t byteoffset = (messageArray[i].length - ((bytes-1) * 8));
 8001250:	4a37      	ldr	r2, [pc, #220]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	3305      	adds	r3, #5
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	3b01      	subs	r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	73fb      	strb	r3, [r7, #15]
					uint8_t leftshift = 8 - (messageArray[i].bit - (bytepos * 8)) - byteoffset;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	b2da      	uxtb	r2, r3
 8001272:	492f      	ldr	r1, [pc, #188]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	440b      	add	r3, r1
 800127a:	3304      	adds	r3, #4
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	3308      	adds	r3, #8
 800128a:	73bb      	strb	r3, [r7, #14]
					uint8_t rightshift = 8 - byteoffset;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	f1c3 0308 	rsb	r3, r3, #8
 8001292:	737b      	strb	r3, [r7, #13]
					tempval = (can_rx_data[b] << leftshift) >>  rightshift;
 8001294:	4a24      	ldr	r2, [pc, #144]	; (8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	409a      	lsls	r2, r3
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	77fb      	strb	r3, [r7, #31]
 80012aa:	e004      	b.n	80012b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
				}
				else
				{
					//Use the whole byte
					tempval = can_rx_data[b];
 80012ac:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	77fb      	strb	r3, [r7, #31]
				}
				//Calculate the size of the next data section to find the required shift
				int nextsize = messageArray[i].length - ((j+1) * 8);
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	4413      	add	r3, r2
 80012be:	3305      	adds	r3, #5
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	3301      	adds	r3, #1
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	61bb      	str	r3, [r7, #24]

				//Limit it to 0
				if (nextsize < 0)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da01      	bge.n	80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
				{
					nextsize = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
				}
				finalval += tempval << nextsize;
 80012d8:	7ffa      	ldrb	r2, [r7, #31]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e4:	4413      	add	r3, r2
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
				j++;
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	3301      	adds	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
			for (int b = bytepos; b < bytepos + bytes; b++)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	3301      	adds	r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4413      	add	r3, r2
 80012fa:	6a3a      	ldr	r2, [r7, #32]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dba0      	blt.n	8001242 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
			}

			//Finally set final value into message array struct
			messageArray[i].value = finalval;
 8001300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001302:	490b      	ldr	r1, [pc, #44]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	601a      	str	r2, [r3, #0]
	for(int i=0; i < sizeof(messageArray) / sizeof(struct message); i++)
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3301      	adds	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	2b03      	cmp	r3, #3
 8001318:	f67f af59 	bls.w	80011ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
		}
	}
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3730      	adds	r7, #48	; 0x30
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20001fe8 	.word	0x20001fe8
 800132c:	20001a04 	.word	0x20001a04
 8001330:	20001fa8 	.word	0x20001fa8

08001334 <StartShiftCar>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartShiftCar */
void StartShiftCar(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int shiftvalue=0;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if (messageArray[0].value==64001 && messageArray[1].value == 1 && messageArray[2].value == 1 && shiftvalue==0)
 8001340:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <StartShiftCar+0x1c4>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f64f 2201 	movw	r2, #64001	; 0xfa01
 8001348:	4293      	cmp	r3, r2
 800134a:	d137      	bne.n	80013bc <StartShiftCar+0x88>
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <StartShiftCar+0x1c4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d133      	bne.n	80013bc <StartShiftCar+0x88>
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <StartShiftCar+0x1c4>)
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	2b01      	cmp	r3, #1
 800135a:	d12f      	bne.n	80013bc <StartShiftCar+0x88>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12c      	bne.n	80013bc <StartShiftCar+0x88>
    {
    	HAL_GPIO_WritePin(INH1_GPIO_Port, INH1_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2140      	movs	r1, #64	; 0x40
 8001366:	4865      	ldr	r0, [pc, #404]	; (80014fc <StartShiftCar+0x1c8>)
 8001368:	f001 fbe6 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	4862      	ldr	r0, [pc, #392]	; (80014fc <StartShiftCar+0x1c8>)
 8001372:	f001 fbe1 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	4860      	ldr	r0, [pc, #384]	; (80014fc <StartShiftCar+0x1c8>)
 800137c:	f001 fbdc 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2120      	movs	r1, #32
 8001384:	485d      	ldr	r0, [pc, #372]	; (80014fc <StartShiftCar+0x1c8>)
 8001386:	f001 fbd7 	bl	8002b38 <HAL_GPIO_WritePin>

    	HAL_Delay(30);
 800138a:	201e      	movs	r0, #30
 800138c:	f000 fbae 	bl	8001aec <HAL_Delay>

    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2140      	movs	r1, #64	; 0x40
 8001394:	4859      	ldr	r0, [pc, #356]	; (80014fc <StartShiftCar+0x1c8>)
 8001396:	f001 fbcf 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	4857      	ldr	r0, [pc, #348]	; (80014fc <StartShiftCar+0x1c8>)
 80013a0:	f001 fbca 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2110      	movs	r1, #16
 80013a8:	4854      	ldr	r0, [pc, #336]	; (80014fc <StartShiftCar+0x1c8>)
 80013aa:	f001 fbc5 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	4852      	ldr	r0, [pc, #328]	; (80014fc <StartShiftCar+0x1c8>)
 80013b4:	f001 fbc0 	bl	8002b38 <HAL_GPIO_WritePin>
    	shiftvalue=1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
    }

    if (messageArray[0].value == 1 && messageArray[1].value ==64001 && messageArray[2].value == 1 && messageArray[3].value<=10500 && shiftvalue==0)
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <StartShiftCar+0x1c4>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d13f      	bne.n	8001444 <StartShiftCar+0x110>
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <StartShiftCar+0x1c4>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f64f 2201 	movw	r2, #64001	; 0xfa01
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d139      	bne.n	8001444 <StartShiftCar+0x110>
 80013d0:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <StartShiftCar+0x1c4>)
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d135      	bne.n	8001444 <StartShiftCar+0x110>
 80013d8:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <StartShiftCar+0x1c4>)
 80013da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013dc:	f642 1204 	movw	r2, #10500	; 0x2904
 80013e0:	4293      	cmp	r3, r2
 80013e2:	dc2f      	bgt.n	8001444 <StartShiftCar+0x110>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d12c      	bne.n	8001444 <StartShiftCar+0x110>
    {
    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	4843      	ldr	r0, [pc, #268]	; (80014fc <StartShiftCar+0x1c8>)
 80013f0:	f001 fba2 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4840      	ldr	r0, [pc, #256]	; (80014fc <StartShiftCar+0x1c8>)
 80013fa:	f001 fb9d 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2110      	movs	r1, #16
 8001402:	483e      	ldr	r0, [pc, #248]	; (80014fc <StartShiftCar+0x1c8>)
 8001404:	f001 fb98 	bl	8002b38 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2120      	movs	r1, #32
 800140c:	483b      	ldr	r0, [pc, #236]	; (80014fc <StartShiftCar+0x1c8>)
 800140e:	f001 fb93 	bl	8002b38 <HAL_GPIO_WritePin>

    	HAL_Delay(30);
 8001412:	201e      	movs	r0, #30
 8001414:	f000 fb6a 	bl	8001aec <HAL_Delay>

    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2140      	movs	r1, #64	; 0x40
 800141c:	4837      	ldr	r0, [pc, #220]	; (80014fc <StartShiftCar+0x1c8>)
 800141e:	f001 fb8b 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	4835      	ldr	r0, [pc, #212]	; (80014fc <StartShiftCar+0x1c8>)
 8001428:	f001 fb86 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2110      	movs	r1, #16
 8001430:	4832      	ldr	r0, [pc, #200]	; (80014fc <StartShiftCar+0x1c8>)
 8001432:	f001 fb81 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	4830      	ldr	r0, [pc, #192]	; (80014fc <StartShiftCar+0x1c8>)
 800143c:	f001 fb7c 	bl	8002b38 <HAL_GPIO_WritePin>
    	shiftvalue=2;
 8001440:	2302      	movs	r3, #2
 8001442:	60fb      	str	r3, [r7, #12]
    }

    if (messageArray[0].value ==1 && messageArray[1].value == 1 && messageArray[2].value == 64001 && messageArray[3].value<=7000 && shiftvalue==0)
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <StartShiftCar+0x1c4>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d13f      	bne.n	80014cc <StartShiftCar+0x198>
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <StartShiftCar+0x1c4>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d13b      	bne.n	80014cc <StartShiftCar+0x198>
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <StartShiftCar+0x1c4>)
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f64f 2201 	movw	r2, #64001	; 0xfa01
 800145c:	4293      	cmp	r3, r2
 800145e:	d135      	bne.n	80014cc <StartShiftCar+0x198>
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <StartShiftCar+0x1c4>)
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001468:	4293      	cmp	r3, r2
 800146a:	dc2f      	bgt.n	80014cc <StartShiftCar+0x198>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d12c      	bne.n	80014cc <StartShiftCar+0x198>
    {
    	HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2140      	movs	r1, #64	; 0x40
 8001476:	4821      	ldr	r0, [pc, #132]	; (80014fc <StartShiftCar+0x1c8>)
 8001478:	f001 fb5e 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	481e      	ldr	r0, [pc, #120]	; (80014fc <StartShiftCar+0x1c8>)
 8001482:	f001 fb59 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2110      	movs	r1, #16
 800148a:	481c      	ldr	r0, [pc, #112]	; (80014fc <StartShiftCar+0x1c8>)
 800148c:	f001 fb54 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2120      	movs	r1, #32
 8001494:	4819      	ldr	r0, [pc, #100]	; (80014fc <StartShiftCar+0x1c8>)
 8001496:	f001 fb4f 	bl	8002b38 <HAL_GPIO_WritePin>

		HAL_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f000 fb26 	bl	8001aec <HAL_Delay>

		HAL_GPIO_WritePin (INH1_GPIO_Port, INH1_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4815      	ldr	r0, [pc, #84]	; (80014fc <StartShiftCar+0x1c8>)
 80014a6:	f001 fb47 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (INH2_GPIO_Port, INH2_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	4813      	ldr	r0, [pc, #76]	; (80014fc <StartShiftCar+0x1c8>)
 80014b0:	f001 fb42 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2110      	movs	r1, #16
 80014b8:	4810      	ldr	r0, [pc, #64]	; (80014fc <StartShiftCar+0x1c8>)
 80014ba:	f001 fb3d 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2120      	movs	r1, #32
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <StartShiftCar+0x1c8>)
 80014c4:	f001 fb38 	bl	8002b38 <HAL_GPIO_WritePin>
    	shiftvalue=3;
 80014c8:	2303      	movs	r3, #3
 80014ca:	60fb      	str	r3, [r7, #12]
    }

    if (messageArray[0].value ==1 && messageArray[1].value == 1 && messageArray[2].value == 1 && shiftvalue!=0)
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <StartShiftCar+0x1c4>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f47f af35 	bne.w	8001340 <StartShiftCar+0xc>
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <StartShiftCar+0x1c4>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	f47f af30 	bne.w	8001340 <StartShiftCar+0xc>
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <StartShiftCar+0x1c4>)
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f47f af2b 	bne.w	8001340 <StartShiftCar+0xc>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f43f af27 	beq.w	8001340 <StartShiftCar+0xc>
    {
    	shiftvalue=0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
    if (messageArray[0].value==64001 && messageArray[1].value == 1 && messageArray[2].value == 1 && shiftvalue==0)
 80014f6:	e723      	b.n	8001340 <StartShiftCar+0xc>
 80014f8:	20001fa8 	.word	0x20001fa8
 80014fc:	48000400 	.word	0x48000400

08001500 <StartFeedWDG>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFeedWDG */
void StartFeedWDG(void *argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af02      	add	r7, sp, #8
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFeedWDG */
  /* Infinite loop */
  for(;;)
  {
  	//600 milliseconds is in the lower end of the watchdog window as currently configured in the SBC.
  	osDelay(600);
 8001508:	f44f 7016 	mov.w	r0, #600	; 0x258
 800150c:	f004 fb0c 	bl	8005b28 <osDelay>
    uint8_t rxdata[2];
    uint8_t txdata[2];

    txdata[0] = WD_SETUP;
 8001510:	2306      	movs	r3, #6
 8001512:	723b      	strb	r3, [r7, #8]
		txdata[1] = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	727b      	strb	r3, [r7, #9]

		HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f001 fb0a 	bl	8002b38 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, txdata, rxdata, 2, 100);
 8001524:	f107 020c 	add.w	r2, r7, #12
 8001528:	f107 0108 	add.w	r1, r7, #8
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <StartFeedWDG+0x54>)
 8001534:	f002 fd2c 	bl	8003f90 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(UJA_CS_GPIO_Port, UJA_CS_Pin, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2110      	movs	r1, #16
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f001 fafa 	bl	8002b38 <HAL_GPIO_WritePin>

		//Toggle LED
		HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f001 fb0c 	bl	8002b68 <HAL_GPIO_TogglePin>
  {
 8001550:	e7da      	b.n	8001508 <StartFeedWDG+0x8>
 8001552:	bf00      	nop
 8001554:	20001eac 	.word	0x20001eac

08001558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156a:	f000 fa9f 	bl	8001aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40012c00 	.word	0x40012c00

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_MspInit+0x4c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_MspInit+0x4c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	210f      	movs	r1, #15
 80015c6:	f06f 0001 	mvn.w	r0, #1
 80015ca:	f001 f8db 	bl	8002784 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_CAN_MspInit+0x80>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d129      	bne.n	8001652 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_CAN_MspInit+0x84>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_CAN_MspInit+0x84>)
 8001604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_CAN_MspInit+0x84>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_CAN_MspInit+0x84>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_CAN_MspInit+0x84>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	6153      	str	r3, [r2, #20]
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_CAN_MspInit+0x84>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800162e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001640:	2309      	movs	r3, #9
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f001 f901 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40006400 	.word	0x40006400
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_SPI_MspInit+0x8c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d130      	bne.n	80016e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_SPI_MspInit+0x90>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_SPI_MspInit+0x90>)
 800168c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_SPI_MspInit+0x90>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_SPI_MspInit+0x90>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <HAL_SPI_MspInit+0x90>)
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	6153      	str	r3, [r2, #20]
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_SPI_MspInit+0x90>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016b6:	23e0      	movs	r3, #224	; 0xe0
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c6:	2305      	movs	r3, #5
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f001 f8be 	bl	8002854 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2105      	movs	r1, #5
 80016dc:	2023      	movs	r0, #35	; 0x23
 80016de:	f001 f851 	bl	8002784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016e2:	2023      	movs	r0, #35	; 0x23
 80016e4:	f001 f86a 	bl	80027bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40013000 	.word	0x40013000
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_UART_MspInit+0x7c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d128      	bne.n	800176c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_UART_MspInit+0x80>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_UART_MspInit+0x80>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_UART_MspInit+0x80>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_UART_MspInit+0x80>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_UART_MspInit+0x80>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6153      	str	r3, [r2, #20]
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_UART_MspInit+0x80>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174a:	230c      	movs	r3, #12
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175a:	2307      	movs	r3, #7
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f001 f874 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40004400 	.word	0x40004400
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2019      	movs	r0, #25
 8001792:	f000 fff7 	bl	8002784 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001796:	2019      	movs	r0, #25
 8001798:	f001 f810 	bl	80027bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_InitTick+0x9c>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_InitTick+0x9c>)
 80017a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_InitTick+0x9c>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b4:	f107 0210 	add.w	r2, r7, #16
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 fb2a 	bl	8003e18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017c4:	f002 fb06 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 80017c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	4a13      	ldr	r2, [pc, #76]	; (800181c <HAL_InitTick+0xa0>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9b      	lsrs	r3, r3, #18
 80017d4:	3b01      	subs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_InitTick+0xa4>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_InitTick+0xa8>)
 80017dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_InitTick+0xa4>)
 80017e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_InitTick+0xa4>)
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_InitTick+0xa4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_InitTick+0xa4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <HAL_InitTick+0xa4>)
 80017fa:	f003 f819 	bl	8004830 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d104      	bne.n	800180e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001804:	4806      	ldr	r0, [pc, #24]	; (8001820 <HAL_InitTick+0xa4>)
 8001806:	f003 f849 	bl	800489c <HAL_TIM_Base_Start_IT>
 800180a:	4603      	mov	r3, r0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	431bde83 	.word	0x431bde83
 8001820:	20001ff4 	.word	0x20001ff4
 8001824:	40012c00 	.word	0x40012c00

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <CAN_RX0_IRQHandler+0x10>)
 800185a:	f000 fcac 	bl	80021b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20001aa0 	.word	0x20001aa0

08001868 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <CAN_RX1_IRQHandler+0x10>)
 800186e:	f000 fca2 	bl	80021b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20001aa0 	.word	0x20001aa0

0800187c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001882:	f003 f835 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20001ff4 	.word	0x20001ff4

08001890 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <SPI1_IRQHandler+0x10>)
 8001896:	f002 fd8f 	bl	80043b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20001eac 	.word	0x20001eac

080018a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART2_IRQHandler+0x10>)
 80018aa:	f003 faef 	bl	8004e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20001f10 	.word	0x20001f10

080018b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ca:	f3af 8000 	nop.w
 80018ce:	4601      	mov	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
	}

return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
	}
	return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:

int _close(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	605a      	str	r2, [r3, #4]
	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_isatty>:

int _isatty(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	return 1;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f006 fcea 	bl	800839c <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20003000 	.word	0x20003000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	20000094 	.word	0x20000094
 80019fc:	20002088 	.word	0x20002088

08001a00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <SystemInit+0x28>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <SystemInit+0x28>)
 8001a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SystemInit+0x28>)
 8001a16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a32:	e003      	b.n	8001a3c <LoopCopyDataInit>

08001a34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a3a:	3104      	adds	r1, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a3c:	480b      	ldr	r0, [pc, #44]	; (8001a6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a44:	d3f6      	bcc.n	8001a34 <CopyDataInit>
	ldr	r2, =_sbss
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a48:	e002      	b.n	8001a50 <LoopFillZerobss>

08001a4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a4c:	f842 3b04 	str.w	r3, [r2], #4

08001a50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <LoopForever+0x16>)
	cmp	r2, r3
 8001a52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a54:	d3f9      	bcc.n	8001a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a56:	f7ff ffd3 	bl	8001a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f006 fca5 	bl	80083a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a5e:	f7ff f973 	bl	8000d48 <main>

08001a62 <LoopForever>:

LoopForever:
    b LoopForever
 8001a62:	e7fe      	b.n	8001a62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a64:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001a68:	0800965c 	.word	0x0800965c
	ldr	r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a70:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001a74:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001a78:	20002088 	.word	0x20002088

08001a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC1_2_IRQHandler>
	...

08001a80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_Init+0x28>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_Init+0x28>)
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 fe6c 	bl	800276e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fe70 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9c:	f7ff fd76 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40022000 	.word	0x40022000

08001aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20002034 	.word	0x20002034

08001ad4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20002034 	.word	0x20002034

08001aec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008

08001b34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0ed      	b.n	8001d22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fd42 	bl	80015dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0202 	bic.w	r2, r2, #2
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7ff ffb4 	bl	8001ad4 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b6e:	e012      	b.n	8001b96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b70:	f7ff ffb0 	bl	8001ad4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d90b      	bls.n	8001b96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0c5      	b.n	8001d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e5      	bne.n	8001b70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb4:	f7ff ff8e 	bl	8001ad4 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bba:	e012      	b.n	8001be2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bbc:	f7ff ff8a 	bl	8001ad4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b0a      	cmp	r3, #10
 8001bc8:	d90b      	bls.n	8001be2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2205      	movs	r2, #5
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e09f      	b.n	8001d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0e5      	beq.n	8001bbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7e1b      	ldrb	r3, [r3, #24]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d108      	bne.n	8001c0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e007      	b.n	8001c1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7e5b      	ldrb	r3, [r3, #25]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e007      	b.n	8001c44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7e9b      	ldrb	r3, [r3, #26]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d108      	bne.n	8001c5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0220 	orr.w	r2, r2, #32
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e007      	b.n	8001c6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0220 	bic.w	r2, r2, #32
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7edb      	ldrb	r3, [r3, #27]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d108      	bne.n	8001c88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0210 	bic.w	r2, r2, #16
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e007      	b.n	8001c98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0210 	orr.w	r2, r2, #16
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7f1b      	ldrb	r3, [r3, #28]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0208 	bic.w	r2, r2, #8
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7f5b      	ldrb	r3, [r3, #29]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d108      	bne.n	8001cdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0204 	orr.w	r2, r2, #4
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e007      	b.n	8001cec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	ea42 0103 	orr.w	r1, r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d40:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d003      	beq.n	8001d50 <HAL_CAN_ConfigFilter+0x26>
 8001d48:	7cfb      	ldrb	r3, [r7, #19]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	f040 80aa 	bne.w	8001ea4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2201      	movs	r2, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d123      	bne.n	8001dd2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	401a      	ands	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3248      	adds	r2, #72	; 0x48
 8001db2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dc8:	6979      	ldr	r1, [r7, #20]
 8001dca:	3348      	adds	r3, #72	; 0x48
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d122      	bne.n	8001e20 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3248      	adds	r2, #72	; 0x48
 8001e00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e16:	6979      	ldr	r1, [r7, #20]
 8001e18:	3348      	adds	r3, #72	; 0x48
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e3a:	e007      	b.n	8001e4c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e66:	e007      	b.n	8001e78 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e96:	f023 0201 	bic.w	r2, r3, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e006      	b.n	8001eb2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d12e      	bne.n	8001f30 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eea:	f7ff fdf3 	bl	8001ad4 <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ef0:	e012      	b.n	8001f18 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef2:	f7ff fdef 	bl	8001ad4 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b0a      	cmp	r3, #10
 8001efe:	d90b      	bls.n	8001f18 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2205      	movs	r2, #5
 8001f10:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e012      	b.n	8001f3e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1e5      	bne.n	8001ef2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e006      	b.n	8001f3e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
  }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f46:	b480      	push	{r7}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d003      	beq.n	8001f6a <HAL_CAN_GetRxMessage+0x24>
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	f040 80f3 	bne.w	8002150 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10e      	bne.n	8001f8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0e7      	b.n	800215e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0d8      	b.n	800215e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	331b      	adds	r3, #27
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0204 	and.w	r2, r3, #4
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	331b      	adds	r3, #27
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0d5b      	lsrs	r3, r3, #21
 8001fda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	331b      	adds	r3, #27
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	4413      	add	r3, r2
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	331b      	adds	r3, #27
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0202 	and.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	331b      	adds	r3, #27
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 020f 	and.w	r2, r3, #15
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	331b      	adds	r3, #27
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4413      	add	r3, r2
 8002036:	3304      	adds	r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	331b      	adds	r3, #27
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	b29a      	uxth	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0a1a      	lsrs	r2, r3, #8
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4413      	add	r3, r2
 8002094:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0c1a      	lsrs	r2, r3, #16
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	3302      	adds	r3, #2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e1a      	lsrs	r2, r3, #24
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3303      	adds	r3, #3
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	3304      	adds	r3, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0a1a      	lsrs	r2, r3, #8
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3305      	adds	r3, #5
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0c1a      	lsrs	r2, r3, #16
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	3306      	adds	r3, #6
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0e1a      	lsrs	r2, r3, #24
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3307      	adds	r3, #7
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0220 	orr.w	r2, r2, #32
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e007      	b.n	800214c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e006      	b.n	800215e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d002      	beq.n	8002188 <HAL_CAN_ActivateNotification+0x1e>
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d109      	bne.n	800219c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6959      	ldr	r1, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e006      	b.n	80021aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b08a      	sub	sp, #40	; 0x28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d07c      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f983 	bl	8002524 <HAL_CAN_TxMailbox0CompleteCallback>
 800221e:	e016      	b.n	800224e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	e00c      	b.n	800224e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e002      	b.n	800224e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f989 	bl	8002560 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d024      	beq.n	80022a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002260:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f963 	bl	8002538 <HAL_CAN_TxMailbox1CompleteCallback>
 8002272:	e016      	b.n	80022a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	e00c      	b.n	80022a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e002      	b.n	80022a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f969 	bl	8002574 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d024      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f943 	bl	800254c <HAL_CAN_TxMailbox2CompleteCallback>
 80022c6:	e016      	b.n	80022f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	e00c      	b.n	80022f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	e002      	b.n	80022f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f949 	bl	8002588 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00c      	beq.n	800231a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2210      	movs	r2, #16
 8002318:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2208      	movs	r2, #8
 8002334:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f930 	bl	800259c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe ff2d 	bl	80011b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002374:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2210      	movs	r2, #16
 800237c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2208      	movs	r2, #8
 8002398:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f912 	bl	80025c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f8f9 	bl	80025b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8fc 	bl	80025d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2208      	movs	r2, #8
 80023fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8f5 	bl	80025ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07b      	beq.n	8002504 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d072      	beq.n	80024fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d043      	beq.n	80024fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03e      	beq.n	80024fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d02b      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x32a>
 8002488:	2b60      	cmp	r3, #96	; 0x60
 800248a:	d82e      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d022      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x320>
 8002490:	2b50      	cmp	r3, #80	; 0x50
 8002492:	d82a      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d019      	beq.n	80024cc <HAL_CAN_IRQHandler+0x316>
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d826      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d010      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x30c>
 80024a0:	2b30      	cmp	r3, #48	; 0x30
 80024a2:	d822      	bhi.n	80024ea <HAL_CAN_IRQHandler+0x334>
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d002      	beq.n	80024ae <HAL_CAN_IRQHandler+0x2f8>
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d005      	beq.n	80024b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024ac:	e01d      	b.n	80024ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	f043 0308 	orr.w	r3, r3, #8
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b6:	e019      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024c0:	e014      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024ca:	e00f      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024d4:	e00a      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024de:	e005      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024e8:	e000      	b.n	80024ec <HAL_CAN_IRQHandler+0x336>
            break;
 80024ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2204      	movs	r2, #4
 8002502:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f872 	bl	8002600 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	; (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	; (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff4c 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002796:	f7ff ff61 	bl	800265c <__NVIC_GetPriorityGrouping>
 800279a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	6978      	ldr	r0, [r7, #20]
 80027a2:	f7ff ffb1 	bl	8002708 <NVIC_EncodePriority>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff80 	bl	80026b4 <__NVIC_SetPriority>
}
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff54 	bl	8002678 <__NVIC_EnableIRQ>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d005      	beq.n	80027fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2204      	movs	r2, #4
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e027      	b.n	800284a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 020e 	bic.w	r2, r2, #14
 8002808:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
    } 
  }
  return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e14e      	b.n	8002b02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8140 	beq.w	8002afc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d00b      	beq.n	800289c <HAL_GPIO_Init+0x48>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d007      	beq.n	800289c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002890:	2b11      	cmp	r3, #17
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b12      	cmp	r3, #18
 800289a:	d130      	bne.n	80028fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d2:	2201      	movs	r2, #1
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 0201 	and.w	r2, r3, #1
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0xea>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b12      	cmp	r3, #18
 800293c:	d123      	bne.n	8002986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 809a 	beq.w	8002afc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c8:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <HAL_GPIO_Init+0x2cc>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a54      	ldr	r2, [pc, #336]	; (8002b20 <HAL_GPIO_Init+0x2cc>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <HAL_GPIO_Init+0x2cc>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029e0:	4a50      	ldr	r2, [pc, #320]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a0a:	d013      	beq.n	8002a34 <HAL_GPIO_Init+0x1e0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <HAL_GPIO_Init+0x2d4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00d      	beq.n	8002a30 <HAL_GPIO_Init+0x1dc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_GPIO_Init+0x2d8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <HAL_GPIO_Init+0x1d8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a44      	ldr	r2, [pc, #272]	; (8002b30 <HAL_GPIO_Init+0x2dc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_GPIO_Init+0x1d4>
 8002a24:	2303      	movs	r3, #3
 8002a26:	e006      	b.n	8002a36 <HAL_GPIO_Init+0x1e2>
 8002a28:	2305      	movs	r3, #5
 8002a2a:	e004      	b.n	8002a36 <HAL_GPIO_Init+0x1e2>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e002      	b.n	8002a36 <HAL_GPIO_Init+0x1e2>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_GPIO_Init+0x1e2>
 8002a34:	2300      	movs	r3, #0
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	f002 0203 	and.w	r2, r2, #3
 8002a3c:	0092      	lsls	r2, r2, #2
 8002a3e:	4093      	lsls	r3, r2
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a46:	4937      	ldr	r1, [pc, #220]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a78:	4a2e      	ldr	r2, [pc, #184]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aa2:	4a24      	ldr	r2, [pc, #144]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002af6:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f aea9 	bne.w	8002864 <HAL_GPIO_Init+0x10>
  }
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	48000400 	.word	0x48000400
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	48000c00 	.word	0x48000c00
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43d9      	mvns	r1, r3
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	400b      	ands	r3, r1
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f000 bef4 	b.w	800399e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 816a 	beq.w	8002e9a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bc6:	4bb3      	ldr	r3, [pc, #716]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d00c      	beq.n	8002bec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd2:	4bb0      	ldr	r3, [pc, #704]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d159      	bne.n	8002c92 <HAL_RCC_OscConfig+0xf6>
 8002bde:	4bad      	ldr	r3, [pc, #692]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d152      	bne.n	8002c92 <HAL_RCC_OscConfig+0xf6>
 8002bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8002c00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_RCC_OscConfig+0x82>
 8002c18:	4b9e      	ldr	r3, [pc, #632]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0xae>
 8002c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c46:	4b93      	ldr	r3, [pc, #588]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c56:	fa92 f2a2 	rbit	r2, r2
 8002c5a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c5e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f002 021f 	and.w	r2, r2, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 810c 	beq.w	8002e98 <HAL_RCC_OscConfig+0x2fc>
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 8106 	bne.w	8002e98 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f000 be86 	b.w	800399e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x110>
 8002c9e:	4b7d      	ldr	r3, [pc, #500]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7c      	ldr	r2, [pc, #496]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e030      	b.n	8002d0e <HAL_RCC_OscConfig+0x172>
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x134>
 8002cb6:	4b77      	ldr	r3, [pc, #476]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a76      	ldr	r2, [pc, #472]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b74      	ldr	r3, [pc, #464]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a73      	ldr	r2, [pc, #460]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e01e      	b.n	8002d0e <HAL_RCC_OscConfig+0x172>
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cda:	d10c      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x15a>
 8002cdc:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6c      	ldr	r2, [pc, #432]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a69      	ldr	r2, [pc, #420]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e00b      	b.n	8002d0e <HAL_RCC_OscConfig+0x172>
 8002cf6:	4b67      	ldr	r3, [pc, #412]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a66      	ldr	r2, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a63      	ldr	r2, [pc, #396]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	f023 020f 	bic.w	r2, r3, #15
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	495d      	ldr	r1, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d059      	beq.n	8002de0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fed2 	bl	8001ad4 <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d36:	f7fe fecd 	bl	8001ad4 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d902      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	f000 be29 	b.w	800399e <HAL_RCC_OscConfig+0xe02>
 8002d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d102      	bne.n	8002d7e <HAL_RCC_OscConfig+0x1e2>
 8002d78:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x20e>
 8002d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d9a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002db2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002db6:	fa92 f2a2 	rbit	r2, r2
 8002dba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002dbe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ab      	beq.n	8002d36 <HAL_RCC_OscConfig+0x19a>
 8002dde:	e05c      	b.n	8002e9a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fe78 	bl	8001ad4 <HAL_GetTick>
 8002de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dea:	f7fe fe73 	bl	8001ad4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d902      	bls.n	8002e00 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	f000 bdcf 	b.w	800399e <HAL_RCC_OscConfig+0xe02>
 8002e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_OscConfig+0x296>
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x2c2>
 8002e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e4e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_RCC_OscConfig+0x2f8>)
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e72:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e76:	fab2 f282 	clz	r2, r2
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f042 0220 	orr.w	r2, r2, #32
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	f002 021f 	and.w	r2, r2, #31
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ab      	bne.n	8002dea <HAL_RCC_OscConfig+0x24e>
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_OscConfig+0x2fe>
 8002e94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 816f 	beq.w	8003188 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002eaa:	4bd0      	ldr	r3, [pc, #832]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002eb6:	4bcd      	ldr	r3, [pc, #820]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d16c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x400>
 8002ec2:	4bca      	ldr	r3, [pc, #808]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d166      	bne.n	8002f9c <HAL_RCC_OscConfig+0x400>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ee0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_OscConfig+0x362>
 8002ef8:	4bbc      	ldr	r3, [pc, #752]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	e013      	b.n	8002f26 <HAL_RCC_OscConfig+0x38a>
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f10:	2302      	movs	r3, #2
 8002f12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f22:	4bb2      	ldr	r3, [pc, #712]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2202      	movs	r2, #2
 8002f28:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f30:	fa92 f2a2 	rbit	r2, r2
 8002f34:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f38:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f000 bd1b 	b.w	800399e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4ba0      	ldr	r3, [pc, #640]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	21f8      	movs	r1, #248	; 0xf8
 8002f78:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f80:	fa91 f1a1 	rbit	r1, r1
 8002f84:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f88:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f8c:	fab1 f181 	clz	r1, r1
 8002f90:	b2c9      	uxtb	r1, r1
 8002f92:	408b      	lsls	r3, r1
 8002f94:	4995      	ldr	r1, [pc, #596]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e0f5      	b.n	8003188 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8085 	beq.w	80030b2 <HAL_RCC_OscConfig+0x516>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fd7e 	bl	8001ad4 <HAL_GetTick>
 8002fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fe fd79 	bl	8001ad4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	f000 bcd5 	b.w	800399e <HAL_RCC_OscConfig+0xe02>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003006:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_RCC_OscConfig+0x488>
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	e013      	b.n	800304c <HAL_RCC_OscConfig+0x4b0>
 8003024:	2302      	movs	r3, #2
 8003026:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003036:	2302      	movs	r3, #2
 8003038:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800303c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003048:	4b68      	ldr	r3, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2202      	movs	r2, #2
 800304e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003052:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003056:	fa92 f2a2 	rbit	r2, r2
 800305a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800305e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003062:	fab2 f282 	clz	r2, r2
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f042 0220 	orr.w	r2, r2, #32
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f002 021f 	and.w	r2, r2, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f202 	lsl.w	r2, r1, r2
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0af      	beq.n	8002fde <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	21f8      	movs	r1, #248	; 0xf8
 800308e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003096:	fa91 f1a1 	rbit	r1, r1
 800309a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800309e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030a2:	fab1 f181 	clz	r1, r1
 80030a6:	b2c9      	uxtb	r1, r1
 80030a8:	408b      	lsls	r3, r1
 80030aa:	4950      	ldr	r1, [pc, #320]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
 80030b0:	e06a      	b.n	8003188 <HAL_RCC_OscConfig+0x5ec>
 80030b2:	2301      	movs	r3, #1
 80030b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	461a      	mov	r2, r3
 80030da:	2300      	movs	r3, #0
 80030dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fcf9 	bl	8001ad4 <HAL_GetTick>
 80030e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fcf4 	bl	8001ad4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	f000 bc50 	b.w	800399e <HAL_RCC_OscConfig+0xe02>
 80030fe:	2302      	movs	r3, #2
 8003100:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_RCC_OscConfig+0x592>
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	e013      	b.n	8003156 <HAL_RCC_OscConfig+0x5ba>
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003140:	2302      	movs	r3, #2
 8003142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003152:	4b26      	ldr	r3, [pc, #152]	; (80031ec <HAL_RCC_OscConfig+0x650>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2202      	movs	r2, #2
 8003158:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800315c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003168:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f002 021f 	and.w	r2, r2, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1af      	bne.n	80030e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80da 	beq.w	800334c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d069      	beq.n	8003276 <HAL_RCC_OscConfig+0x6da>
 80031a2:	2301      	movs	r3, #1
 80031a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x654>)
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	461a      	mov	r2, r3
 80031c8:	2301      	movs	r3, #1
 80031ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031cc:	f7fe fc82 	bl	8001ad4 <HAL_GetTick>
 80031d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d4:	e00e      	b.n	80031f4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fe fc7d 	bl	8001ad4 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d906      	bls.n	80031f4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e3d9      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	10908120 	.word	0x10908120
 80031f4:	2302      	movs	r3, #2
 80031f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003206:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003222:	2202      	movs	r2, #2
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	4ba5      	ldr	r3, [pc, #660]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800323e:	2102      	movs	r1, #2
 8003240:	6019      	str	r1, [r3, #0]
 8003242:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f1a3 	rbit	r1, r3
 800324c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003250:	6019      	str	r1, [r3, #0]
  return result;
 8003252:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0b0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x63a>
 8003274:	e06a      	b.n	800334c <HAL_RCC_OscConfig+0x7b0>
 8003276:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800328c:	601a      	str	r2, [r3, #0]
  return result;
 800328e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003292:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	4b8c      	ldr	r3, [pc, #560]	; (80034d0 <HAL_RCC_OscConfig+0x934>)
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	461a      	mov	r2, r3
 80032a4:	2300      	movs	r3, #0
 80032a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7fe fc14 	bl	8001ad4 <HAL_GetTick>
 80032ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	e009      	b.n	80032c6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe fc0f 	bl	8001ad4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e36b      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
 80032c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032ca:	2202      	movs	r2, #2
 80032cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032fa:	2202      	movs	r2, #2
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800330c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330e:	4b6f      	ldr	r3, [pc, #444]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003312:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003316:	2102      	movs	r1, #2
 8003318:	6019      	str	r1, [r3, #0]
 800331a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f1a3 	rbit	r1, r3
 8003324:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003328:	6019      	str	r1, [r3, #0]
  return result;
 800332a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1b2      	bne.n	80032b2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8158 	beq.w	800360c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003362:	4b5a      	ldr	r3, [pc, #360]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d112      	bne.n	8003394 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a56      	ldr	r2, [pc, #344]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <HAL_RCC_OscConfig+0x938>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11a      	bne.n	80033d6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a0:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_RCC_OscConfig+0x938>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_RCC_OscConfig+0x938>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ac:	f7fe fb92 	bl	8001ad4 <HAL_GetTick>
 80033b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e009      	b.n	80033ca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fe fb8d 	bl	8001ad4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e2e9      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <HAL_RCC_OscConfig+0x938>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ef      	beq.n	80033b6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x852>
 80033e0:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4a39      	ldr	r2, [pc, #228]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6213      	str	r3, [r2, #32]
 80033ec:	e02f      	b.n	800344e <HAL_RCC_OscConfig+0x8b2>
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10c      	bne.n	8003412 <HAL_RCC_OscConfig+0x876>
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4a33      	ldr	r2, [pc, #204]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6213      	str	r3, [r2, #32]
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4a30      	ldr	r2, [pc, #192]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6213      	str	r3, [r2, #32]
 8003410:	e01d      	b.n	800344e <HAL_RCC_OscConfig+0x8b2>
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0x89a>
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6213      	str	r3, [r2, #32]
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6213      	str	r3, [r2, #32]
 8003434:	e00b      	b.n	800344e <HAL_RCC_OscConfig+0x8b2>
 8003436:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a24      	ldr	r2, [pc, #144]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a21      	ldr	r2, [pc, #132]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d06b      	beq.n	8003530 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003458:	f7fe fb3c 	bl	8001ad4 <HAL_GetTick>
 800345c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe fb37 	bl	8001ad4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e291      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
 800347a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800347e:	2202      	movs	r2, #2
 8003480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f2a3 	rbit	r2, r3
 800348c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003496:	2202      	movs	r2, #2
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	fa93 f2a3 	rbit	r2, r3
 80034a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034a8:	601a      	str	r2, [r3, #0]
  return result;
 80034aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d109      	bne.n	80034d8 <HAL_RCC_OscConfig+0x93c>
 80034c4:	4b01      	ldr	r3, [pc, #4]	; (80034cc <HAL_RCC_OscConfig+0x930>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	e014      	b.n	80034f4 <HAL_RCC_OscConfig+0x958>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	10908120 	.word	0x10908120
 80034d4:	40007000 	.word	0x40007000
 80034d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034dc:	2202      	movs	r2, #2
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4bbb      	ldr	r3, [pc, #748]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034f8:	2102      	movs	r1, #2
 80034fa:	6011      	str	r1, [r2, #0]
 80034fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	fa92 f1a2 	rbit	r1, r2
 8003506:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800350a:	6011      	str	r1, [r2, #0]
  return result;
 800350c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	fab2 f282 	clz	r2, r2
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f002 021f 	and.w	r2, r2, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d099      	beq.n	8003462 <HAL_RCC_OscConfig+0x8c6>
 800352e:	e063      	b.n	80035f8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003530:	f7fe fad0 	bl	8001ad4 <HAL_GetTick>
 8003534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	e00b      	b.n	8003552 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe facb 	bl	8001ad4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e225      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
 8003552:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003556:	2202      	movs	r2, #2
 8003558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800356e:	2202      	movs	r2, #2
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003580:	601a      	str	r2, [r3, #0]
  return result;
 8003582:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003586:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d102      	bne.n	80035a2 <HAL_RCC_OscConfig+0xa06>
 800359c:	4b90      	ldr	r3, [pc, #576]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	e00d      	b.n	80035be <HAL_RCC_OscConfig+0xa22>
 80035a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035a6:	2202      	movs	r2, #2
 80035a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	4b89      	ldr	r3, [pc, #548]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035c2:	2102      	movs	r1, #2
 80035c4:	6011      	str	r1, [r2, #0]
 80035c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	fa92 f1a2 	rbit	r1, r2
 80035d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035d4:	6011      	str	r1, [r2, #0]
  return result;
 80035d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	fab2 f282 	clz	r2, r2
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	f002 021f 	and.w	r2, r2, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f202 	lsl.w	r2, r1, r2
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1a0      	bne.n	800353a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4a76      	ldr	r2, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 81c2 	beq.w	800399c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003618:	4b71      	ldr	r3, [pc, #452]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	f000 819c 	beq.w	800395e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b02      	cmp	r3, #2
 800362e:	f040 8114 	bne.w	800385a <HAL_RCC_OscConfig+0xcbe>
 8003632:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003636:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800363a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800364a:	601a      	str	r2, [r3, #0]
  return result;
 800364c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003650:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800365c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	461a      	mov	r2, r3
 8003664:	2300      	movs	r3, #0
 8003666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe fa34 	bl	8001ad4 <HAL_GetTick>
 800366c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003670:	e009      	b.n	8003686 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fa2f 	bl	8001ad4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e18b      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
 8003686:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800368a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800369e:	601a      	str	r2, [r3, #0]
  return result;
 80036a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HAL_RCC_OscConfig+0xb24>
 80036ba:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e01b      	b.n	80036f8 <HAL_RCC_OscConfig+0xb5c>
 80036c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fa93 f2a3 	rbit	r2, r3
 80036ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	fa92 f1a2 	rbit	r1, r2
 800370c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003710:	6011      	str	r1, [r2, #0]
  return result;
 8003712:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d19e      	bne.n	8003672 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	430b      	orrs	r3, r1
 800374a:	4925      	ldr	r1, [pc, #148]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
 8003750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003768:	601a      	str	r2, [r3, #0]
  return result;
 800376a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800376e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800377a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	461a      	mov	r2, r3
 8003782:	2301      	movs	r3, #1
 8003784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe f9a5 	bl	8001ad4 <HAL_GetTick>
 800378a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800378e:	e009      	b.n	80037a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe f9a0 	bl	8001ad4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0fc      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
 80037a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	fa93 f2a3 	rbit	r2, r3
 80037b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037bc:	601a      	str	r2, [r3, #0]
  return result;
 80037be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <HAL_RCC_OscConfig+0xc48>
 80037d8:	4b01      	ldr	r3, [pc, #4]	; (80037e0 <HAL_RCC_OscConfig+0xc44>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	e01e      	b.n	800381c <HAL_RCC_OscConfig+0xc80>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f2a3 	rbit	r2, r3
 80037f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	fa93 f2a3 	rbit	r2, r3
 8003812:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_OscConfig+0xe0c>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003820:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003824:	6011      	str	r1, [r2, #0]
 8003826:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	fa92 f1a2 	rbit	r1, r2
 8003830:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003834:	6011      	str	r1, [r2, #0]
  return result;
 8003836:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	fab2 f282 	clz	r2, r2
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f042 0220 	orr.w	r2, r2, #32
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	f002 021f 	and.w	r2, r2, #31
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f202 	lsl.w	r2, r1, r2
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d09b      	beq.n	8003790 <HAL_RCC_OscConfig+0xbf4>
 8003858:	e0a0      	b.n	800399c <HAL_RCC_OscConfig+0xe00>
 800385a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800385e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	fa93 f2a3 	rbit	r2, r3
 800386e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003872:	601a      	str	r2, [r3, #0]
  return result;
 8003874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003878:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	461a      	mov	r2, r3
 800388c:	2300      	movs	r3, #0
 800388e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe f920 	bl	8001ad4 <HAL_GetTick>
 8003894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003898:	e009      	b.n	80038ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389a:	f7fe f91b 	bl	8001ad4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e077      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
 80038ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c6:	601a      	str	r2, [r3, #0]
  return result;
 80038c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_RCC_OscConfig+0xd4c>
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0xe0c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e01b      	b.n	8003920 <HAL_RCC_OscConfig+0xd84>
 80038e8:	f107 0320 	add.w	r3, r7, #32
 80038ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f107 0320 	add.w	r3, r7, #32
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	fa93 f2a3 	rbit	r2, r3
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f107 0318 	add.w	r3, r7, #24
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	fa93 f2a3 	rbit	r2, r3
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_OscConfig+0xe0c>)
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	f107 0210 	add.w	r2, r7, #16
 8003924:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003928:	6011      	str	r1, [r2, #0]
 800392a:	f107 0210 	add.w	r2, r7, #16
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	fa92 f1a2 	rbit	r1, r2
 8003934:	f107 020c 	add.w	r2, r7, #12
 8003938:	6011      	str	r1, [r2, #0]
  return result;
 800393a:	f107 020c 	add.w	r2, r7, #12
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f042 0220 	orr.w	r2, r2, #32
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f002 021f 	and.w	r2, r2, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f202 	lsl.w	r2, r1, r2
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d19e      	bne.n	800389a <HAL_RCC_OscConfig+0xcfe>
 800395c:	e01e      	b.n	800399c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e018      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <HAL_RCC_OscConfig+0xe0c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003974:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	429a      	cmp	r2, r3
 8003984:	d108      	bne.n	8003998 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003986:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800398a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000

080039ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b09e      	sub	sp, #120	; 0x78
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e162      	b.n	8003c8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b90      	ldr	r3, [pc, #576]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d910      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b8d      	ldr	r3, [pc, #564]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	498b      	ldr	r1, [pc, #556]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b89      	ldr	r3, [pc, #548]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e14a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	497f      	ldr	r1, [pc, #508]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80dc 	beq.w	8003bd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d13c      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xf6>
 8003a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xa6>
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	e00f      	b.n	8003a72 <HAL_RCC_ClockConfig+0xc6>
 8003a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a64:	663b      	str	r3, [r7, #96]	; 0x60
 8003a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a6e:	4b67      	ldr	r3, [pc, #412]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a76:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a7a:	fa92 f2a2 	rbit	r2, r2
 8003a7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a82:	fab2 f282 	clz	r2, r2
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f042 0220 	orr.w	r2, r2, #32
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f002 021f 	and.w	r2, r2, #31
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d17b      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0f3      	b.n	8003c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d13c      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x178>
 8003aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d102      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x128>
 8003ace:	4b4f      	ldr	r3, [pc, #316]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCC_ClockConfig+0x148>
 8003ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003adc:	fa93 f3a3 	rbit	r3, r3
 8003ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af0:	4b46      	ldr	r3, [pc, #280]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003afc:	fa92 f2a2 	rbit	r2, r2
 8003b00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b04:	fab2 f282 	clz	r2, r2
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	f042 0220 	orr.w	r2, r2, #32
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	f002 021f 	and.w	r2, r2, #31
 8003b14:	2101      	movs	r1, #1
 8003b16:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d13a      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0b2      	b.n	8003c8a <HAL_RCC_ClockConfig+0x2de>
 8003b24:	2302      	movs	r3, #2
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d102      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x1a0>
 8003b46:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	e00d      	b.n	8003b68 <HAL_RCC_ClockConfig+0x1bc>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	2302      	movs	r3, #2
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2202      	movs	r2, #2
 8003b6a:	61ba      	str	r2, [r7, #24]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	fa92 f2a2 	rbit	r2, r2
 8003b72:	617a      	str	r2, [r7, #20]
  return result;
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	fab2 f282 	clz	r2, r2
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	f042 0220 	orr.w	r2, r2, #32
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	f002 021f 	and.w	r2, r2, #31
 8003b86:	2101      	movs	r1, #1
 8003b88:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e079      	b.n	8003c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f023 0203 	bic.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	491a      	ldr	r1, [pc, #104]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba8:	f7fd ff94 	bl	8001ad4 <HAL_GetTick>
 8003bac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb0:	f7fd ff90 	bl	8001ad4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e061      	b.n	8003c8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 020c 	and.w	r2, r3, #12
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d1eb      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d214      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 0207 	bic.w	r2, r3, #7
 8003bee:	4906      	ldr	r1, [pc, #24]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <HAL_RCC_ClockConfig+0x25c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e040      	b.n	8003c8a <HAL_RCC_ClockConfig+0x2de>
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	491a      	ldr	r1, [pc, #104]	; (8003c94 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <HAL_RCC_ClockConfig+0x2e8>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4912      	ldr	r1, [pc, #72]	; (8003c94 <HAL_RCC_ClockConfig+0x2e8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c4e:	f000 f829 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003c52:	4601      	mov	r1, r0
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_RCC_ClockConfig+0x2e8>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5c:	22f0      	movs	r2, #240	; 0xf0
 8003c5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	fa92 f2a2 	rbit	r2, r2
 8003c66:	60fa      	str	r2, [r7, #12]
  return result;
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	fab2 f282 	clz	r2, r2
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	40d3      	lsrs	r3, r2
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x2ec>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	fa21 f303 	lsr.w	r3, r1, r3
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <HAL_RCC_ClockConfig+0x2f0>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_RCC_ClockConfig+0x2f4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fd7a 	bl	800177c <HAL_InitTick>
  
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3778      	adds	r7, #120	; 0x78
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	08009584 	.word	0x08009584
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	20000004 	.word	0x20000004

08003ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b08b      	sub	sp, #44	; 0x2c
 8003ca8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cbe:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d002      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x36>
 8003cd2:	e03c      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cd4:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cd6:	623b      	str	r3, [r7, #32]
      break;
 8003cd8:	e03c      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ce0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ce4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	fa92 f2a2 	rbit	r2, r2
 8003cec:	607a      	str	r2, [r7, #4]
  return result;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	fab2 f282 	clz	r2, r2
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	40d3      	lsrs	r3, r2
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	220f      	movs	r2, #15
 8003d08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	fa92 f2a2 	rbit	r2, r2
 8003d10:	60fa      	str	r2, [r7, #12]
  return result;
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	40d3      	lsrs	r3, r2
 8003d1c:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3c:	e004      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	623b      	str	r3, [r7, #32]
      break;
 8003d4c:	e002      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d50:	623b      	str	r3, [r7, #32]
      break;
 8003d52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d54:	6a3b      	ldr	r3, [r7, #32]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	372c      	adds	r7, #44	; 0x2c
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	0800959c 	.word	0x0800959c
 8003d70:	080095ac 	.word	0x080095ac
 8003d74:	003d0900 	.word	0x003d0900

08003d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000000 	.word	0x20000000

08003d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d96:	f7ff ffef 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003da4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003da8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	fa92 f2a2 	rbit	r2, r2
 8003db0:	603a      	str	r2, [r7, #0]
  return result;
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	fab2 f282 	clz	r2, r2
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	40d3      	lsrs	r3, r2
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08009594 	.word	0x08009594

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dda:	f7ff ffcd 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003dde:	4601      	mov	r1, r0
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003de8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003dec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	fa92 f2a2 	rbit	r2, r2
 8003df4:	603a      	str	r2, [r7, #0]
  return result;
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	fab2 f282 	clz	r2, r2
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	40d3      	lsrs	r3, r2
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	08009594 	.word	0x08009594

08003e18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	220f      	movs	r2, #15
 8003e26:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <HAL_RCC_GetClockConfig+0x5c>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_RCC_GetClockConfig+0x5c>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	08db      	lsrs	r3, r3, #3
 8003e52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_RCC_GetClockConfig+0x60>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0207 	and.w	r2, r3, #7
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40022000 	.word	0x40022000

08003e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07c      	b.n	8003f88 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fd fbdb 	bl	8001664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ece:	d902      	bls.n	8003ed6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ee4:	d007      	beq.n	8003ef6 <HAL_SPI_Init+0x7a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eee:	d002      	beq.n	8003ef6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f06:	d903      	bls.n	8003f10 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f0e:	e002      	b.n	8003f16 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0204 	and.w	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	ea42 0103 	orr.w	r1, r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x26>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e1fb      	b.n	80043ae <HAL_SPI_TransmitReceive+0x41e>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fbe:	f7fd fd89 	bl	8001ad4 <HAL_GetTick>
 8003fc2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fda:	7efb      	ldrb	r3, [r7, #27]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d00e      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x6e>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe6:	d106      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x66>
 8003ff0:	7efb      	ldrb	r3, [r7, #27]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ffc:	e1cd      	b.n	800439a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x80>
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004016:	e1c0      	b.n	800439a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b04      	cmp	r3, #4
 8004022:	d003      	beq.n	800402c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2205      	movs	r2, #5
 8004028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800406e:	d802      	bhi.n	8004076 <HAL_SPI_TransmitReceive+0xe6>
 8004070:	8a3b      	ldrh	r3, [r7, #16]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d908      	bls.n	8004088 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e007      	b.n	8004098 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004096:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d007      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040be:	d97c      	bls.n	80041ba <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_SPI_TransmitReceive+0x13e>
 80040c8:	8a7b      	ldrh	r3, [r7, #18]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d169      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	881a      	ldrh	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	1c9a      	adds	r2, r3, #2
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f2:	e056      	b.n	80041a2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d11b      	bne.n	800413a <HAL_SPI_TransmitReceive+0x1aa>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d016      	beq.n	800413a <HAL_SPI_TransmitReceive+0x1aa>
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2b01      	cmp	r3, #1
 8004110:	d113      	bne.n	800413a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	881a      	ldrh	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d11c      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x1f2>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	b292      	uxth	r2, r2
 8004160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	1c9a      	adds	r2, r3, #2
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800417e:	2301      	movs	r3, #1
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004182:	f7fd fca7 	bl	8001ad4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418e:	429a      	cmp	r2, r3
 8004190:	d807      	bhi.n	80041a2 <HAL_SPI_TransmitReceive+0x212>
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d003      	beq.n	80041a2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041a0:	e0fb      	b.n	800439a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1a3      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x164>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d19d      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x164>
 80041b8:	e0df      	b.n	800437a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x23a>
 80041c2:	8a7b      	ldrh	r3, [r7, #18]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	f040 80cb 	bne.w	8004360 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d912      	bls.n	80041fa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b02      	subs	r3, #2
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041f8:	e0b2      	b.n	8004360 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004220:	e09e      	b.n	8004360 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b02      	cmp	r3, #2
 800422e:	d134      	bne.n	800429a <HAL_SPI_TransmitReceive+0x30a>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d02f      	beq.n	800429a <HAL_SPI_TransmitReceive+0x30a>
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	2b01      	cmp	r3, #1
 800423e:	d12c      	bne.n	800429a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d912      	bls.n	8004270 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	881a      	ldrh	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b02      	subs	r3, #2
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800426e:	e012      	b.n	8004296 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d148      	bne.n	800433a <HAL_SPI_TransmitReceive+0x3aa>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d042      	beq.n	800433a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d923      	bls.n	8004308 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	b292      	uxth	r2, r2
 80042cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b02      	subs	r3, #2
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d81f      	bhi.n	8004336 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e016      	b.n	8004336 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f103 020c 	add.w	r2, r3, #12
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004336:	2301      	movs	r3, #1
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800433a:	f7fd fbcb 	bl	8001ad4 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004346:	429a      	cmp	r2, r3
 8004348:	d803      	bhi.n	8004352 <HAL_SPI_TransmitReceive+0x3c2>
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d102      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x3c8>
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800435e:	e01c      	b.n	800439a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	f47f af5b 	bne.w	8004222 <HAL_SPI_TransmitReceive+0x292>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f af54 	bne.w	8004222 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fa10 	bl	80047a4 <SPI_EndRxTxTransaction>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	661a      	str	r2, [r3, #96]	; 0x60
 8004396:	e000      	b.n	800439a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004398:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	099b      	lsrs	r3, r3, #6
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
    return;
 80043fa:	e0d7      	b.n	80045ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_SPI_IRQHandler+0x66>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	09db      	lsrs	r3, r3, #7
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
    return;
 800441c:	e0c6      	b.n	80045ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10c      	bne.n	8004444 <HAL_SPI_IRQHandler+0x8c>
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80b4 	beq.w	80045ac <HAL_SPI_IRQHandler+0x1f4>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80ad 	beq.w	80045ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d023      	beq.n	80044a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d011      	beq.n	800448e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	f043 0204 	orr.w	r2, r3, #4
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	e00b      	b.n	80044a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	693b      	ldr	r3, [r7, #16]
        return;
 80044a4:	e082      	b.n	80045ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d014      	beq.n	80044dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00c      	beq.n	8004502 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ec:	f043 0208 	orr.w	r2, r3, #8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044f4:	2300      	movs	r3, #0
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04f      	beq.n	80045aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004518:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_SPI_IRQHandler+0x17e>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d034      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0203 	bic.w	r2, r2, #3
 8004544:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	2b00      	cmp	r3, #0
 800454c:	d011      	beq.n	8004572 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_SPI_IRQHandler+0x1fc>)
 8004554:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe f93c 	bl	80027d8 <HAL_DMA_Abort_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	4a0d      	ldr	r2, [pc, #52]	; (80045b4 <HAL_SPI_IRQHandler+0x1fc>)
 8004580:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe f926 	bl	80027d8 <HAL_DMA_Abort_IT>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800459e:	e003      	b.n	80045a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f809 	bl	80045b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045a6:	e000      	b.n	80045aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045a8:	bf00      	nop
    return;
 80045aa:	bf00      	nop
  }
}
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	080045cd 	.word	0x080045cd

080045b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ffe5 	bl	80045b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004606:	e04c      	b.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d048      	beq.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004610:	f7fd fa60 	bl	8001ad4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d902      	bls.n	8004626 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d13d      	bne.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463e:	d111      	bne.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004648:	d004      	beq.n	8004654 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d107      	bne.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466c:	d10f      	bne.n	800468e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800468c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e00f      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1a3      	bne.n	8004608 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80046d8:	e057      	b.n	800478a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046e0:	d106      	bne.n	80046f0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d048      	beq.n	800478a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046f8:	f7fd f9ec 	bl	8001ad4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFifoStateUntilTimeout+0x44>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13d      	bne.n	800478a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800471c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d111      	bne.n	800474c <SPI_WaitFifoStateUntilTimeout+0x82>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d004      	beq.n	800473c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d107      	bne.n	800474c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d10f      	bne.n	8004776 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e008      	b.n	800479c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4013      	ands	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d19f      	bne.n	80046da <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff ff84 	bl	80046ca <SPI_WaitFifoStateUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	f043 0220 	orr.w	r2, r3, #32
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e027      	b.n	8004828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	; 0x80
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff ff07 	bl	80045f6 <SPI_WaitFlagStateUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e014      	b.n	8004828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff5d 	bl	80046ca <SPI_WaitFifoStateUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e000      	b.n	8004828 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e01d      	b.n	800487e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f815 	bl	8004886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 f986 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <HAL_TIM_Base_Start_IT+0x50>)
 80048bc:	4013      	ands	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d00b      	beq.n	80048de <HAL_TIM_Base_Start_IT+0x42>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d007      	beq.n	80048de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	00010007 	.word	0x00010007

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0202 	mvn.w	r2, #2
 800491c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f905 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8f7 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f908 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b04      	cmp	r3, #4
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8db 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8cd 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8de 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0208 	mvn.w	r2, #8
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2204      	movs	r2, #4
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f8b1 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8a3 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8b4 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0210 	mvn.w	r2, #16
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f887 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f879 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f88a 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0201 	mvn.w	r2, #1
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fd72 	bl	8001558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8f2 	bl	8004c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d10e      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d107      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8e5 	bl	8004c98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d10e      	bne.n	8004afa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f838 	bl	8004b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d10e      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0220 	mvn.w	r2, #32
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8a5 	bl	8004c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a32      	ldr	r2, [pc, #200]	; (8004c5c <TIM_Base_SetConfig+0xdc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x28>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x28>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <TIM_Base_SetConfig+0xe0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a27      	ldr	r2, [pc, #156]	; (8004c5c <TIM_Base_SetConfig+0xdc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <TIM_Base_SetConfig+0x6a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d00f      	beq.n	8004bea <TIM_Base_SetConfig+0x6a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a24      	ldr	r2, [pc, #144]	; (8004c60 <TIM_Base_SetConfig+0xe0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_Base_SetConfig+0x6a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <TIM_Base_SetConfig+0xe4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_Base_SetConfig+0x6a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <TIM_Base_SetConfig+0xe8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_Base_SetConfig+0x6a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <TIM_Base_SetConfig+0xec>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <TIM_Base_SetConfig+0xdc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_Base_SetConfig+0xc0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <TIM_Base_SetConfig+0xe4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_Base_SetConfig+0xc0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0d      	ldr	r2, [pc, #52]	; (8004c68 <TIM_Base_SetConfig+0xe8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0xc0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <TIM_Base_SetConfig+0xec>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	615a      	str	r2, [r3, #20]
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800

08004c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e040      	b.n	8004d40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc fd12 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2224      	movs	r2, #36	; 0x24
 8004cd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa26 	bl	800513c <UART_SetConfig>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e022      	b.n	8004d40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fb9c 	bl	8005440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fc23 	bl	8005584 <UART_CheckIdleState>
 8004d3e:	4603      	mov	r3, r0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	f040 808a 	bne.w	8004e74 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_UART_Receive_IT+0x24>
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e082      	b.n	8004e76 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Receive_IT+0x36>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e07b      	b.n	8004e76 <HAL_UART_Receive_IT+0x12e>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004daa:	d10e      	bne.n	8004dca <HAL_UART_Receive_IT+0x82>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_UART_Receive_IT+0x78>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dbe:	e02d      	b.n	8004e1c <HAL_UART_Receive_IT+0xd4>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	22ff      	movs	r2, #255	; 0xff
 8004dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc8:	e028      	b.n	8004e1c <HAL_UART_Receive_IT+0xd4>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <HAL_UART_Receive_IT+0xa6>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <HAL_UART_Receive_IT+0x9c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de2:	e01b      	b.n	8004e1c <HAL_UART_Receive_IT+0xd4>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	227f      	movs	r2, #127	; 0x7f
 8004de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dec:	e016      	b.n	8004e1c <HAL_UART_Receive_IT+0xd4>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df6:	d10d      	bne.n	8004e14 <HAL_UART_Receive_IT+0xcc>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <HAL_UART_Receive_IT+0xc2>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	227f      	movs	r2, #127	; 0x7f
 8004e04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e08:	e008      	b.n	8004e1c <HAL_UART_Receive_IT+0xd4>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	223f      	movs	r2, #63	; 0x3f
 8004e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e12:	e003      	b.n	8004e1c <HAL_UART_Receive_IT+0xd4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2222      	movs	r2, #34	; 0x22
 8004e26:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d107      	bne.n	8004e52 <HAL_UART_Receive_IT+0x10a>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <HAL_UART_Receive_IT+0x13c>)
 8004e4e:	661a      	str	r2, [r3, #96]	; 0x60
 8004e50:	e002      	b.n	8004e58 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <HAL_UART_Receive_IT+0x140>)
 8004e56:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004e6e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	08005849 	.word	0x08005849
 8004e88:	080057a3 	.word	0x080057a3

08004e8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	f640 030f 	movw	r3, #2063	; 0x80f
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8113 	beq.w	8005100 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	4798      	blx	r3
      }
      return;
 8004ee2:	e10d      	b.n	8005100 <HAL_UART_IRQHandler+0x274>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80d6 	beq.w	8005098 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80cb 	beq.w	8005098 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00e      	beq.n	8004f2a <HAL_UART_IRQHandler+0x9e>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00e      	beq.n	8004f52 <HAL_UART_IRQHandler+0xc6>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2202      	movs	r2, #2
 8004f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	f043 0204 	orr.w	r2, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <HAL_UART_IRQHandler+0xee>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f72:	f043 0202 	orr.w	r2, r3, #2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d013      	beq.n	8004fac <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa4:	f043 0208 	orr.w	r2, r3, #8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00f      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x14a>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8092 	beq.w	8005104 <HAL_UART_IRQHandler+0x278>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005008:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d004      	beq.n	8005022 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800501e:	2b00      	cmp	r3, #0
 8005020:	d031      	beq.n	8005086 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fb6e 	bl	8005704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d123      	bne.n	800507e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005044:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d013      	beq.n	8005076 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005052:	4a2f      	ldr	r2, [pc, #188]	; (8005110 <HAL_UART_IRQHandler+0x284>)
 8005054:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800505a:	4618      	mov	r0, r3
 800505c:	f7fd fbbc 	bl	80027d8 <HAL_DMA_Abort_IT>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	e00e      	b.n	8005094 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f856 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	e00a      	b.n	8005094 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f852 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	e006      	b.n	8005094 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f84e 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005092:	e037      	b.n	8005104 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	bf00      	nop
    return;
 8005096:	e035      	b.n	8005104 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00d      	beq.n	80050be <HAL_UART_IRQHandler+0x232>
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fc19 	bl	80058ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050bc:	e025      	b.n	800510a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d008      	beq.n	80050e4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3
    }
    return;
 80050e2:	e011      	b.n	8005108 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <HAL_UART_IRQHandler+0x27e>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb39 	bl	8005770 <UART_EndTransmit_IT>
    return;
 80050fe:	e004      	b.n	800510a <HAL_UART_IRQHandler+0x27e>
      return;
 8005100:	bf00      	nop
 8005102:	e002      	b.n	800510a <HAL_UART_IRQHandler+0x27e>
    return;
 8005104:	bf00      	nop
 8005106:	e000      	b.n	800510a <HAL_UART_IRQHandler+0x27e>
    return;
 8005108:	bf00      	nop
  }

}
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	08005745 	.word	0x08005745

08005114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4ba2      	ldr	r3, [pc, #648]	; (80053f4 <UART_SetConfig+0x2b8>)
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6939      	ldr	r1, [r7, #16]
 8005174:	430b      	orrs	r3, r1
 8005176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a90      	ldr	r2, [pc, #576]	; (80053f8 <UART_SetConfig+0x2bc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d120      	bne.n	80051fe <UART_SetConfig+0xc2>
 80051bc:	4b8f      	ldr	r3, [pc, #572]	; (80053fc <UART_SetConfig+0x2c0>)
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d817      	bhi.n	80051f8 <UART_SetConfig+0xbc>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x94>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051ed 	.word	0x080051ed
 80051d8:	080051f3 	.word	0x080051f3
 80051dc:	080051e7 	.word	0x080051e7
 80051e0:	2300      	movs	r3, #0
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e01d      	b.n	8005222 <UART_SetConfig+0xe6>
 80051e6:	2302      	movs	r3, #2
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e01a      	b.n	8005222 <UART_SetConfig+0xe6>
 80051ec:	2304      	movs	r3, #4
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e017      	b.n	8005222 <UART_SetConfig+0xe6>
 80051f2:	2308      	movs	r3, #8
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e014      	b.n	8005222 <UART_SetConfig+0xe6>
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e011      	b.n	8005222 <UART_SetConfig+0xe6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a7f      	ldr	r2, [pc, #508]	; (8005400 <UART_SetConfig+0x2c4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d102      	bne.n	800520e <UART_SetConfig+0xd2>
 8005208:	2300      	movs	r3, #0
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	e009      	b.n	8005222 <UART_SetConfig+0xe6>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <UART_SetConfig+0x2c8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d102      	bne.n	800521e <UART_SetConfig+0xe2>
 8005218:	2300      	movs	r3, #0
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e001      	b.n	8005222 <UART_SetConfig+0xe6>
 800521e:	2310      	movs	r3, #16
 8005220:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	f040 8083 	bne.w	8005334 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d85f      	bhi.n	80052f4 <UART_SetConfig+0x1b8>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x100>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005261 	.word	0x08005261
 8005240:	08005281 	.word	0x08005281
 8005244:	080052a1 	.word	0x080052a1
 8005248:	080052f5 	.word	0x080052f5
 800524c:	080052bd 	.word	0x080052bd
 8005250:	080052f5 	.word	0x080052f5
 8005254:	080052f5 	.word	0x080052f5
 8005258:	080052f5 	.word	0x080052f5
 800525c:	080052dd 	.word	0x080052dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe fd96 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8005264:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	005a      	lsls	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	61bb      	str	r3, [r7, #24]
        break;
 800527e:	e03c      	b.n	80052fa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005280:	f7fe fda8 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8005284:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	005a      	lsls	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	61bb      	str	r3, [r7, #24]
        break;
 800529e:	e02c      	b.n	80052fa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80052aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6852      	ldr	r2, [r2, #4]
 80052b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	61bb      	str	r3, [r7, #24]
        break;
 80052ba:	e01e      	b.n	80052fa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052bc:	f7fe fcf2 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 80052c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	005a      	lsls	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	61bb      	str	r3, [r7, #24]
        break;
 80052da:	e00e      	b.n	80052fa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	61bb      	str	r3, [r7, #24]
        break;
 80052f2:	e002      	b.n	80052fa <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
        break;
 80052f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b0f      	cmp	r3, #15
 80052fe:	d916      	bls.n	800532e <UART_SetConfig+0x1f2>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005306:	d212      	bcs.n	800532e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f023 030f 	bic.w	r3, r3, #15
 8005310:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	b29b      	uxth	r3, r3
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	b29a      	uxth	r2, r3
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	4313      	orrs	r3, r2
 8005322:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	897a      	ldrh	r2, [r7, #10]
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e07d      	b.n	800542a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
 8005332:	e07a      	b.n	800542a <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005334:	7ffb      	ldrb	r3, [r7, #31]
 8005336:	2b08      	cmp	r3, #8
 8005338:	d866      	bhi.n	8005408 <UART_SetConfig+0x2cc>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <UART_SetConfig+0x204>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005365 	.word	0x08005365
 8005344:	08005383 	.word	0x08005383
 8005348:	080053a1 	.word	0x080053a1
 800534c:	08005409 	.word	0x08005409
 8005350:	080053bd 	.word	0x080053bd
 8005354:	08005409 	.word	0x08005409
 8005358:	08005409 	.word	0x08005409
 800535c:	08005409 	.word	0x08005409
 8005360:	080053db 	.word	0x080053db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005364:	f7fe fd14 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8005368:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	085a      	lsrs	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	441a      	add	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	fbb2 f3f3 	udiv	r3, r2, r3
 800537c:	b29b      	uxth	r3, r3
 800537e:	61bb      	str	r3, [r7, #24]
        break;
 8005380:	e045      	b.n	800540e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005382:	f7fe fd27 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8005386:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	085a      	lsrs	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	441a      	add	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	b29b      	uxth	r3, r3
 800539c:	61bb      	str	r3, [r7, #24]
        break;
 800539e:	e036      	b.n	800540e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80053aa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6852      	ldr	r2, [r2, #4]
 80053b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	61bb      	str	r3, [r7, #24]
        break;
 80053ba:	e028      	b.n	800540e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053bc:	f7fe fc72 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 80053c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	085a      	lsrs	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	441a      	add	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	61bb      	str	r3, [r7, #24]
        break;
 80053d8:	e019      	b.n	800540e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	61bb      	str	r3, [r7, #24]
        break;
 80053f0:	e00d      	b.n	800540e <UART_SetConfig+0x2d2>
 80053f2:	bf00      	nop
 80053f4:	efff69f3 	.word	0xefff69f3
 80053f8:	40013800 	.word	0x40013800
 80053fc:	40021000 	.word	0x40021000
 8005400:	40004400 	.word	0x40004400
 8005404:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	75fb      	strb	r3, [r7, #23]
        break;
 800540c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b0f      	cmp	r3, #15
 8005412:	d908      	bls.n	8005426 <UART_SetConfig+0x2ea>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541a:	d204      	bcs.n	8005426 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	60da      	str	r2, [r3, #12]
 8005424:	e001      	b.n	800542a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01a      	beq.n	8005556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553e:	d10a      	bne.n	8005556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af02      	add	r7, sp, #8
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005592:	f7fc fa9f 	bl	8001ad4 <HAL_GetTick>
 8005596:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d10e      	bne.n	80055c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f82a 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e020      	b.n	8005606 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d10e      	bne.n	80055f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f814 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e00a      	b.n	8005606 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	4613      	mov	r3, r2
 800561c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561e:	e05d      	b.n	80056dc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d059      	beq.n	80056dc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005628:	f7fc fa54 	bl	8001ad4 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <UART_WaitOnFlagUntilTimeout+0x30>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11b      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800564c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e042      	b.n	80056fc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02b      	beq.n	80056dc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005692:	d123      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e00f      	b.n	80056fc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d092      	beq.n	8005620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800571a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0201 	bic.w	r2, r2, #1
 800572a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fce0 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005786:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fcbd 	bl	8005114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057b0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b6:	2b22      	cmp	r3, #34	; 0x22
 80057b8:	d13a      	bne.n	8005830 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057c0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057c2:	89bb      	ldrh	r3, [r7, #12]
 80057c4:	b2d9      	uxtb	r1, r3
 80057c6:	89fb      	ldrh	r3, [r7, #14]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	400a      	ands	r2, r1
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d121      	bne.n	8005840 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800580a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fb fc6b 	bl	8001104 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800582e:	e007      	b.n	8005840 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0208 	orr.w	r2, r2, #8
 800583e:	619a      	str	r2, [r3, #24]
}
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005856:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585c:	2b22      	cmp	r3, #34	; 0x22
 800585e:	d13a      	bne.n	80058d6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005866:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800586e:	89ba      	ldrh	r2, [r7, #12]
 8005870:	89fb      	ldrh	r3, [r7, #14]
 8005872:	4013      	ands	r3, r2
 8005874:	b29a      	uxth	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	1c9a      	adds	r2, r3, #2
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d121      	bne.n	80058e6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058b0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0201 	bic.w	r2, r2, #1
 80058c0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fc18 	bl	8001104 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058d4:	e007      	b.n	80058e6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0208 	orr.w	r2, r2, #8
 80058e4:	619a      	str	r2, [r3, #24]
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590a:	f3ef 8305 	mrs	r3, IPSR
 800590e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005916:	f3ef 8310 	mrs	r3, PRIMASK
 800591a:	607b      	str	r3, [r7, #4]
  return(result);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <osKernelInitialize+0x32>
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <osKernelInitialize+0x64>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d109      	bne.n	800593e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800592a:	f3ef 8311 	mrs	r3, BASEPRI
 800592e:	603b      	str	r3, [r7, #0]
  return(result);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005936:	f06f 0305 	mvn.w	r3, #5
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e00c      	b.n	8005958 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800593e:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <osKernelInitialize+0x64>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d105      	bne.n	8005952 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <osKernelInitialize+0x64>)
 8005948:	2201      	movs	r2, #1
 800594a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e002      	b.n	8005958 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005958:	68fb      	ldr	r3, [r7, #12]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000098 	.word	0x20000098

0800596c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005972:	f3ef 8305 	mrs	r3, IPSR
 8005976:	60bb      	str	r3, [r7, #8]
  return(result);
 8005978:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597e:	f3ef 8310 	mrs	r3, PRIMASK
 8005982:	607b      	str	r3, [r7, #4]
  return(result);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <osKernelStart+0x32>
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <osKernelStart+0x64>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d109      	bne.n	80059a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005992:	f3ef 8311 	mrs	r3, BASEPRI
 8005996:	603b      	str	r3, [r7, #0]
  return(result);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800599e:	f06f 0305 	mvn.w	r3, #5
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e00e      	b.n	80059c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <osKernelStart+0x64>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d107      	bne.n	80059be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80059ae:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <osKernelStart+0x64>)
 80059b0:	2202      	movs	r2, #2
 80059b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80059b4:	f001 f880 	bl	8006ab8 <vTaskStartScheduler>
      stat = osOK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e002      	b.n	80059c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059c4:	68fb      	ldr	r3, [r7, #12]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000098 	.word	0x20000098

080059d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b092      	sub	sp, #72	; 0x48
 80059d8:	af04      	add	r7, sp, #16
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e4:	f3ef 8305 	mrs	r3, IPSR
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 8094 	bne.w	8005b1a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f2:	f3ef 8310 	mrs	r3, PRIMASK
 80059f6:	623b      	str	r3, [r7, #32]
  return(result);
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 808d 	bne.w	8005b1a <osThreadNew+0x146>
 8005a00:	4b48      	ldr	r3, [pc, #288]	; (8005b24 <osThreadNew+0x150>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d106      	bne.n	8005a16 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a08:	f3ef 8311 	mrs	r3, BASEPRI
 8005a0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f040 8082 	bne.w	8005b1a <osThreadNew+0x146>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d07e      	beq.n	8005b1a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005a20:	2318      	movs	r3, #24
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005a24:	2300      	movs	r3, #0
 8005a26:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005a28:	f107 031b 	add.w	r3, r7, #27
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d045      	beq.n	8005ac6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <osThreadNew+0x74>
        name = attr->name;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <osThreadNew+0x9a>
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b38      	cmp	r3, #56	; 0x38
 8005a60:	d805      	bhi.n	8005a6e <osThreadNew+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <osThreadNew+0x9e>
        return (NULL);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e054      	b.n	8005b1c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	089b      	lsrs	r3, r3, #2
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00e      	beq.n	8005aa8 <osThreadNew+0xd4>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b5b      	cmp	r3, #91	; 0x5b
 8005a90:	d90a      	bls.n	8005aa8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <osThreadNew+0xd4>
        mem = 1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa6:	e010      	b.n	8005aca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10c      	bne.n	8005aca <osThreadNew+0xf6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d108      	bne.n	8005aca <osThreadNew+0xf6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <osThreadNew+0xf6>
          mem = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac4:	e001      	b.n	8005aca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d110      	bne.n	8005af2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ad8:	9202      	str	r2, [sp, #8]
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fe1a 	bl	8006720 <xTaskCreateStatic>
 8005aec:	4603      	mov	r3, r0
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e013      	b.n	8005b1a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d110      	bne.n	8005b1a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	f107 0314 	add.w	r3, r7, #20
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fe64 	bl	80067d8 <xTaskCreate>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <osThreadNew+0x146>
          hTask = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b1a:	697b      	ldr	r3, [r7, #20]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3738      	adds	r7, #56	; 0x38
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000098 	.word	0x20000098

08005b28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b30:	f3ef 8305 	mrs	r3, IPSR
 8005b34:	613b      	str	r3, [r7, #16]
  return(result);
 8005b36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10f      	bne.n	8005b5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <osDelay+0x34>
 8005b48:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <osDelay+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d109      	bne.n	8005b64 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b50:	f3ef 8311 	mrs	r3, BASEPRI
 8005b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <osDelay+0x3c>
    stat = osErrorISR;
 8005b5c:	f06f 0305 	mvn.w	r3, #5
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e007      	b.n	8005b74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 ff6e 	bl	8006a50 <vTaskDelay>
    }
  }

  return (stat);
 8005b74:	697b      	ldr	r3, [r7, #20]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000098 	.word	0x20000098

08005b84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a07      	ldr	r2, [pc, #28]	; (8005bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4a06      	ldr	r2, [pc, #24]	; (8005bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8005b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2280      	movs	r2, #128	; 0x80
 8005ba0:	601a      	str	r2, [r3, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	2000009c 	.word	0x2000009c
 8005bb4:	200000f8 	.word	0x200000f8

08005bb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a07      	ldr	r2, [pc, #28]	; (8005be4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005bc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4a06      	ldr	r2, [pc, #24]	; (8005be8 <vApplicationGetTimerTaskMemory+0x30>)
 8005bce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd6:	601a      	str	r2, [r3, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	200002f8 	.word	0x200002f8
 8005be8:	20000354 	.word	0x20000354

08005bec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f103 0208 	add.w	r2, r3, #8
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f04f 32ff 	mov.w	r2, #4294967295
 8005c04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f103 0208 	add.w	r2, r3, #8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f103 0208 	add.w	r2, r3, #8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d103      	bne.n	8005cae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e00c      	b.n	8005cc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e002      	b.n	8005cbc <vListInsert+0x2e>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d2f6      	bcs.n	8005cb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6892      	ldr	r2, [r2, #8]
 8005d16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6852      	ldr	r2, [r2, #4]
 8005d20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d103      	bne.n	8005d34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	1e5a      	subs	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d7e:	f002 f811 	bl	8007da4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	441a      	add	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	3b01      	subs	r3, #1
 8005db0:	68f9      	ldr	r1, [r7, #12]
 8005db2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	441a      	add	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	22ff      	movs	r2, #255	; 0xff
 8005dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d114      	bne.n	8005dfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01a      	beq.n	8005e12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3310      	adds	r3, #16
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 f8f7 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <xQueueGenericReset+0xcc>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	e009      	b.n	8005e12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3310      	adds	r3, #16
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fef2 	bl	8005bec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3324      	adds	r3, #36	; 0x24
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff feed 	bl	8005bec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e12:	f001 fff7 	bl	8007e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e16:	2301      	movs	r3, #1
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08e      	sub	sp, #56	; 0x38
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <xQueueGenericCreateStatic+0x52>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <xQueueGenericCreateStatic+0x56>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <xQueueGenericCreateStatic+0x58>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	623b      	str	r3, [r7, #32]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <xQueueGenericCreateStatic+0x7e>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <xQueueGenericCreateStatic+0x82>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <xQueueGenericCreateStatic+0x84>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	61fb      	str	r3, [r7, #28]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ec2:	2350      	movs	r3, #80	; 0x50
 8005ec4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b50      	cmp	r3, #80	; 0x50
 8005eca:	d00a      	beq.n	8005ee2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61bb      	str	r3, [r7, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ef4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f805 	bl	8005f12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3730      	adds	r7, #48	; 0x30
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d103      	bne.n	8005f2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e002      	b.n	8005f34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f40:	2101      	movs	r1, #1
 8005f42:	69b8      	ldr	r0, [r7, #24]
 8005f44:	f7ff ff06 	bl	8005d54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f66:	2300      	movs	r3, #0
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericSend+0x32>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <xQueueGenericSend+0x40>
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <xQueueGenericSend+0x44>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <xQueueGenericSend+0x46>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <xQueueGenericSend+0x60>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d103      	bne.n	8005fc6 <xQueueGenericSend+0x6e>
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <xQueueGenericSend+0x72>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueGenericSend+0x74>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	623b      	str	r3, [r7, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fe6:	f001 f9bb 	bl	8007360 <xTaskGetSchedulerState>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <xQueueGenericSend+0x9e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <xQueueGenericSend+0xa2>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xQueueGenericSend+0xa4>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xQueueGenericSend+0xbe>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	61fb      	str	r3, [r7, #28]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006016:	f001 fec5 	bl	8007da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <xQueueGenericSend+0xd4>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d129      	bne.n	8006080 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006032:	f000 fa07 	bl	8006444 <prvCopyDataToQueue>
 8006036:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d010      	beq.n	8006062 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	3324      	adds	r3, #36	; 0x24
 8006044:	4618      	mov	r0, r3
 8006046:	f000 ffc5 	bl	8006fd4 <xTaskRemoveFromEventList>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d013      	beq.n	8006078 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006050:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <xQueueGenericSend+0x1f8>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	e00a      	b.n	8006078 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006068:	4b39      	ldr	r3, [pc, #228]	; (8006150 <xQueueGenericSend+0x1f8>)
 800606a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006078:	f001 fec4 	bl	8007e04 <vPortExitCritical>
				return pdPASS;
 800607c:	2301      	movs	r3, #1
 800607e:	e063      	b.n	8006148 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006086:	f001 febd 	bl	8007e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800608a:	2300      	movs	r3, #0
 800608c:	e05c      	b.n	8006148 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006094:	f107 0314 	add.w	r3, r7, #20
 8006098:	4618      	mov	r0, r3
 800609a:	f000 ffff 	bl	800709c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800609e:	2301      	movs	r3, #1
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060a2:	f001 feaf 	bl	8007e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060a6:	f000 fd6d 	bl	8006b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060aa:	f001 fe7b 	bl	8007da4 <vPortEnterCritical>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060b4:	b25b      	sxtb	r3, r3
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d103      	bne.n	80060c4 <xQueueGenericSend+0x16c>
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ca:	b25b      	sxtb	r3, r3
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d103      	bne.n	80060da <xQueueGenericSend+0x182>
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060da:	f001 fe93 	bl	8007e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060de:	1d3a      	adds	r2, r7, #4
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	4611      	mov	r1, r2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 ffee 	bl	80070c8 <xTaskCheckForTimeOut>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d124      	bne.n	800613c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f4:	f000 fa9e 	bl	8006634 <prvIsQueueFull>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d018      	beq.n	8006130 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	3310      	adds	r3, #16
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4611      	mov	r1, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f000 ff14 	bl	8006f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800610c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800610e:	f000 fa29 	bl	8006564 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006112:	f000 fd45 	bl	8006ba0 <xTaskResumeAll>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	f47f af7c 	bne.w	8006016 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800611e:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <xQueueGenericSend+0x1f8>)
 8006120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	e772      	b.n	8006016 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006132:	f000 fa17 	bl	8006564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006136:	f000 fd33 	bl	8006ba0 <xTaskResumeAll>
 800613a:	e76c      	b.n	8006016 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800613c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800613e:	f000 fa11 	bl	8006564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006142:	f000 fd2d 	bl	8006ba0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006146:	2300      	movs	r3, #0
		}
	}
}
 8006148:	4618      	mov	r0, r3
 800614a:	3738      	adds	r7, #56	; 0x38
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08e      	sub	sp, #56	; 0x38
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <xQueueGenericSendFromISR+0x3c>
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <xQueueGenericSendFromISR+0x40>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <xQueueGenericSendFromISR+0x42>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	623b      	str	r3, [r7, #32]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d103      	bne.n	80061be <xQueueGenericSendFromISR+0x6a>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <xQueueGenericSendFromISR+0x6e>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueGenericSendFromISR+0x70>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61fb      	str	r3, [r7, #28]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061de:	f001 fec3 	bl	8007f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061e2:	f3ef 8211 	mrs	r2, BASEPRI
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	61ba      	str	r2, [r7, #24]
 80061f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	429a      	cmp	r2, r3
 8006208:	d302      	bcc.n	8006210 <xQueueGenericSendFromISR+0xbc>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d12c      	bne.n	800626a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006220:	f000 f910 	bl	8006444 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006224:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d112      	bne.n	8006254 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d016      	beq.n	8006264 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	3324      	adds	r3, #36	; 0x24
 800623a:	4618      	mov	r0, r3
 800623c:	f000 feca 	bl	8006fd4 <xTaskRemoveFromEventList>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e007      	b.n	8006264 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006254:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006258:	3301      	adds	r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	b25a      	sxtb	r2, r3
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006268:	e001      	b.n	800626e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006278:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800627c:	4618      	mov	r0, r3
 800627e:	3738      	adds	r7, #56	; 0x38
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08c      	sub	sp, #48	; 0x30
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006290:	2300      	movs	r3, #0
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xQueueReceive+0x30>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	623b      	str	r3, [r7, #32]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <xQueueReceive+0x3e>
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <xQueueReceive+0x42>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueReceive+0x44>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xQueueReceive+0x5e>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	61fb      	str	r3, [r7, #28]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e2:	f001 f83d 	bl	8007360 <xTaskGetSchedulerState>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <xQueueReceive+0x6e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <xQueueReceive+0x72>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueReceive+0x74>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueReceive+0x8e>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	61bb      	str	r3, [r7, #24]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006312:	f001 fd47 	bl	8007da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01f      	beq.n	8006362 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006326:	f000 f8f7 	bl	8006518 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	3310      	adds	r3, #16
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fe48 	bl	8006fd4 <xTaskRemoveFromEventList>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800634a:	4b3d      	ldr	r3, [pc, #244]	; (8006440 <xQueueReceive+0x1bc>)
 800634c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800635a:	f001 fd53 	bl	8007e04 <vPortExitCritical>
				return pdPASS;
 800635e:	2301      	movs	r3, #1
 8006360:	e069      	b.n	8006436 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006368:	f001 fd4c 	bl	8007e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800636c:	2300      	movs	r3, #0
 800636e:	e062      	b.n	8006436 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006376:	f107 0310 	add.w	r3, r7, #16
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fe8e 	bl	800709c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006384:	f001 fd3e 	bl	8007e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006388:	f000 fbfc 	bl	8006b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800638c:	f001 fd0a 	bl	8007da4 <vPortEnterCritical>
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006396:	b25b      	sxtb	r3, r3
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d103      	bne.n	80063a6 <xQueueReceive+0x122>
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d103      	bne.n	80063bc <xQueueReceive+0x138>
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	f001 fd22 	bl	8007e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c0:	1d3a      	adds	r2, r7, #4
 80063c2:	f107 0310 	add.w	r3, r7, #16
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fe7d 	bl	80070c8 <xTaskCheckForTimeOut>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d123      	bne.n	800641c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d6:	f000 f917 	bl	8006608 <prvIsQueueEmpty>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	3324      	adds	r3, #36	; 0x24
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4611      	mov	r1, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fda3 	bl	8006f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f0:	f000 f8b8 	bl	8006564 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063f4:	f000 fbd4 	bl	8006ba0 <xTaskResumeAll>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d189      	bne.n	8006312 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xQueueReceive+0x1bc>)
 8006400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	e780      	b.n	8006312 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006412:	f000 f8a7 	bl	8006564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006416:	f000 fbc3 	bl	8006ba0 <xTaskResumeAll>
 800641a:	e77a      	b.n	8006312 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800641c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641e:	f000 f8a1 	bl	8006564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006422:	f000 fbbd 	bl	8006ba0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006428:	f000 f8ee 	bl	8006608 <prvIsQueueEmpty>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	f43f af6f 	beq.w	8006312 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006434:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006436:	4618      	mov	r0, r3
 8006438:	3730      	adds	r7, #48	; 0x30
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d14d      	bne.n	8006506 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 ff94 	bl	800739c <xTaskPriorityDisinherit>
 8006474:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	e043      	b.n	8006506 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d119      	bne.n	80064b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6898      	ldr	r0, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	461a      	mov	r2, r3
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	f001 ffae 	bl	80083f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	441a      	add	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d32b      	bcc.n	8006506 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	609a      	str	r2, [r3, #8]
 80064b6:	e026      	b.n	8006506 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68d8      	ldr	r0, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	461a      	mov	r2, r3
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	f001 ff94 	bl	80083f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	425b      	negs	r3, r3
 80064d2:	441a      	add	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d207      	bcs.n	80064f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	425b      	negs	r3, r3
 80064ee:	441a      	add	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d105      	bne.n	8006506 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	3b01      	subs	r3, #1
 8006504:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800650e:	697b      	ldr	r3, [r7, #20]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	441a      	add	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d303      	bcc.n	800654c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68d9      	ldr	r1, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	461a      	mov	r2, r3
 8006556:	6838      	ldr	r0, [r7, #0]
 8006558:	f001 ff4a 	bl	80083f0 <memcpy>
	}
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800656c:	f001 fc1a 	bl	8007da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006576:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006578:	e011      	b.n	800659e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d012      	beq.n	80065a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3324      	adds	r3, #36	; 0x24
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fd24 	bl	8006fd4 <xTaskRemoveFromEventList>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006592:	f000 fdfb 	bl	800718c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	3b01      	subs	r3, #1
 800659a:	b2db      	uxtb	r3, r3
 800659c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800659e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dce9      	bgt.n	800657a <prvUnlockQueue+0x16>
 80065a6:	e000      	b.n	80065aa <prvUnlockQueue+0x46>
					break;
 80065a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	22ff      	movs	r2, #255	; 0xff
 80065ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065b2:	f001 fc27 	bl	8007e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065b6:	f001 fbf5 	bl	8007da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065c2:	e011      	b.n	80065e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d012      	beq.n	80065f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3310      	adds	r3, #16
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fcff 	bl	8006fd4 <xTaskRemoveFromEventList>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065dc:	f000 fdd6 	bl	800718c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dce9      	bgt.n	80065c4 <prvUnlockQueue+0x60>
 80065f0:	e000      	b.n	80065f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	22ff      	movs	r2, #255	; 0xff
 80065f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065fc:	f001 fc02 	bl	8007e04 <vPortExitCritical>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006610:	f001 fbc8 	bl	8007da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e001      	b.n	8006626 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006626:	f001 fbed 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 800662a:	68fb      	ldr	r3, [r7, #12]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800663c:	f001 fbb2 	bl	8007da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	429a      	cmp	r2, r3
 800664a:	d102      	bne.n	8006652 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800664c:	2301      	movs	r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e001      	b.n	8006656 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006656:	f001 fbd5 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e014      	b.n	800669e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006674:	4a0f      	ldr	r2, [pc, #60]	; (80066b4 <vQueueAddToRegistry+0x50>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006680:	490c      	ldr	r1, [pc, #48]	; (80066b4 <vQueueAddToRegistry+0x50>)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800668a:	4a0a      	ldr	r2, [pc, #40]	; (80066b4 <vQueueAddToRegistry+0x50>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006696:	e006      	b.n	80066a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b07      	cmp	r3, #7
 80066a2:	d9e7      	bls.n	8006674 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20002038 	.word	0x20002038

080066b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066c8:	f001 fb6c 	bl	8007da4 <vPortEnterCritical>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d103      	bne.n	80066e2 <vQueueWaitForMessageRestricted+0x2a>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066e8:	b25b      	sxtb	r3, r3
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d103      	bne.n	80066f8 <vQueueWaitForMessageRestricted+0x40>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066f8:	f001 fb84 	bl	8007e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fc35 	bl	8006f7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f7ff ff26 	bl	8006564 <prvUnlockQueue>
	}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	; 0x38
 8006724:	af04      	add	r7, sp, #16
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	623b      	str	r3, [r7, #32]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xTaskCreateStatic+0x46>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	61fb      	str	r3, [r7, #28]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006766:	235c      	movs	r3, #92	; 0x5c
 8006768:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b5c      	cmp	r3, #92	; 0x5c
 800676e:	d00a      	beq.n	8006786 <xTaskCreateStatic+0x66>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	61bb      	str	r3, [r7, #24]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01e      	beq.n	80067ca <xTaskCreateStatic+0xaa>
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	2b00      	cmp	r3, #0
 8006790:	d01b      	beq.n	80067ca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067a4:	2300      	movs	r3, #0
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	9302      	str	r3, [sp, #8]
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f850 	bl	8006862 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067c4:	f000 f8d4 	bl	8006970 <prvAddNewTaskToReadyList>
 80067c8:	e001      	b.n	80067ce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067ce:	697b      	ldr	r3, [r7, #20]
	}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3728      	adds	r7, #40	; 0x28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af04      	add	r7, sp, #16
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	4613      	mov	r3, r2
 80067e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 fbfb 	bl	8007fe8 <pvPortMalloc>
 80067f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80067fa:	205c      	movs	r0, #92	; 0x5c
 80067fc:	f001 fbf4 	bl	8007fe8 <pvPortMalloc>
 8006800:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	631a      	str	r2, [r3, #48]	; 0x30
 800680e:	e005      	b.n	800681c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006810:	6978      	ldr	r0, [r7, #20]
 8006812:	f001 fcad 	bl	8008170 <vPortFree>
 8006816:	e001      	b.n	800681c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d017      	beq.n	8006852 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	2300      	movs	r3, #0
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	9302      	str	r3, [sp, #8]
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f80e 	bl	8006862 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006846:	69f8      	ldr	r0, [r7, #28]
 8006848:	f000 f892 	bl	8006970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800684c:	2301      	movs	r3, #1
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	e002      	b.n	8006858 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006858:	69bb      	ldr	r3, [r7, #24]
	}
 800685a:	4618      	mov	r0, r3
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b088      	sub	sp, #32
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	461a      	mov	r2, r3
 800687a:	21a5      	movs	r1, #165	; 0xa5
 800687c:	f001 fdc6 	bl	800840c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800688a:	3b01      	subs	r3, #1
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f023 0307 	bic.w	r3, r3, #7
 8006898:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <prvInitialiseNewTask+0x58>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	617b      	str	r3, [r7, #20]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	e012      	b.n	80068e6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	7819      	ldrb	r1, [r3, #0]
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	3334      	adds	r3, #52	; 0x34
 80068d0:	460a      	mov	r2, r1
 80068d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	3301      	adds	r3, #1
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	2b0f      	cmp	r3, #15
 80068ea:	d9e9      	bls.n	80068c0 <prvInitialiseNewTask+0x5e>
 80068ec:	e000      	b.n	80068f0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80068ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b37      	cmp	r3, #55	; 0x37
 80068fc:	d901      	bls.n	8006902 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068fe:	2337      	movs	r3, #55	; 0x37
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800690c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2200      	movs	r2, #0
 8006912:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	3304      	adds	r3, #4
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff f987 	bl	8005c2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	3318      	adds	r3, #24
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff f982 	bl	8005c2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2200      	movs	r2, #0
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	68f9      	ldr	r1, [r7, #12]
 8006950:	69b8      	ldr	r0, [r7, #24]
 8006952:	f001 f8f7 	bl	8007b44 <pxPortInitialiseStack>
 8006956:	4602      	mov	r2, r0
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006966:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006968:	bf00      	nop
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006978:	f001 fa14 	bl	8007da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800697c:	4b2d      	ldr	r3, [pc, #180]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a2c      	ldr	r2, [pc, #176]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 8006984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006986:	4b2c      	ldr	r3, [pc, #176]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800698e:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006994:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <prvAddNewTaskToReadyList+0xc4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d110      	bne.n	80069be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800699c:	f000 fc1c 	bl	80071d8 <prvInitialiseTaskLists>
 80069a0:	e00d      	b.n	80069be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069a2:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <prvAddNewTaskToReadyList+0xcc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d802      	bhi.n	80069be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069b8:	4a1f      	ldr	r2, [pc, #124]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <prvAddNewTaskToReadyList+0xd0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <prvAddNewTaskToReadyList+0xd0>)
 80069c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <prvAddNewTaskToReadyList+0xd0>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <prvAddNewTaskToReadyList+0xd4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d903      	bls.n	80069e4 <prvAddNewTaskToReadyList+0x74>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <prvAddNewTaskToReadyList+0xd4>)
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <prvAddNewTaskToReadyList+0xd8>)
 80069f2:	441a      	add	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f7ff f923 	bl	8005c46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a00:	f001 fa00 	bl	8007e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <prvAddNewTaskToReadyList+0xcc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <prvAddNewTaskToReadyList+0xc8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d207      	bcs.n	8006a2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <prvAddNewTaskToReadyList+0xdc>)
 8006a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000c28 	.word	0x20000c28
 8006a38:	20000754 	.word	0x20000754
 8006a3c:	20000c34 	.word	0x20000c34
 8006a40:	20000c44 	.word	0x20000c44
 8006a44:	20000c30 	.word	0x20000c30
 8006a48:	20000758 	.word	0x20000758
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d017      	beq.n	8006a92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <vTaskDelay+0x60>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <vTaskDelay+0x30>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	60bb      	str	r3, [r7, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a80:	f000 f880 	bl	8006b84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fcf6 	bl	8007478 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a8c:	f000 f888 	bl	8006ba0 <xTaskResumeAll>
 8006a90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d107      	bne.n	8006aa8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <vTaskDelay+0x64>)
 8006a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000c50 	.word	0x20000c50
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	1d39      	adds	r1, r7, #4
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff f858 	bl	8005b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	9202      	str	r2, [sp, #8]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	4921      	ldr	r1, [pc, #132]	; (8006b6c <vTaskStartScheduler+0xb4>)
 8006ae8:	4821      	ldr	r0, [pc, #132]	; (8006b70 <vTaskStartScheduler+0xb8>)
 8006aea:	f7ff fe19 	bl	8006720 <xTaskCreateStatic>
 8006aee:	4603      	mov	r3, r0
 8006af0:	4a20      	ldr	r2, [pc, #128]	; (8006b74 <vTaskStartScheduler+0xbc>)
 8006af2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006af4:	4b1f      	ldr	r3, [pc, #124]	; (8006b74 <vTaskStartScheduler+0xbc>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006afc:	2301      	movs	r3, #1
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e001      	b.n	8006b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d102      	bne.n	8006b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b0c:	f000 fd08 	bl	8007520 <xTimerCreateTimerTask>
 8006b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d116      	bne.n	8006b46 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	613b      	str	r3, [r7, #16]
}
 8006b2a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <vTaskStartScheduler+0xc0>)
 8006b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b34:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <vTaskStartScheduler+0xc4>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b3a:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <vTaskStartScheduler+0xc8>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b40:	f001 f88e 	bl	8007c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b44:	e00e      	b.n	8006b64 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d10a      	bne.n	8006b64 <vTaskStartScheduler+0xac>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	60fb      	str	r3, [r7, #12]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <vTaskStartScheduler+0xaa>
}
 8006b64:	bf00      	nop
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	080094e4 	.word	0x080094e4
 8006b70:	080071a5 	.word	0x080071a5
 8006b74:	20000c4c 	.word	0x20000c4c
 8006b78:	20000c48 	.word	0x20000c48
 8006b7c:	20000c34 	.word	0x20000c34
 8006b80:	20000c2c 	.word	0x20000c2c

08006b84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <vTaskSuspendAll+0x18>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	4a03      	ldr	r2, [pc, #12]	; (8006b9c <vTaskSuspendAll+0x18>)
 8006b90:	6013      	str	r3, [r2, #0]
}
 8006b92:	bf00      	nop
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	20000c50 	.word	0x20000c50

08006ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bae:	4b42      	ldr	r3, [pc, #264]	; (8006cb8 <xTaskResumeAll+0x118>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <xTaskResumeAll+0x2c>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	603b      	str	r3, [r7, #0]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bcc:	f001 f8ea 	bl	8007da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bd0:	4b39      	ldr	r3, [pc, #228]	; (8006cb8 <xTaskResumeAll+0x118>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	4a38      	ldr	r2, [pc, #224]	; (8006cb8 <xTaskResumeAll+0x118>)
 8006bd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bda:	4b37      	ldr	r3, [pc, #220]	; (8006cb8 <xTaskResumeAll+0x118>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d162      	bne.n	8006ca8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006be2:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <xTaskResumeAll+0x11c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d05e      	beq.n	8006ca8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bea:	e02f      	b.n	8006c4c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bec:	4b34      	ldr	r3, [pc, #208]	; (8006cc0 <xTaskResumeAll+0x120>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3318      	adds	r3, #24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff f881 	bl	8005d00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff f87c 	bl	8005d00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <xTaskResumeAll+0x124>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d903      	bls.n	8006c1c <xTaskResumeAll+0x7c>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <xTaskResumeAll+0x124>)
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4a27      	ldr	r2, [pc, #156]	; (8006cc8 <xTaskResumeAll+0x128>)
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f7ff f807 	bl	8005c46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <xTaskResumeAll+0x12c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c46:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <xTaskResumeAll+0x130>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <xTaskResumeAll+0x120>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1cb      	bne.n	8006bec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c5a:	f000 fb5b 	bl	8007314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c5e:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <xTaskResumeAll+0x134>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d010      	beq.n	8006c8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c6a:	f000 f847 	bl	8006cfc <xTaskIncrementTick>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c74:	4b16      	ldr	r3, [pc, #88]	; (8006cd0 <xTaskResumeAll+0x130>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f1      	bne.n	8006c6a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006c86:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <xTaskResumeAll+0x134>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c8c:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <xTaskResumeAll+0x130>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d009      	beq.n	8006ca8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <xTaskResumeAll+0x138>)
 8006c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca8:	f001 f8ac 	bl	8007e04 <vPortExitCritical>

	return xAlreadyYielded;
 8006cac:	68bb      	ldr	r3, [r7, #8]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000c50 	.word	0x20000c50
 8006cbc:	20000c28 	.word	0x20000c28
 8006cc0:	20000be8 	.word	0x20000be8
 8006cc4:	20000c30 	.word	0x20000c30
 8006cc8:	20000758 	.word	0x20000758
 8006ccc:	20000754 	.word	0x20000754
 8006cd0:	20000c3c 	.word	0x20000c3c
 8006cd4:	20000c38 	.word	0x20000c38
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <xTaskGetTickCount+0x1c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ce8:	687b      	ldr	r3, [r7, #4]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000c2c 	.word	0x20000c2c

08006cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d06:	4b51      	ldr	r3, [pc, #324]	; (8006e4c <xTaskIncrementTick+0x150>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 808e 	bne.w	8006e2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d10:	4b4f      	ldr	r3, [pc, #316]	; (8006e50 <xTaskIncrementTick+0x154>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d18:	4a4d      	ldr	r2, [pc, #308]	; (8006e50 <xTaskIncrementTick+0x154>)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d120      	bne.n	8006d66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d24:	4b4b      	ldr	r3, [pc, #300]	; (8006e54 <xTaskIncrementTick+0x158>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	603b      	str	r3, [r7, #0]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <xTaskIncrementTick+0x46>
 8006d44:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <xTaskIncrementTick+0x158>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	4b43      	ldr	r3, [pc, #268]	; (8006e58 <xTaskIncrementTick+0x15c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a41      	ldr	r2, [pc, #260]	; (8006e54 <xTaskIncrementTick+0x158>)
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4a41      	ldr	r2, [pc, #260]	; (8006e58 <xTaskIncrementTick+0x15c>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	4b40      	ldr	r3, [pc, #256]	; (8006e5c <xTaskIncrementTick+0x160>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	4a3f      	ldr	r2, [pc, #252]	; (8006e5c <xTaskIncrementTick+0x160>)
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	f000 fad7 	bl	8007314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d66:	4b3e      	ldr	r3, [pc, #248]	; (8006e60 <xTaskIncrementTick+0x164>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d34e      	bcc.n	8006e0e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d70:	4b38      	ldr	r3, [pc, #224]	; (8006e54 <xTaskIncrementTick+0x158>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <xTaskIncrementTick+0x82>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <xTaskIncrementTick+0x84>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d84:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <xTaskIncrementTick+0x164>)
 8006d86:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8a:	601a      	str	r2, [r3, #0]
					break;
 8006d8c:	e03f      	b.n	8006e0e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d8e:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <xTaskIncrementTick+0x158>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d203      	bcs.n	8006dae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006da6:	4a2e      	ldr	r2, [pc, #184]	; (8006e60 <xTaskIncrementTick+0x164>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]
						break;
 8006dac:	e02f      	b.n	8006e0e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe ffa4 	bl	8005d00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3318      	adds	r3, #24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe ff9b 	bl	8005d00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dce:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <xTaskIncrementTick+0x168>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d903      	bls.n	8006dde <xTaskIncrementTick+0xe2>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	4a22      	ldr	r2, [pc, #136]	; (8006e64 <xTaskIncrementTick+0x168>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <xTaskIncrementTick+0x16c>)
 8006dec:	441a      	add	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe ff26 	bl	8005c46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <xTaskIncrementTick+0x170>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d3b3      	bcc.n	8006d70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e0c:	e7b0      	b.n	8006d70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <xTaskIncrementTick+0x170>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4914      	ldr	r1, [pc, #80]	; (8006e68 <xTaskIncrementTick+0x16c>)
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d907      	bls.n	8006e36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e004      	b.n	8006e36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e2c:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <xTaskIncrementTick+0x174>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <xTaskIncrementTick+0x174>)
 8006e34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e36:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <xTaskIncrementTick+0x178>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e42:	697b      	ldr	r3, [r7, #20]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000c50 	.word	0x20000c50
 8006e50:	20000c2c 	.word	0x20000c2c
 8006e54:	20000be0 	.word	0x20000be0
 8006e58:	20000be4 	.word	0x20000be4
 8006e5c:	20000c40 	.word	0x20000c40
 8006e60:	20000c48 	.word	0x20000c48
 8006e64:	20000c30 	.word	0x20000c30
 8006e68:	20000758 	.word	0x20000758
 8006e6c:	20000754 	.word	0x20000754
 8006e70:	20000c38 	.word	0x20000c38
 8006e74:	20000c3c 	.word	0x20000c3c

08006e78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <vTaskSwitchContext+0xa8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e86:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <vTaskSwitchContext+0xac>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e8c:	e041      	b.n	8006f12 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006e8e:	4b25      	ldr	r3, [pc, #148]	; (8006f24 <vTaskSwitchContext+0xac>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e94:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <vTaskSwitchContext+0xb0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e010      	b.n	8006ebe <vTaskSwitchContext+0x46>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	607b      	str	r3, [r7, #4]
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <vTaskSwitchContext+0x3e>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	491b      	ldr	r1, [pc, #108]	; (8006f2c <vTaskSwitchContext+0xb4>)
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0e4      	beq.n	8006e9c <vTaskSwitchContext+0x24>
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <vTaskSwitchContext+0xb4>)
 8006ede:	4413      	add	r3, r2
 8006ee0:	60bb      	str	r3, [r7, #8]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d104      	bne.n	8006f02 <vTaskSwitchContext+0x8a>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	605a      	str	r2, [r3, #4]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <vTaskSwitchContext+0xb8>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	4a06      	ldr	r2, [pc, #24]	; (8006f28 <vTaskSwitchContext+0xb0>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6013      	str	r3, [r2, #0]
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20000c50 	.word	0x20000c50
 8006f24:	20000c3c 	.word	0x20000c3c
 8006f28:	20000c30 	.word	0x20000c30
 8006f2c:	20000758 	.word	0x20000758
 8006f30:	20000754 	.word	0x20000754

08006f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60fb      	str	r3, [r7, #12]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <vTaskPlaceOnEventList+0x44>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3318      	adds	r3, #24
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fe fe93 	bl	8005c8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f68:	2101      	movs	r1, #1
 8006f6a:	6838      	ldr	r0, [r7, #0]
 8006f6c:	f000 fa84 	bl	8007478 <prvAddCurrentTaskToDelayedList>
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000754 	.word	0x20000754

08006f7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	617b      	str	r3, [r7, #20]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3318      	adds	r3, #24
 8006faa:	4619      	mov	r1, r3
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7fe fe4a 	bl	8005c46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	68b8      	ldr	r0, [r7, #8]
 8006fc2:	f000 fa59 	bl	8007478 <prvAddCurrentTaskToDelayedList>
	}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000754 	.word	0x20000754

08006fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	60fb      	str	r3, [r7, #12]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3318      	adds	r3, #24
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fe7b 	bl	8005d00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <xTaskRemoveFromEventList+0xb0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d11d      	bne.n	800704e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fe72 	bl	8005d00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <xTaskRemoveFromEventList+0xb4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d903      	bls.n	8007030 <xTaskRemoveFromEventList+0x5c>
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a16      	ldr	r2, [pc, #88]	; (8007088 <xTaskRemoveFromEventList+0xb4>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4a13      	ldr	r2, [pc, #76]	; (800708c <xTaskRemoveFromEventList+0xb8>)
 800703e:	441a      	add	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fe fdfd 	bl	8005c46 <vListInsertEnd>
 800704c:	e005      	b.n	800705a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3318      	adds	r3, #24
 8007052:	4619      	mov	r1, r3
 8007054:	480e      	ldr	r0, [pc, #56]	; (8007090 <xTaskRemoveFromEventList+0xbc>)
 8007056:	f7fe fdf6 	bl	8005c46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <xTaskRemoveFromEventList+0xc0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	429a      	cmp	r2, r3
 8007066:	d905      	bls.n	8007074 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <xTaskRemoveFromEventList+0xc4>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e001      	b.n	8007078 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007078:	697b      	ldr	r3, [r7, #20]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000c50 	.word	0x20000c50
 8007088:	20000c30 	.word	0x20000c30
 800708c:	20000758 	.word	0x20000758
 8007090:	20000be8 	.word	0x20000be8
 8007094:	20000754 	.word	0x20000754
 8007098:	20000c3c 	.word	0x20000c3c

0800709c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <vTaskInternalSetTimeOutState+0x24>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <vTaskInternalSetTimeOutState+0x28>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	605a      	str	r2, [r3, #4]
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	20000c40 	.word	0x20000c40
 80070c4:	20000c2c 	.word	0x20000c2c

080070c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	613b      	str	r3, [r7, #16]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	60fb      	str	r3, [r7, #12]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800710a:	f000 fe4b 	bl	8007da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <xTaskCheckForTimeOut+0xbc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d102      	bne.n	800712e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007128:	2300      	movs	r3, #0
 800712a:	61fb      	str	r3, [r7, #28]
 800712c:	e023      	b.n	8007176 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	4b15      	ldr	r3, [pc, #84]	; (8007188 <xTaskCheckForTimeOut+0xc0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d007      	beq.n	800714a <xTaskCheckForTimeOut+0x82>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	429a      	cmp	r2, r3
 8007142:	d302      	bcc.n	800714a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	e015      	b.n	8007176 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	429a      	cmp	r2, r3
 8007152:	d20b      	bcs.n	800716c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ff9b 	bl	800709c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
 800716a:	e004      	b.n	8007176 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007172:	2301      	movs	r3, #1
 8007174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007176:	f000 fe45 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 800717a:	69fb      	ldr	r3, [r7, #28]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000c2c 	.word	0x20000c2c
 8007188:	20000c40 	.word	0x20000c40

0800718c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007190:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <vTaskMissedYield+0x14>)
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]
}
 8007196:	bf00      	nop
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	20000c3c 	.word	0x20000c3c

080071a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071ac:	f000 f854 	bl	8007258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <prvIdleTask+0x2c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d907      	bls.n	80071c8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80071b8:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <prvIdleTask+0x30>)
 80071ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80071c8:	f7f9 fabe 	bl	8000748 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80071cc:	e7ee      	b.n	80071ac <prvIdleTask+0x8>
 80071ce:	bf00      	nop
 80071d0:	20000758 	.word	0x20000758
 80071d4:	e000ed04 	.word	0xe000ed04

080071d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071de:	2300      	movs	r3, #0
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e00c      	b.n	80071fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4a12      	ldr	r2, [pc, #72]	; (8007238 <prvInitialiseTaskLists+0x60>)
 80071f0:	4413      	add	r3, r2
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fcfa 	bl	8005bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3301      	adds	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b37      	cmp	r3, #55	; 0x37
 8007202:	d9ef      	bls.n	80071e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007204:	480d      	ldr	r0, [pc, #52]	; (800723c <prvInitialiseTaskLists+0x64>)
 8007206:	f7fe fcf1 	bl	8005bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800720a:	480d      	ldr	r0, [pc, #52]	; (8007240 <prvInitialiseTaskLists+0x68>)
 800720c:	f7fe fcee 	bl	8005bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007210:	480c      	ldr	r0, [pc, #48]	; (8007244 <prvInitialiseTaskLists+0x6c>)
 8007212:	f7fe fceb 	bl	8005bec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007216:	480c      	ldr	r0, [pc, #48]	; (8007248 <prvInitialiseTaskLists+0x70>)
 8007218:	f7fe fce8 	bl	8005bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800721c:	480b      	ldr	r0, [pc, #44]	; (800724c <prvInitialiseTaskLists+0x74>)
 800721e:	f7fe fce5 	bl	8005bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <prvInitialiseTaskLists+0x78>)
 8007224:	4a05      	ldr	r2, [pc, #20]	; (800723c <prvInitialiseTaskLists+0x64>)
 8007226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <prvInitialiseTaskLists+0x7c>)
 800722a:	4a05      	ldr	r2, [pc, #20]	; (8007240 <prvInitialiseTaskLists+0x68>)
 800722c:	601a      	str	r2, [r3, #0]
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000758 	.word	0x20000758
 800723c:	20000bb8 	.word	0x20000bb8
 8007240:	20000bcc 	.word	0x20000bcc
 8007244:	20000be8 	.word	0x20000be8
 8007248:	20000bfc 	.word	0x20000bfc
 800724c:	20000c14 	.word	0x20000c14
 8007250:	20000be0 	.word	0x20000be0
 8007254:	20000be4 	.word	0x20000be4

08007258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800725e:	e019      	b.n	8007294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007260:	f000 fda0 	bl	8007da4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007264:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <prvCheckTasksWaitingTermination+0x50>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe fd45 	bl	8005d00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <prvCheckTasksWaitingTermination+0x54>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3b01      	subs	r3, #1
 800727c:	4a0b      	ldr	r2, [pc, #44]	; (80072ac <prvCheckTasksWaitingTermination+0x54>)
 800727e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <prvCheckTasksWaitingTermination+0x58>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3b01      	subs	r3, #1
 8007286:	4a0a      	ldr	r2, [pc, #40]	; (80072b0 <prvCheckTasksWaitingTermination+0x58>)
 8007288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800728a:	f000 fdbb 	bl	8007e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f810 	bl	80072b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007294:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <prvCheckTasksWaitingTermination+0x58>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e1      	bne.n	8007260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000bfc 	.word	0x20000bfc
 80072ac:	20000c28 	.word	0x20000c28
 80072b0:	20000c10 	.word	0x20000c10

080072b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 ff50 	bl	8008170 <vPortFree>
				vPortFree( pxTCB );
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 ff4d 	bl	8008170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072d6:	e018      	b.n	800730a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d103      	bne.n	80072ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 ff44 	bl	8008170 <vPortFree>
	}
 80072e8:	e00f      	b.n	800730a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d00a      	beq.n	800730a <prvDeleteTCB+0x56>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	60fb      	str	r3, [r7, #12]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <prvDeleteTCB+0x54>
	}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731a:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <prvResetNextTaskUnblockTime+0x44>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <prvResetNextTaskUnblockTime+0x14>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <prvResetNextTaskUnblockTime+0x16>
 8007328:	2300      	movs	r3, #0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800732e:	4b0b      	ldr	r3, [pc, #44]	; (800735c <prvResetNextTaskUnblockTime+0x48>)
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007336:	e008      	b.n	800734a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <prvResetNextTaskUnblockTime+0x44>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4a05      	ldr	r2, [pc, #20]	; (800735c <prvResetNextTaskUnblockTime+0x48>)
 8007348:	6013      	str	r3, [r2, #0]
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	20000be0 	.word	0x20000be0
 800735c:	20000c48 	.word	0x20000c48

08007360 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <xTaskGetSchedulerState+0x34>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800736e:	2301      	movs	r3, #1
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	e008      	b.n	8007386 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007374:	4b08      	ldr	r3, [pc, #32]	; (8007398 <xTaskGetSchedulerState+0x38>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800737c:	2302      	movs	r3, #2
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	e001      	b.n	8007386 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007382:	2300      	movs	r3, #0
 8007384:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007386:	687b      	ldr	r3, [r7, #4]
	}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	20000c34 	.word	0x20000c34
 8007398:	20000c50 	.word	0x20000c50

0800739c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d056      	beq.n	8007460 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073b2:	4b2e      	ldr	r3, [pc, #184]	; (800746c <xTaskPriorityDisinherit+0xd0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d00a      	beq.n	80073d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	60fb      	str	r3, [r7, #12]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	60bb      	str	r3, [r7, #8]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f4:	1e5a      	subs	r2, r3, #1
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007402:	429a      	cmp	r2, r3
 8007404:	d02c      	beq.n	8007460 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	2b00      	cmp	r3, #0
 800740c:	d128      	bne.n	8007460 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	3304      	adds	r3, #4
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fc74 	bl	8005d00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <xTaskPriorityDisinherit+0xd4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d903      	bls.n	8007440 <xTaskPriorityDisinherit+0xa4>
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a0c      	ldr	r2, [pc, #48]	; (8007470 <xTaskPriorityDisinherit+0xd4>)
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4a09      	ldr	r2, [pc, #36]	; (8007474 <xTaskPriorityDisinherit+0xd8>)
 800744e:	441a      	add	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f7fe fbf5 	bl	8005c46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007460:	697b      	ldr	r3, [r7, #20]
	}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000754 	.word	0x20000754
 8007470:	20000c30 	.word	0x20000c30
 8007474:	20000758 	.word	0x20000758

08007478 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007482:	4b21      	ldr	r3, [pc, #132]	; (8007508 <prvAddCurrentTaskToDelayedList+0x90>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007488:	4b20      	ldr	r3, [pc, #128]	; (800750c <prvAddCurrentTaskToDelayedList+0x94>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3304      	adds	r3, #4
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fc36 	bl	8005d00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749a:	d10a      	bne.n	80074b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a2:	4b1a      	ldr	r3, [pc, #104]	; (800750c <prvAddCurrentTaskToDelayedList+0x94>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4819      	ldr	r0, [pc, #100]	; (8007510 <prvAddCurrentTaskToDelayedList+0x98>)
 80074ac:	f7fe fbcb 	bl	8005c46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074b0:	e026      	b.n	8007500 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4413      	add	r3, r2
 80074b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074ba:	4b14      	ldr	r3, [pc, #80]	; (800750c <prvAddCurrentTaskToDelayedList+0x94>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d209      	bcs.n	80074de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ca:	4b12      	ldr	r3, [pc, #72]	; (8007514 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4b0f      	ldr	r3, [pc, #60]	; (800750c <prvAddCurrentTaskToDelayedList+0x94>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7fe fbd9 	bl	8005c8e <vListInsert>
}
 80074dc:	e010      	b.n	8007500 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <prvAddCurrentTaskToDelayedList+0x94>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fe fbcf 	bl	8005c8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <prvAddCurrentTaskToDelayedList+0xa4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d202      	bcs.n	8007500 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074fa:	4a08      	ldr	r2, [pc, #32]	; (800751c <prvAddCurrentTaskToDelayedList+0xa4>)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6013      	str	r3, [r2, #0]
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000c2c 	.word	0x20000c2c
 800750c:	20000754 	.word	0x20000754
 8007510:	20000c14 	.word	0x20000c14
 8007514:	20000be4 	.word	0x20000be4
 8007518:	20000be0 	.word	0x20000be0
 800751c:	20000c48 	.word	0x20000c48

08007520 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08a      	sub	sp, #40	; 0x28
 8007524:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800752a:	f000 facb 	bl	8007ac4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800752e:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <xTimerCreateTimerTask+0x80>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d021      	beq.n	800757a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800753e:	1d3a      	adds	r2, r7, #4
 8007540:	f107 0108 	add.w	r1, r7, #8
 8007544:	f107 030c 	add.w	r3, r7, #12
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fb35 	bl	8005bb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	9202      	str	r2, [sp, #8]
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	2302      	movs	r3, #2
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	2300      	movs	r3, #0
 800755e:	460a      	mov	r2, r1
 8007560:	4910      	ldr	r1, [pc, #64]	; (80075a4 <xTimerCreateTimerTask+0x84>)
 8007562:	4811      	ldr	r0, [pc, #68]	; (80075a8 <xTimerCreateTimerTask+0x88>)
 8007564:	f7ff f8dc 	bl	8006720 <xTaskCreateStatic>
 8007568:	4603      	mov	r3, r0
 800756a:	4a10      	ldr	r2, [pc, #64]	; (80075ac <xTimerCreateTimerTask+0x8c>)
 800756c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800756e:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <xTimerCreateTimerTask+0x8c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007576:	2301      	movs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	613b      	str	r3, [r7, #16]
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007596:	697b      	ldr	r3, [r7, #20]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000c84 	.word	0x20000c84
 80075a4:	080094ec 	.word	0x080094ec
 80075a8:	080076cd 	.word	0x080076cd
 80075ac:	20000c88 	.word	0x20000c88

080075b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	; 0x28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075be:	2300      	movs	r3, #0
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xTimerGenericCommand+0x2e>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	623b      	str	r3, [r7, #32]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <xTimerGenericCommand+0x98>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d02a      	beq.n	800763c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	dc18      	bgt.n	800762a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075f8:	f7ff feb2 	bl	8007360 <xTaskGetSchedulerState>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d109      	bne.n	8007616 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007602:	4b11      	ldr	r3, [pc, #68]	; (8007648 <xTimerGenericCommand+0x98>)
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	f107 0110 	add.w	r1, r7, #16
 800760a:	2300      	movs	r3, #0
 800760c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760e:	f7fe fca3 	bl	8005f58 <xQueueGenericSend>
 8007612:	6278      	str	r0, [r7, #36]	; 0x24
 8007614:	e012      	b.n	800763c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <xTimerGenericCommand+0x98>)
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	f107 0110 	add.w	r1, r7, #16
 800761e:	2300      	movs	r3, #0
 8007620:	2200      	movs	r2, #0
 8007622:	f7fe fc99 	bl	8005f58 <xQueueGenericSend>
 8007626:	6278      	str	r0, [r7, #36]	; 0x24
 8007628:	e008      	b.n	800763c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800762a:	4b07      	ldr	r3, [pc, #28]	; (8007648 <xTimerGenericCommand+0x98>)
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f107 0110 	add.w	r1, r7, #16
 8007632:	2300      	movs	r3, #0
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	f7fe fd8d 	bl	8006154 <xQueueGenericSendFromISR>
 800763a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	; 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000c84 	.word	0x20000c84

0800764c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007656:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <prvProcessExpiredTimer+0x7c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	3304      	adds	r3, #4
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe fb4b 	bl	8005d00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d122      	bne.n	80076b8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	18d1      	adds	r1, r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	6978      	ldr	r0, [r7, #20]
 8007680:	f000 f8c8 	bl	8007814 <prvInsertTimerInActiveList>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d016      	beq.n	80076b8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800768a:	2300      	movs	r3, #0
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	2300      	movs	r3, #0
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	2100      	movs	r1, #0
 8007694:	6978      	ldr	r0, [r7, #20]
 8007696:	f7ff ff8b 	bl	80075b0 <xTimerGenericCommand>
 800769a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60fb      	str	r3, [r7, #12]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	6978      	ldr	r0, [r7, #20]
 80076be:	4798      	blx	r3
}
 80076c0:	bf00      	nop
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000c7c 	.word	0x20000c7c

080076cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076d4:	f107 0308 	add.w	r3, r7, #8
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 f857 	bl	800778c <prvGetNextExpireTime>
 80076de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4619      	mov	r1, r3
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f803 	bl	80076f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076ea:	f000 f8d5 	bl	8007898 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076ee:	e7f1      	b.n	80076d4 <prvTimerTask+0x8>

080076f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076fa:	f7ff fa43 	bl	8006b84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076fe:	f107 0308 	add.w	r3, r7, #8
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f866 	bl	80077d4 <prvSampleTimeNow>
 8007708:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d130      	bne.n	8007772 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <prvProcessTimerOrBlockTask+0x3c>
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	429a      	cmp	r2, r3
 800771c:	d806      	bhi.n	800772c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800771e:	f7ff fa3f 	bl	8006ba0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ff91 	bl	800764c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800772a:	e024      	b.n	8007776 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007732:	4b13      	ldr	r3, [pc, #76]	; (8007780 <prvProcessTimerOrBlockTask+0x90>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <prvProcessTimerOrBlockTask+0x94>)
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	4619      	mov	r1, r3
 8007752:	f7fe ffb1 	bl	80066b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007756:	f7ff fa23 	bl	8006ba0 <xTaskResumeAll>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <prvProcessTimerOrBlockTask+0x98>)
 8007762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
}
 8007770:	e001      	b.n	8007776 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007772:	f7ff fa15 	bl	8006ba0 <xTaskResumeAll>
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000c80 	.word	0x20000c80
 8007784:	20000c84 	.word	0x20000c84
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <prvGetNextExpireTime+0x44>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077b2:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <prvGetNextExpireTime+0x44>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	e001      	b.n	80077c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077c2:	68fb      	ldr	r3, [r7, #12]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	20000c7c 	.word	0x20000c7c

080077d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077dc:	f7ff fa7e 	bl	8006cdc <xTaskGetTickCount>
 80077e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077e2:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <prvSampleTimeNow+0x3c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d205      	bcs.n	80077f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077ec:	f000 f908 	bl	8007a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	e002      	b.n	80077fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077fe:	4a04      	ldr	r2, [pc, #16]	; (8007810 <prvSampleTimeNow+0x3c>)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007804:	68fb      	ldr	r3, [r7, #12]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000c8c 	.word	0x20000c8c

08007814 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d812      	bhi.n	8007860 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	429a      	cmp	r2, r3
 8007846:	d302      	bcc.n	800784e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e01b      	b.n	8007886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800784e:	4b10      	ldr	r3, [pc, #64]	; (8007890 <prvInsertTimerInActiveList+0x7c>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3304      	adds	r3, #4
 8007856:	4619      	mov	r1, r3
 8007858:	4610      	mov	r0, r2
 800785a:	f7fe fa18 	bl	8005c8e <vListInsert>
 800785e:	e012      	b.n	8007886 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d206      	bcs.n	8007876 <prvInsertTimerInActiveList+0x62>
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e007      	b.n	8007886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007876:	4b07      	ldr	r3, [pc, #28]	; (8007894 <prvInsertTimerInActiveList+0x80>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3304      	adds	r3, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f7fe fa04 	bl	8005c8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007886:	697b      	ldr	r3, [r7, #20]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20000c80 	.word	0x20000c80
 8007894:	20000c7c 	.word	0x20000c7c

08007898 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08e      	sub	sp, #56	; 0x38
 800789c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800789e:	e09d      	b.n	80079dc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da18      	bge.n	80078d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078a6:	1d3b      	adds	r3, r7, #4
 80078a8:	3304      	adds	r3, #4
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	61fb      	str	r3, [r7, #28]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ce:	6850      	ldr	r0, [r2, #4]
 80078d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d2:	6892      	ldr	r2, [r2, #8]
 80078d4:	4611      	mov	r1, r2
 80078d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	db7d      	blt.n	80079da <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	3304      	adds	r3, #4
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fa06 	bl	8005d00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078f4:	463b      	mov	r3, r7
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff ff6c 	bl	80077d4 <prvSampleTimeNow>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b09      	cmp	r3, #9
 8007902:	d86b      	bhi.n	80079dc <prvProcessReceivedCommands+0x144>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <prvProcessReceivedCommands+0x74>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007935 	.word	0x08007935
 8007910:	08007935 	.word	0x08007935
 8007914:	08007935 	.word	0x08007935
 8007918:	080079dd 	.word	0x080079dd
 800791c:	08007991 	.word	0x08007991
 8007920:	080079c9 	.word	0x080079c9
 8007924:	08007935 	.word	0x08007935
 8007928:	08007935 	.word	0x08007935
 800792c:	080079dd 	.word	0x080079dd
 8007930:	08007991 	.word	0x08007991
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	18d1      	adds	r1, r2, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007942:	f7ff ff67 	bl	8007814 <prvInsertTimerInActiveList>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d047      	beq.n	80079dc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007952:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d13f      	bne.n	80079dc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	441a      	add	r2, r3
 8007964:	2300      	movs	r3, #0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	2100      	movs	r1, #0
 800796c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796e:	f7ff fe1f 	bl	80075b0 <xTimerGenericCommand>
 8007972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d130      	bne.n	80079dc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	61bb      	str	r3, [r7, #24]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	617b      	str	r3, [r7, #20]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	18d1      	adds	r1, r2, r3
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c2:	f7ff ff27 	bl	8007814 <prvInsertTimerInActiveList>
					break;
 80079c6:	e009      	b.n	80079dc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80079d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d4:	f000 fbcc 	bl	8008170 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079d8:	e000      	b.n	80079dc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079dc:	4b07      	ldr	r3, [pc, #28]	; (80079fc <prvProcessReceivedCommands+0x164>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	1d39      	adds	r1, r7, #4
 80079e2:	2200      	movs	r2, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fc4d 	bl	8006284 <xQueueReceive>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f47f af57 	bne.w	80078a0 <prvProcessReceivedCommands+0x8>
	}
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	3730      	adds	r7, #48	; 0x30
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000c84 	.word	0x20000c84

08007a00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a06:	e045      	b.n	8007a94 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a08:	4b2c      	ldr	r3, [pc, #176]	; (8007abc <prvSwitchTimerLists+0xbc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a12:	4b2a      	ldr	r3, [pc, #168]	; (8007abc <prvSwitchTimerLists+0xbc>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe f96d 	bl	8005d00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d12e      	bne.n	8007a94 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d90e      	bls.n	8007a66 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a54:	4b19      	ldr	r3, [pc, #100]	; (8007abc <prvSwitchTimerLists+0xbc>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f7fe f915 	bl	8005c8e <vListInsert>
 8007a64:	e016      	b.n	8007a94 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a66:	2300      	movs	r3, #0
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fd9d 	bl	80075b0 <xTimerGenericCommand>
 8007a76:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	603b      	str	r3, [r7, #0]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <prvSwitchTimerLists+0xbc>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1b4      	bne.n	8007a08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <prvSwitchTimerLists+0xbc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007aa4:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a04      	ldr	r2, [pc, #16]	; (8007abc <prvSwitchTimerLists+0xbc>)
 8007aaa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007aac:	4a04      	ldr	r2, [pc, #16]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	6013      	str	r3, [r2, #0]
}
 8007ab2:	bf00      	nop
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000c7c 	.word	0x20000c7c
 8007ac0:	20000c80 	.word	0x20000c80

08007ac4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007aca:	f000 f96b 	bl	8007da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ace:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d120      	bne.n	8007b18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ad6:	4814      	ldr	r0, [pc, #80]	; (8007b28 <prvCheckForValidListAndQueue+0x64>)
 8007ad8:	f7fe f888 	bl	8005bec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007adc:	4813      	ldr	r0, [pc, #76]	; (8007b2c <prvCheckForValidListAndQueue+0x68>)
 8007ade:	f7fe f885 	bl	8005bec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ae2:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <prvCheckForValidListAndQueue+0x6c>)
 8007ae4:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <prvCheckForValidListAndQueue+0x64>)
 8007ae6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ae8:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <prvCheckForValidListAndQueue+0x70>)
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <prvCheckForValidListAndQueue+0x68>)
 8007aec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007aee:	2300      	movs	r3, #0
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4b11      	ldr	r3, [pc, #68]	; (8007b38 <prvCheckForValidListAndQueue+0x74>)
 8007af4:	4a11      	ldr	r2, [pc, #68]	; (8007b3c <prvCheckForValidListAndQueue+0x78>)
 8007af6:	2110      	movs	r1, #16
 8007af8:	200a      	movs	r0, #10
 8007afa:	f7fe f993 	bl	8005e24 <xQueueGenericCreateStatic>
 8007afe:	4603      	mov	r3, r0
 8007b00:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007b02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <prvCheckForValidListAndQueue+0x60>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	490b      	ldr	r1, [pc, #44]	; (8007b40 <prvCheckForValidListAndQueue+0x7c>)
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fda6 	bl	8006664 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b18:	f000 f974 	bl	8007e04 <vPortExitCritical>
}
 8007b1c:	bf00      	nop
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000c84 	.word	0x20000c84
 8007b28:	20000c54 	.word	0x20000c54
 8007b2c:	20000c68 	.word	0x20000c68
 8007b30:	20000c7c 	.word	0x20000c7c
 8007b34:	20000c80 	.word	0x20000c80
 8007b38:	20000d30 	.word	0x20000d30
 8007b3c:	20000c90 	.word	0x20000c90
 8007b40:	080094f4 	.word	0x080094f4

08007b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3b04      	subs	r3, #4
 8007b54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b04      	subs	r3, #4
 8007b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f023 0201 	bic.w	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3b04      	subs	r3, #4
 8007b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b74:	4a0c      	ldr	r2, [pc, #48]	; (8007ba8 <pxPortInitialiseStack+0x64>)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3b14      	subs	r3, #20
 8007b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3b04      	subs	r3, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f06f 0202 	mvn.w	r2, #2
 8007b92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3b20      	subs	r3, #32
 8007b98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	08007bad 	.word	0x08007bad

08007bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <prvTaskExitError+0x54>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d00a      	beq.n	8007bd6 <prvTaskExitError+0x2a>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	60fb      	str	r3, [r7, #12]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <prvTaskExitError+0x28>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60bb      	str	r3, [r7, #8]
}
 8007be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bea:	bf00      	nop
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0fc      	beq.n	8007bec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	2000000c 	.word	0x2000000c
	...

08007c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <pxCurrentTCBConst2>)
 8007c12:	6819      	ldr	r1, [r3, #0]
 8007c14:	6808      	ldr	r0, [r1, #0]
 8007c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	f380 8809 	msr	PSP, r0
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8811 	msr	BASEPRI, r0
 8007c2a:	4770      	bx	lr
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst2>:
 8007c30:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c38:	4808      	ldr	r0, [pc, #32]	; (8007c5c <prvPortStartFirstTask+0x24>)
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	6800      	ldr	r0, [r0, #0]
 8007c3e:	f380 8808 	msr	MSP, r0
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8814 	msr	CONTROL, r0
 8007c4a:	b662      	cpsie	i
 8007c4c:	b661      	cpsie	f
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	df00      	svc	0
 8007c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c5a:	bf00      	nop
 8007c5c:	e000ed08 	.word	0xe000ed08

08007c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c66:	4b46      	ldr	r3, [pc, #280]	; (8007d80 <xPortStartScheduler+0x120>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a46      	ldr	r2, [pc, #280]	; (8007d84 <xPortStartScheduler+0x124>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10a      	bne.n	8007c86 <xPortStartScheduler+0x26>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	613b      	str	r3, [r7, #16]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c86:	4b3e      	ldr	r3, [pc, #248]	; (8007d80 <xPortStartScheduler+0x120>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <xPortStartScheduler+0x128>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10a      	bne.n	8007ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60fb      	str	r3, [r7, #12]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ca6:	4b39      	ldr	r3, [pc, #228]	; (8007d8c <xPortStartScheduler+0x12c>)
 8007ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	22ff      	movs	r2, #255	; 0xff
 8007cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	4b31      	ldr	r3, [pc, #196]	; (8007d90 <xPortStartScheduler+0x130>)
 8007ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd4:	e009      	b.n	8007cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cd6:	4b2f      	ldr	r3, [pc, #188]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d0ef      	beq.n	8007cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cf6:	4b27      	ldr	r3, [pc, #156]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1c3 0307 	rsb	r3, r3, #7
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d00a      	beq.n	8007d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60bb      	str	r3, [r7, #8]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d18:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a14      	ldr	r2, [pc, #80]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d4e:	f000 f8dd 	bl	8007f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d52:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <xPortStartScheduler+0x13c>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d58:	f000 f8fc 	bl	8007f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <xPortStartScheduler+0x140>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0f      	ldr	r2, [pc, #60]	; (8007da0 <xPortStartScheduler+0x140>)
 8007d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d68:	f7ff ff66 	bl	8007c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d6c:	f7ff f884 	bl	8006e78 <vTaskSwitchContext>
	prvTaskExitError();
 8007d70:	f7ff ff1c 	bl	8007bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	e000ed00 	.word	0xe000ed00
 8007d84:	410fc271 	.word	0x410fc271
 8007d88:	410fc270 	.word	0x410fc270
 8007d8c:	e000e400 	.word	0xe000e400
 8007d90:	20000d80 	.word	0x20000d80
 8007d94:	20000d84 	.word	0x20000d84
 8007d98:	e000ed20 	.word	0xe000ed20
 8007d9c:	2000000c 	.word	0x2000000c
 8007da0:	e000ef34 	.word	0xe000ef34

08007da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	607b      	str	r3, [r7, #4]
}
 8007dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	4a0d      	ldr	r2, [pc, #52]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dc8:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10f      	bne.n	8007df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <vPortEnterCritical+0x5c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	603b      	str	r3, [r7, #0]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <vPortEnterCritical+0x4a>
	}
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	2000000c 	.word	0x2000000c
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <vPortExitCritical+0x50>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <vPortExitCritical+0x24>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	607b      	str	r3, [r7, #4]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <vPortExitCritical+0x50>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <vPortExitCritical+0x50>)
 8007e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e32:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <vPortExitCritical+0x50>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <vPortExitCritical+0x42>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f383 8811 	msr	BASEPRI, r3
}
 8007e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	2000000c 	.word	0x2000000c
	...

08007e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e60:	f3ef 8009 	mrs	r0, PSP
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	4b15      	ldr	r3, [pc, #84]	; (8007ec0 <pxCurrentTCBConst>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	f01e 0f10 	tst.w	lr, #16
 8007e70:	bf08      	it	eq
 8007e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7a:	6010      	str	r0, [r2, #0]
 8007e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e84:	f380 8811 	msr	BASEPRI, r0
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f7fe fff2 	bl	8006e78 <vTaskSwitchContext>
 8007e94:	f04f 0000 	mov.w	r0, #0
 8007e98:	f380 8811 	msr	BASEPRI, r0
 8007e9c:	bc09      	pop	{r0, r3}
 8007e9e:	6819      	ldr	r1, [r3, #0]
 8007ea0:	6808      	ldr	r0, [r1, #0]
 8007ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea6:	f01e 0f10 	tst.w	lr, #16
 8007eaa:	bf08      	it	eq
 8007eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007eb0:	f380 8809 	msr	PSP, r0
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst>:
 8007ec0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	607b      	str	r3, [r7, #4]
}
 8007ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ee2:	f7fe ff0b 	bl	8006cfc <xTaskIncrementTick>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <SysTick_Handler+0x40>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f383 8811 	msr	BASEPRI, r3
}
 8007efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <vPortSetupTimerInterrupt+0x34>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <vPortSetupTimerInterrupt+0x38>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <vPortSetupTimerInterrupt+0x3c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <vPortSetupTimerInterrupt+0x40>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <vPortSetupTimerInterrupt+0x44>)
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f2e:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <vPortSetupTimerInterrupt+0x34>)
 8007f30:	2207      	movs	r2, #7
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	e000e010 	.word	0xe000e010
 8007f44:	e000e018 	.word	0xe000e018
 8007f48:	20000000 	.word	0x20000000
 8007f4c:	10624dd3 	.word	0x10624dd3
 8007f50:	e000e014 	.word	0xe000e014

08007f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f64 <vPortEnableVFP+0x10>
 8007f58:	6801      	ldr	r1, [r0, #0]
 8007f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f5e:	6001      	str	r1, [r0, #0]
 8007f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f62:	bf00      	nop
 8007f64:	e000ed88 	.word	0xe000ed88

08007f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f6e:	f3ef 8305 	mrs	r3, IPSR
 8007f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b0f      	cmp	r3, #15
 8007f78:	d914      	bls.n	8007fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <vPortValidateInterruptPriority+0x70>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f84:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <vPortValidateInterruptPriority+0x74>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	7afa      	ldrb	r2, [r7, #11]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d20a      	bcs.n	8007fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	607b      	str	r3, [r7, #4]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <vPortValidateInterruptPriority+0x78>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <vPortValidateInterruptPriority+0x7c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d90a      	bls.n	8007fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	603b      	str	r3, [r7, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <vPortValidateInterruptPriority+0x60>
	}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	e000e3f0 	.word	0xe000e3f0
 8007fdc:	20000d80 	.word	0x20000d80
 8007fe0:	e000ed0c 	.word	0xe000ed0c
 8007fe4:	20000d84 	.word	0x20000d84

08007fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ff4:	f7fe fdc6 	bl	8006b84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ff8:	4b58      	ldr	r3, [pc, #352]	; (800815c <pvPortMalloc+0x174>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008000:	f000 f910 	bl	8008224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008004:	4b56      	ldr	r3, [pc, #344]	; (8008160 <pvPortMalloc+0x178>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 808e 	bne.w	800812e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01d      	beq.n	8008054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008018:	2208      	movs	r2, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f023 0307 	bic.w	r3, r3, #7
 8008030:	3308      	adds	r3, #8
 8008032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <pvPortMalloc+0x6c>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	617b      	str	r3, [r7, #20]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d069      	beq.n	800812e <pvPortMalloc+0x146>
 800805a:	4b42      	ldr	r3, [pc, #264]	; (8008164 <pvPortMalloc+0x17c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d864      	bhi.n	800812e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008064:	4b40      	ldr	r3, [pc, #256]	; (8008168 <pvPortMalloc+0x180>)
 8008066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008068:	4b3f      	ldr	r3, [pc, #252]	; (8008168 <pvPortMalloc+0x180>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806e:	e004      	b.n	800807a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <pvPortMalloc+0xa4>
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f1      	bne.n	8008070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800808c:	4b33      	ldr	r3, [pc, #204]	; (800815c <pvPortMalloc+0x174>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	429a      	cmp	r2, r3
 8008094:	d04b      	beq.n	800812e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2208      	movs	r2, #8
 800809c:	4413      	add	r3, r2
 800809e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	2308      	movs	r3, #8
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d91f      	bls.n	80080f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	613b      	str	r3, [r7, #16]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080f2:	69b8      	ldr	r0, [r7, #24]
 80080f4:	f000 f8f8 	bl	80082e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080f8:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <pvPortMalloc+0x17c>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	4a18      	ldr	r2, [pc, #96]	; (8008164 <pvPortMalloc+0x17c>)
 8008104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008106:	4b17      	ldr	r3, [pc, #92]	; (8008164 <pvPortMalloc+0x17c>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b18      	ldr	r3, [pc, #96]	; (800816c <pvPortMalloc+0x184>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d203      	bcs.n	800811a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008112:	4b14      	ldr	r3, [pc, #80]	; (8008164 <pvPortMalloc+0x17c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a15      	ldr	r2, [pc, #84]	; (800816c <pvPortMalloc+0x184>)
 8008118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4b10      	ldr	r3, [pc, #64]	; (8008160 <pvPortMalloc+0x178>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	431a      	orrs	r2, r3
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800812e:	f7fe fd37 	bl	8006ba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <pvPortMalloc+0x16a>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <pvPortMalloc+0x168>
	return pvReturn;
 8008152:	69fb      	ldr	r3, [r7, #28]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3728      	adds	r7, #40	; 0x28
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20001990 	.word	0x20001990
 8008160:	2000199c 	.word	0x2000199c
 8008164:	20001994 	.word	0x20001994
 8008168:	20001988 	.word	0x20001988
 800816c:	20001998 	.word	0x20001998

08008170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d048      	beq.n	8008214 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008182:	2308      	movs	r3, #8
 8008184:	425b      	negs	r3, r3
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	4b21      	ldr	r3, [pc, #132]	; (800821c <vPortFree+0xac>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <vPortFree+0x44>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	60fb      	str	r3, [r7, #12]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <vPortFree+0x62>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60bb      	str	r3, [r7, #8]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	4b11      	ldr	r3, [pc, #68]	; (800821c <vPortFree+0xac>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4013      	ands	r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d019      	beq.n	8008214 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d115      	bne.n	8008214 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	4b0b      	ldr	r3, [pc, #44]	; (800821c <vPortFree+0xac>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	401a      	ands	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081f8:	f7fe fcc4 	bl	8006b84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <vPortFree+0xb0>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4413      	add	r3, r2
 8008206:	4a06      	ldr	r2, [pc, #24]	; (8008220 <vPortFree+0xb0>)
 8008208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800820a:	6938      	ldr	r0, [r7, #16]
 800820c:	f000 f86c 	bl	80082e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008210:	f7fe fcc6 	bl	8006ba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008214:	bf00      	nop
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	2000199c 	.word	0x2000199c
 8008220:	20001994 	.word	0x20001994

08008224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800822a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800822e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008230:	4b27      	ldr	r3, [pc, #156]	; (80082d0 <prvHeapInit+0xac>)
 8008232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00c      	beq.n	8008258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3307      	adds	r3, #7
 8008242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	4a1f      	ldr	r2, [pc, #124]	; (80082d0 <prvHeapInit+0xac>)
 8008254:	4413      	add	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800825c:	4a1d      	ldr	r2, [pc, #116]	; (80082d4 <prvHeapInit+0xb0>)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008262:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <prvHeapInit+0xb0>)
 8008264:	2200      	movs	r2, #0
 8008266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	4413      	add	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008270:	2208      	movs	r2, #8
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4a15      	ldr	r2, [pc, #84]	; (80082d8 <prvHeapInit+0xb4>)
 8008284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008286:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <prvHeapInit+0xb4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2200      	movs	r2, #0
 800828c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800828e:	4b12      	ldr	r3, [pc, #72]	; (80082d8 <prvHeapInit+0xb4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082a4:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <prvHeapInit+0xb4>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <prvHeapInit+0xb8>)
 80082b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4a09      	ldr	r2, [pc, #36]	; (80082e0 <prvHeapInit+0xbc>)
 80082ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <prvHeapInit+0xc0>)
 80082be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082c2:	601a      	str	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	20000d88 	.word	0x20000d88
 80082d4:	20001988 	.word	0x20001988
 80082d8:	20001990 	.word	0x20001990
 80082dc:	20001998 	.word	0x20001998
 80082e0:	20001994 	.word	0x20001994
 80082e4:	2000199c 	.word	0x2000199c

080082e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082f0:	4b28      	ldr	r3, [pc, #160]	; (8008394 <prvInsertBlockIntoFreeList+0xac>)
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e002      	b.n	80082fc <prvInsertBlockIntoFreeList+0x14>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d8f7      	bhi.n	80082f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	4413      	add	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d108      	bne.n	800832a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	441a      	add	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d118      	bne.n	8008370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <prvInsertBlockIntoFreeList+0xb0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d00d      	beq.n	8008366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	441a      	add	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	e008      	b.n	8008378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008366:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <prvInsertBlockIntoFreeList+0xb0>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	e003      	b.n	8008378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d002      	beq.n	8008386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008386:	bf00      	nop
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20001988 	.word	0x20001988
 8008398:	20001990 	.word	0x20001990

0800839c <__errno>:
 800839c:	4b01      	ldr	r3, [pc, #4]	; (80083a4 <__errno+0x8>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20000010 	.word	0x20000010

080083a8 <__libc_init_array>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	4d0d      	ldr	r5, [pc, #52]	; (80083e0 <__libc_init_array+0x38>)
 80083ac:	4c0d      	ldr	r4, [pc, #52]	; (80083e4 <__libc_init_array+0x3c>)
 80083ae:	1b64      	subs	r4, r4, r5
 80083b0:	10a4      	asrs	r4, r4, #2
 80083b2:	2600      	movs	r6, #0
 80083b4:	42a6      	cmp	r6, r4
 80083b6:	d109      	bne.n	80083cc <__libc_init_array+0x24>
 80083b8:	4d0b      	ldr	r5, [pc, #44]	; (80083e8 <__libc_init_array+0x40>)
 80083ba:	4c0c      	ldr	r4, [pc, #48]	; (80083ec <__libc_init_array+0x44>)
 80083bc:	f001 f808 	bl	80093d0 <_init>
 80083c0:	1b64      	subs	r4, r4, r5
 80083c2:	10a4      	asrs	r4, r4, #2
 80083c4:	2600      	movs	r6, #0
 80083c6:	42a6      	cmp	r6, r4
 80083c8:	d105      	bne.n	80083d6 <__libc_init_array+0x2e>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d0:	4798      	blx	r3
 80083d2:	3601      	adds	r6, #1
 80083d4:	e7ee      	b.n	80083b4 <__libc_init_array+0xc>
 80083d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083da:	4798      	blx	r3
 80083dc:	3601      	adds	r6, #1
 80083de:	e7f2      	b.n	80083c6 <__libc_init_array+0x1e>
 80083e0:	08009654 	.word	0x08009654
 80083e4:	08009654 	.word	0x08009654
 80083e8:	08009654 	.word	0x08009654
 80083ec:	08009658 	.word	0x08009658

080083f0 <memcpy>:
 80083f0:	440a      	add	r2, r1
 80083f2:	4291      	cmp	r1, r2
 80083f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083f8:	d100      	bne.n	80083fc <memcpy+0xc>
 80083fa:	4770      	bx	lr
 80083fc:	b510      	push	{r4, lr}
 80083fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008406:	4291      	cmp	r1, r2
 8008408:	d1f9      	bne.n	80083fe <memcpy+0xe>
 800840a:	bd10      	pop	{r4, pc}

0800840c <memset>:
 800840c:	4402      	add	r2, r0
 800840e:	4603      	mov	r3, r0
 8008410:	4293      	cmp	r3, r2
 8008412:	d100      	bne.n	8008416 <memset+0xa>
 8008414:	4770      	bx	lr
 8008416:	f803 1b01 	strb.w	r1, [r3], #1
 800841a:	e7f9      	b.n	8008410 <memset+0x4>

0800841c <iprintf>:
 800841c:	b40f      	push	{r0, r1, r2, r3}
 800841e:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <iprintf+0x2c>)
 8008420:	b513      	push	{r0, r1, r4, lr}
 8008422:	681c      	ldr	r4, [r3, #0]
 8008424:	b124      	cbz	r4, 8008430 <iprintf+0x14>
 8008426:	69a3      	ldr	r3, [r4, #24]
 8008428:	b913      	cbnz	r3, 8008430 <iprintf+0x14>
 800842a:	4620      	mov	r0, r4
 800842c:	f000 f866 	bl	80084fc <__sinit>
 8008430:	ab05      	add	r3, sp, #20
 8008432:	9a04      	ldr	r2, [sp, #16]
 8008434:	68a1      	ldr	r1, [r4, #8]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	4620      	mov	r0, r4
 800843a:	f000 f983 	bl	8008744 <_vfiprintf_r>
 800843e:	b002      	add	sp, #8
 8008440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008444:	b004      	add	sp, #16
 8008446:	4770      	bx	lr
 8008448:	20000010 	.word	0x20000010

0800844c <std>:
 800844c:	2300      	movs	r3, #0
 800844e:	b510      	push	{r4, lr}
 8008450:	4604      	mov	r4, r0
 8008452:	e9c0 3300 	strd	r3, r3, [r0]
 8008456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800845a:	6083      	str	r3, [r0, #8]
 800845c:	8181      	strh	r1, [r0, #12]
 800845e:	6643      	str	r3, [r0, #100]	; 0x64
 8008460:	81c2      	strh	r2, [r0, #14]
 8008462:	6183      	str	r3, [r0, #24]
 8008464:	4619      	mov	r1, r3
 8008466:	2208      	movs	r2, #8
 8008468:	305c      	adds	r0, #92	; 0x5c
 800846a:	f7ff ffcf 	bl	800840c <memset>
 800846e:	4b05      	ldr	r3, [pc, #20]	; (8008484 <std+0x38>)
 8008470:	6263      	str	r3, [r4, #36]	; 0x24
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <std+0x3c>)
 8008474:	62a3      	str	r3, [r4, #40]	; 0x28
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <std+0x40>)
 8008478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800847a:	4b05      	ldr	r3, [pc, #20]	; (8008490 <std+0x44>)
 800847c:	6224      	str	r4, [r4, #32]
 800847e:	6323      	str	r3, [r4, #48]	; 0x30
 8008480:	bd10      	pop	{r4, pc}
 8008482:	bf00      	nop
 8008484:	08008ced 	.word	0x08008ced
 8008488:	08008d0f 	.word	0x08008d0f
 800848c:	08008d47 	.word	0x08008d47
 8008490:	08008d6b 	.word	0x08008d6b

08008494 <_cleanup_r>:
 8008494:	4901      	ldr	r1, [pc, #4]	; (800849c <_cleanup_r+0x8>)
 8008496:	f000 b8af 	b.w	80085f8 <_fwalk_reent>
 800849a:	bf00      	nop
 800849c:	08009045 	.word	0x08009045

080084a0 <__sfmoreglue>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	1e4a      	subs	r2, r1, #1
 80084a4:	2568      	movs	r5, #104	; 0x68
 80084a6:	4355      	muls	r5, r2
 80084a8:	460e      	mov	r6, r1
 80084aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084ae:	f000 f8c5 	bl	800863c <_malloc_r>
 80084b2:	4604      	mov	r4, r0
 80084b4:	b140      	cbz	r0, 80084c8 <__sfmoreglue+0x28>
 80084b6:	2100      	movs	r1, #0
 80084b8:	e9c0 1600 	strd	r1, r6, [r0]
 80084bc:	300c      	adds	r0, #12
 80084be:	60a0      	str	r0, [r4, #8]
 80084c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084c4:	f7ff ffa2 	bl	800840c <memset>
 80084c8:	4620      	mov	r0, r4
 80084ca:	bd70      	pop	{r4, r5, r6, pc}

080084cc <__sfp_lock_acquire>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__sfp_lock_acquire+0x8>)
 80084ce:	f000 b8b3 	b.w	8008638 <__retarget_lock_acquire_recursive>
 80084d2:	bf00      	nop
 80084d4:	20002080 	.word	0x20002080

080084d8 <__sfp_lock_release>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__sfp_lock_release+0x8>)
 80084da:	f000 b8ae 	b.w	800863a <__retarget_lock_release_recursive>
 80084de:	bf00      	nop
 80084e0:	20002080 	.word	0x20002080

080084e4 <__sinit_lock_acquire>:
 80084e4:	4801      	ldr	r0, [pc, #4]	; (80084ec <__sinit_lock_acquire+0x8>)
 80084e6:	f000 b8a7 	b.w	8008638 <__retarget_lock_acquire_recursive>
 80084ea:	bf00      	nop
 80084ec:	2000207b 	.word	0x2000207b

080084f0 <__sinit_lock_release>:
 80084f0:	4801      	ldr	r0, [pc, #4]	; (80084f8 <__sinit_lock_release+0x8>)
 80084f2:	f000 b8a2 	b.w	800863a <__retarget_lock_release_recursive>
 80084f6:	bf00      	nop
 80084f8:	2000207b 	.word	0x2000207b

080084fc <__sinit>:
 80084fc:	b510      	push	{r4, lr}
 80084fe:	4604      	mov	r4, r0
 8008500:	f7ff fff0 	bl	80084e4 <__sinit_lock_acquire>
 8008504:	69a3      	ldr	r3, [r4, #24]
 8008506:	b11b      	cbz	r3, 8008510 <__sinit+0x14>
 8008508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800850c:	f7ff bff0 	b.w	80084f0 <__sinit_lock_release>
 8008510:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008514:	6523      	str	r3, [r4, #80]	; 0x50
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <__sinit+0x68>)
 8008518:	4a13      	ldr	r2, [pc, #76]	; (8008568 <__sinit+0x6c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	62a2      	str	r2, [r4, #40]	; 0x28
 800851e:	42a3      	cmp	r3, r4
 8008520:	bf04      	itt	eq
 8008522:	2301      	moveq	r3, #1
 8008524:	61a3      	streq	r3, [r4, #24]
 8008526:	4620      	mov	r0, r4
 8008528:	f000 f820 	bl	800856c <__sfp>
 800852c:	6060      	str	r0, [r4, #4]
 800852e:	4620      	mov	r0, r4
 8008530:	f000 f81c 	bl	800856c <__sfp>
 8008534:	60a0      	str	r0, [r4, #8]
 8008536:	4620      	mov	r0, r4
 8008538:	f000 f818 	bl	800856c <__sfp>
 800853c:	2200      	movs	r2, #0
 800853e:	60e0      	str	r0, [r4, #12]
 8008540:	2104      	movs	r1, #4
 8008542:	6860      	ldr	r0, [r4, #4]
 8008544:	f7ff ff82 	bl	800844c <std>
 8008548:	68a0      	ldr	r0, [r4, #8]
 800854a:	2201      	movs	r2, #1
 800854c:	2109      	movs	r1, #9
 800854e:	f7ff ff7d 	bl	800844c <std>
 8008552:	68e0      	ldr	r0, [r4, #12]
 8008554:	2202      	movs	r2, #2
 8008556:	2112      	movs	r1, #18
 8008558:	f7ff ff78 	bl	800844c <std>
 800855c:	2301      	movs	r3, #1
 800855e:	61a3      	str	r3, [r4, #24]
 8008560:	e7d2      	b.n	8008508 <__sinit+0xc>
 8008562:	bf00      	nop
 8008564:	080095bc 	.word	0x080095bc
 8008568:	08008495 	.word	0x08008495

0800856c <__sfp>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	4607      	mov	r7, r0
 8008570:	f7ff ffac 	bl	80084cc <__sfp_lock_acquire>
 8008574:	4b1e      	ldr	r3, [pc, #120]	; (80085f0 <__sfp+0x84>)
 8008576:	681e      	ldr	r6, [r3, #0]
 8008578:	69b3      	ldr	r3, [r6, #24]
 800857a:	b913      	cbnz	r3, 8008582 <__sfp+0x16>
 800857c:	4630      	mov	r0, r6
 800857e:	f7ff ffbd 	bl	80084fc <__sinit>
 8008582:	3648      	adds	r6, #72	; 0x48
 8008584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008588:	3b01      	subs	r3, #1
 800858a:	d503      	bpl.n	8008594 <__sfp+0x28>
 800858c:	6833      	ldr	r3, [r6, #0]
 800858e:	b30b      	cbz	r3, 80085d4 <__sfp+0x68>
 8008590:	6836      	ldr	r6, [r6, #0]
 8008592:	e7f7      	b.n	8008584 <__sfp+0x18>
 8008594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008598:	b9d5      	cbnz	r5, 80085d0 <__sfp+0x64>
 800859a:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <__sfp+0x88>)
 800859c:	60e3      	str	r3, [r4, #12]
 800859e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085a2:	6665      	str	r5, [r4, #100]	; 0x64
 80085a4:	f000 f847 	bl	8008636 <__retarget_lock_init_recursive>
 80085a8:	f7ff ff96 	bl	80084d8 <__sfp_lock_release>
 80085ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085b4:	6025      	str	r5, [r4, #0]
 80085b6:	61a5      	str	r5, [r4, #24]
 80085b8:	2208      	movs	r2, #8
 80085ba:	4629      	mov	r1, r5
 80085bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085c0:	f7ff ff24 	bl	800840c <memset>
 80085c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085cc:	4620      	mov	r0, r4
 80085ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d0:	3468      	adds	r4, #104	; 0x68
 80085d2:	e7d9      	b.n	8008588 <__sfp+0x1c>
 80085d4:	2104      	movs	r1, #4
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7ff ff62 	bl	80084a0 <__sfmoreglue>
 80085dc:	4604      	mov	r4, r0
 80085de:	6030      	str	r0, [r6, #0]
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1d5      	bne.n	8008590 <__sfp+0x24>
 80085e4:	f7ff ff78 	bl	80084d8 <__sfp_lock_release>
 80085e8:	230c      	movs	r3, #12
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	e7ee      	b.n	80085cc <__sfp+0x60>
 80085ee:	bf00      	nop
 80085f0:	080095bc 	.word	0x080095bc
 80085f4:	ffff0001 	.word	0xffff0001

080085f8 <_fwalk_reent>:
 80085f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085fc:	4606      	mov	r6, r0
 80085fe:	4688      	mov	r8, r1
 8008600:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008604:	2700      	movs	r7, #0
 8008606:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800860a:	f1b9 0901 	subs.w	r9, r9, #1
 800860e:	d505      	bpl.n	800861c <_fwalk_reent+0x24>
 8008610:	6824      	ldr	r4, [r4, #0]
 8008612:	2c00      	cmp	r4, #0
 8008614:	d1f7      	bne.n	8008606 <_fwalk_reent+0xe>
 8008616:	4638      	mov	r0, r7
 8008618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861c:	89ab      	ldrh	r3, [r5, #12]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d907      	bls.n	8008632 <_fwalk_reent+0x3a>
 8008622:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008626:	3301      	adds	r3, #1
 8008628:	d003      	beq.n	8008632 <_fwalk_reent+0x3a>
 800862a:	4629      	mov	r1, r5
 800862c:	4630      	mov	r0, r6
 800862e:	47c0      	blx	r8
 8008630:	4307      	orrs	r7, r0
 8008632:	3568      	adds	r5, #104	; 0x68
 8008634:	e7e9      	b.n	800860a <_fwalk_reent+0x12>

08008636 <__retarget_lock_init_recursive>:
 8008636:	4770      	bx	lr

08008638 <__retarget_lock_acquire_recursive>:
 8008638:	4770      	bx	lr

0800863a <__retarget_lock_release_recursive>:
 800863a:	4770      	bx	lr

0800863c <_malloc_r>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	1ccd      	adds	r5, r1, #3
 8008640:	f025 0503 	bic.w	r5, r5, #3
 8008644:	3508      	adds	r5, #8
 8008646:	2d0c      	cmp	r5, #12
 8008648:	bf38      	it	cc
 800864a:	250c      	movcc	r5, #12
 800864c:	2d00      	cmp	r5, #0
 800864e:	4606      	mov	r6, r0
 8008650:	db01      	blt.n	8008656 <_malloc_r+0x1a>
 8008652:	42a9      	cmp	r1, r5
 8008654:	d903      	bls.n	800865e <_malloc_r+0x22>
 8008656:	230c      	movs	r3, #12
 8008658:	6033      	str	r3, [r6, #0]
 800865a:	2000      	movs	r0, #0
 800865c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800865e:	f000 fda3 	bl	80091a8 <__malloc_lock>
 8008662:	4921      	ldr	r1, [pc, #132]	; (80086e8 <_malloc_r+0xac>)
 8008664:	680a      	ldr	r2, [r1, #0]
 8008666:	4614      	mov	r4, r2
 8008668:	b99c      	cbnz	r4, 8008692 <_malloc_r+0x56>
 800866a:	4f20      	ldr	r7, [pc, #128]	; (80086ec <_malloc_r+0xb0>)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	b923      	cbnz	r3, 800867a <_malloc_r+0x3e>
 8008670:	4621      	mov	r1, r4
 8008672:	4630      	mov	r0, r6
 8008674:	f000 fb2a 	bl	8008ccc <_sbrk_r>
 8008678:	6038      	str	r0, [r7, #0]
 800867a:	4629      	mov	r1, r5
 800867c:	4630      	mov	r0, r6
 800867e:	f000 fb25 	bl	8008ccc <_sbrk_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d123      	bne.n	80086ce <_malloc_r+0x92>
 8008686:	230c      	movs	r3, #12
 8008688:	6033      	str	r3, [r6, #0]
 800868a:	4630      	mov	r0, r6
 800868c:	f000 fd92 	bl	80091b4 <__malloc_unlock>
 8008690:	e7e3      	b.n	800865a <_malloc_r+0x1e>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	1b5b      	subs	r3, r3, r5
 8008696:	d417      	bmi.n	80086c8 <_malloc_r+0x8c>
 8008698:	2b0b      	cmp	r3, #11
 800869a:	d903      	bls.n	80086a4 <_malloc_r+0x68>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	441c      	add	r4, r3
 80086a0:	6025      	str	r5, [r4, #0]
 80086a2:	e004      	b.n	80086ae <_malloc_r+0x72>
 80086a4:	6863      	ldr	r3, [r4, #4]
 80086a6:	42a2      	cmp	r2, r4
 80086a8:	bf0c      	ite	eq
 80086aa:	600b      	streq	r3, [r1, #0]
 80086ac:	6053      	strne	r3, [r2, #4]
 80086ae:	4630      	mov	r0, r6
 80086b0:	f000 fd80 	bl	80091b4 <__malloc_unlock>
 80086b4:	f104 000b 	add.w	r0, r4, #11
 80086b8:	1d23      	adds	r3, r4, #4
 80086ba:	f020 0007 	bic.w	r0, r0, #7
 80086be:	1ac2      	subs	r2, r0, r3
 80086c0:	d0cc      	beq.n	800865c <_malloc_r+0x20>
 80086c2:	1a1b      	subs	r3, r3, r0
 80086c4:	50a3      	str	r3, [r4, r2]
 80086c6:	e7c9      	b.n	800865c <_malloc_r+0x20>
 80086c8:	4622      	mov	r2, r4
 80086ca:	6864      	ldr	r4, [r4, #4]
 80086cc:	e7cc      	b.n	8008668 <_malloc_r+0x2c>
 80086ce:	1cc4      	adds	r4, r0, #3
 80086d0:	f024 0403 	bic.w	r4, r4, #3
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d0e3      	beq.n	80086a0 <_malloc_r+0x64>
 80086d8:	1a21      	subs	r1, r4, r0
 80086da:	4630      	mov	r0, r6
 80086dc:	f000 faf6 	bl	8008ccc <_sbrk_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d1dd      	bne.n	80086a0 <_malloc_r+0x64>
 80086e4:	e7cf      	b.n	8008686 <_malloc_r+0x4a>
 80086e6:	bf00      	nop
 80086e8:	200019a0 	.word	0x200019a0
 80086ec:	200019a4 	.word	0x200019a4

080086f0 <__sfputc_r>:
 80086f0:	6893      	ldr	r3, [r2, #8]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	b410      	push	{r4}
 80086f8:	6093      	str	r3, [r2, #8]
 80086fa:	da08      	bge.n	800870e <__sfputc_r+0x1e>
 80086fc:	6994      	ldr	r4, [r2, #24]
 80086fe:	42a3      	cmp	r3, r4
 8008700:	db01      	blt.n	8008706 <__sfputc_r+0x16>
 8008702:	290a      	cmp	r1, #10
 8008704:	d103      	bne.n	800870e <__sfputc_r+0x1e>
 8008706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800870a:	f000 bb33 	b.w	8008d74 <__swbuf_r>
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	1c58      	adds	r0, r3, #1
 8008712:	6010      	str	r0, [r2, #0]
 8008714:	7019      	strb	r1, [r3, #0]
 8008716:	4608      	mov	r0, r1
 8008718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800871c:	4770      	bx	lr

0800871e <__sfputs_r>:
 800871e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008720:	4606      	mov	r6, r0
 8008722:	460f      	mov	r7, r1
 8008724:	4614      	mov	r4, r2
 8008726:	18d5      	adds	r5, r2, r3
 8008728:	42ac      	cmp	r4, r5
 800872a:	d101      	bne.n	8008730 <__sfputs_r+0x12>
 800872c:	2000      	movs	r0, #0
 800872e:	e007      	b.n	8008740 <__sfputs_r+0x22>
 8008730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008734:	463a      	mov	r2, r7
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff ffda 	bl	80086f0 <__sfputc_r>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d1f3      	bne.n	8008728 <__sfputs_r+0xa>
 8008740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008744 <_vfiprintf_r>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	460d      	mov	r5, r1
 800874a:	b09d      	sub	sp, #116	; 0x74
 800874c:	4614      	mov	r4, r2
 800874e:	4698      	mov	r8, r3
 8008750:	4606      	mov	r6, r0
 8008752:	b118      	cbz	r0, 800875c <_vfiprintf_r+0x18>
 8008754:	6983      	ldr	r3, [r0, #24]
 8008756:	b90b      	cbnz	r3, 800875c <_vfiprintf_r+0x18>
 8008758:	f7ff fed0 	bl	80084fc <__sinit>
 800875c:	4b89      	ldr	r3, [pc, #548]	; (8008984 <_vfiprintf_r+0x240>)
 800875e:	429d      	cmp	r5, r3
 8008760:	d11b      	bne.n	800879a <_vfiprintf_r+0x56>
 8008762:	6875      	ldr	r5, [r6, #4]
 8008764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008766:	07d9      	lsls	r1, r3, #31
 8008768:	d405      	bmi.n	8008776 <_vfiprintf_r+0x32>
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	059a      	lsls	r2, r3, #22
 800876e:	d402      	bmi.n	8008776 <_vfiprintf_r+0x32>
 8008770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008772:	f7ff ff61 	bl	8008638 <__retarget_lock_acquire_recursive>
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	071b      	lsls	r3, r3, #28
 800877a:	d501      	bpl.n	8008780 <_vfiprintf_r+0x3c>
 800877c:	692b      	ldr	r3, [r5, #16]
 800877e:	b9eb      	cbnz	r3, 80087bc <_vfiprintf_r+0x78>
 8008780:	4629      	mov	r1, r5
 8008782:	4630      	mov	r0, r6
 8008784:	f000 fb5a 	bl	8008e3c <__swsetup_r>
 8008788:	b1c0      	cbz	r0, 80087bc <_vfiprintf_r+0x78>
 800878a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800878c:	07dc      	lsls	r4, r3, #31
 800878e:	d50e      	bpl.n	80087ae <_vfiprintf_r+0x6a>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b01d      	add	sp, #116	; 0x74
 8008796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879a:	4b7b      	ldr	r3, [pc, #492]	; (8008988 <_vfiprintf_r+0x244>)
 800879c:	429d      	cmp	r5, r3
 800879e:	d101      	bne.n	80087a4 <_vfiprintf_r+0x60>
 80087a0:	68b5      	ldr	r5, [r6, #8]
 80087a2:	e7df      	b.n	8008764 <_vfiprintf_r+0x20>
 80087a4:	4b79      	ldr	r3, [pc, #484]	; (800898c <_vfiprintf_r+0x248>)
 80087a6:	429d      	cmp	r5, r3
 80087a8:	bf08      	it	eq
 80087aa:	68f5      	ldreq	r5, [r6, #12]
 80087ac:	e7da      	b.n	8008764 <_vfiprintf_r+0x20>
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	0598      	lsls	r0, r3, #22
 80087b2:	d4ed      	bmi.n	8008790 <_vfiprintf_r+0x4c>
 80087b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087b6:	f7ff ff40 	bl	800863a <__retarget_lock_release_recursive>
 80087ba:	e7e9      	b.n	8008790 <_vfiprintf_r+0x4c>
 80087bc:	2300      	movs	r3, #0
 80087be:	9309      	str	r3, [sp, #36]	; 0x24
 80087c0:	2320      	movs	r3, #32
 80087c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ca:	2330      	movs	r3, #48	; 0x30
 80087cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008990 <_vfiprintf_r+0x24c>
 80087d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087d4:	f04f 0901 	mov.w	r9, #1
 80087d8:	4623      	mov	r3, r4
 80087da:	469a      	mov	sl, r3
 80087dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e0:	b10a      	cbz	r2, 80087e6 <_vfiprintf_r+0xa2>
 80087e2:	2a25      	cmp	r2, #37	; 0x25
 80087e4:	d1f9      	bne.n	80087da <_vfiprintf_r+0x96>
 80087e6:	ebba 0b04 	subs.w	fp, sl, r4
 80087ea:	d00b      	beq.n	8008804 <_vfiprintf_r+0xc0>
 80087ec:	465b      	mov	r3, fp
 80087ee:	4622      	mov	r2, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff ff93 	bl	800871e <__sfputs_r>
 80087f8:	3001      	adds	r0, #1
 80087fa:	f000 80aa 	beq.w	8008952 <_vfiprintf_r+0x20e>
 80087fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008800:	445a      	add	r2, fp
 8008802:	9209      	str	r2, [sp, #36]	; 0x24
 8008804:	f89a 3000 	ldrb.w	r3, [sl]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80a2 	beq.w	8008952 <_vfiprintf_r+0x20e>
 800880e:	2300      	movs	r3, #0
 8008810:	f04f 32ff 	mov.w	r2, #4294967295
 8008814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008818:	f10a 0a01 	add.w	sl, sl, #1
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	9307      	str	r3, [sp, #28]
 8008820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008824:	931a      	str	r3, [sp, #104]	; 0x68
 8008826:	4654      	mov	r4, sl
 8008828:	2205      	movs	r2, #5
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	4858      	ldr	r0, [pc, #352]	; (8008990 <_vfiprintf_r+0x24c>)
 8008830:	f7f7 fcce 	bl	80001d0 <memchr>
 8008834:	9a04      	ldr	r2, [sp, #16]
 8008836:	b9d8      	cbnz	r0, 8008870 <_vfiprintf_r+0x12c>
 8008838:	06d1      	lsls	r1, r2, #27
 800883a:	bf44      	itt	mi
 800883c:	2320      	movmi	r3, #32
 800883e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008842:	0713      	lsls	r3, r2, #28
 8008844:	bf44      	itt	mi
 8008846:	232b      	movmi	r3, #43	; 0x2b
 8008848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800884c:	f89a 3000 	ldrb.w	r3, [sl]
 8008850:	2b2a      	cmp	r3, #42	; 0x2a
 8008852:	d015      	beq.n	8008880 <_vfiprintf_r+0x13c>
 8008854:	9a07      	ldr	r2, [sp, #28]
 8008856:	4654      	mov	r4, sl
 8008858:	2000      	movs	r0, #0
 800885a:	f04f 0c0a 	mov.w	ip, #10
 800885e:	4621      	mov	r1, r4
 8008860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008864:	3b30      	subs	r3, #48	; 0x30
 8008866:	2b09      	cmp	r3, #9
 8008868:	d94e      	bls.n	8008908 <_vfiprintf_r+0x1c4>
 800886a:	b1b0      	cbz	r0, 800889a <_vfiprintf_r+0x156>
 800886c:	9207      	str	r2, [sp, #28]
 800886e:	e014      	b.n	800889a <_vfiprintf_r+0x156>
 8008870:	eba0 0308 	sub.w	r3, r0, r8
 8008874:	fa09 f303 	lsl.w	r3, r9, r3
 8008878:	4313      	orrs	r3, r2
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	46a2      	mov	sl, r4
 800887e:	e7d2      	b.n	8008826 <_vfiprintf_r+0xe2>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	1d19      	adds	r1, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	9103      	str	r1, [sp, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfbb      	ittet	lt
 800888c:	425b      	neglt	r3, r3
 800888e:	f042 0202 	orrlt.w	r2, r2, #2
 8008892:	9307      	strge	r3, [sp, #28]
 8008894:	9307      	strlt	r3, [sp, #28]
 8008896:	bfb8      	it	lt
 8008898:	9204      	strlt	r2, [sp, #16]
 800889a:	7823      	ldrb	r3, [r4, #0]
 800889c:	2b2e      	cmp	r3, #46	; 0x2e
 800889e:	d10c      	bne.n	80088ba <_vfiprintf_r+0x176>
 80088a0:	7863      	ldrb	r3, [r4, #1]
 80088a2:	2b2a      	cmp	r3, #42	; 0x2a
 80088a4:	d135      	bne.n	8008912 <_vfiprintf_r+0x1ce>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	9203      	str	r2, [sp, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfb8      	it	lt
 80088b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088b6:	3402      	adds	r4, #2
 80088b8:	9305      	str	r3, [sp, #20]
 80088ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089a0 <_vfiprintf_r+0x25c>
 80088be:	7821      	ldrb	r1, [r4, #0]
 80088c0:	2203      	movs	r2, #3
 80088c2:	4650      	mov	r0, sl
 80088c4:	f7f7 fc84 	bl	80001d0 <memchr>
 80088c8:	b140      	cbz	r0, 80088dc <_vfiprintf_r+0x198>
 80088ca:	2340      	movs	r3, #64	; 0x40
 80088cc:	eba0 000a 	sub.w	r0, r0, sl
 80088d0:	fa03 f000 	lsl.w	r0, r3, r0
 80088d4:	9b04      	ldr	r3, [sp, #16]
 80088d6:	4303      	orrs	r3, r0
 80088d8:	3401      	adds	r4, #1
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e0:	482c      	ldr	r0, [pc, #176]	; (8008994 <_vfiprintf_r+0x250>)
 80088e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088e6:	2206      	movs	r2, #6
 80088e8:	f7f7 fc72 	bl	80001d0 <memchr>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d03f      	beq.n	8008970 <_vfiprintf_r+0x22c>
 80088f0:	4b29      	ldr	r3, [pc, #164]	; (8008998 <_vfiprintf_r+0x254>)
 80088f2:	bb1b      	cbnz	r3, 800893c <_vfiprintf_r+0x1f8>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	3307      	adds	r3, #7
 80088f8:	f023 0307 	bic.w	r3, r3, #7
 80088fc:	3308      	adds	r3, #8
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	443b      	add	r3, r7
 8008904:	9309      	str	r3, [sp, #36]	; 0x24
 8008906:	e767      	b.n	80087d8 <_vfiprintf_r+0x94>
 8008908:	fb0c 3202 	mla	r2, ip, r2, r3
 800890c:	460c      	mov	r4, r1
 800890e:	2001      	movs	r0, #1
 8008910:	e7a5      	b.n	800885e <_vfiprintf_r+0x11a>
 8008912:	2300      	movs	r3, #0
 8008914:	3401      	adds	r4, #1
 8008916:	9305      	str	r3, [sp, #20]
 8008918:	4619      	mov	r1, r3
 800891a:	f04f 0c0a 	mov.w	ip, #10
 800891e:	4620      	mov	r0, r4
 8008920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008924:	3a30      	subs	r2, #48	; 0x30
 8008926:	2a09      	cmp	r2, #9
 8008928:	d903      	bls.n	8008932 <_vfiprintf_r+0x1ee>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0c5      	beq.n	80088ba <_vfiprintf_r+0x176>
 800892e:	9105      	str	r1, [sp, #20]
 8008930:	e7c3      	b.n	80088ba <_vfiprintf_r+0x176>
 8008932:	fb0c 2101 	mla	r1, ip, r1, r2
 8008936:	4604      	mov	r4, r0
 8008938:	2301      	movs	r3, #1
 800893a:	e7f0      	b.n	800891e <_vfiprintf_r+0x1da>
 800893c:	ab03      	add	r3, sp, #12
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	462a      	mov	r2, r5
 8008942:	4b16      	ldr	r3, [pc, #88]	; (800899c <_vfiprintf_r+0x258>)
 8008944:	a904      	add	r1, sp, #16
 8008946:	4630      	mov	r0, r6
 8008948:	f3af 8000 	nop.w
 800894c:	4607      	mov	r7, r0
 800894e:	1c78      	adds	r0, r7, #1
 8008950:	d1d6      	bne.n	8008900 <_vfiprintf_r+0x1bc>
 8008952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008954:	07d9      	lsls	r1, r3, #31
 8008956:	d405      	bmi.n	8008964 <_vfiprintf_r+0x220>
 8008958:	89ab      	ldrh	r3, [r5, #12]
 800895a:	059a      	lsls	r2, r3, #22
 800895c:	d402      	bmi.n	8008964 <_vfiprintf_r+0x220>
 800895e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008960:	f7ff fe6b 	bl	800863a <__retarget_lock_release_recursive>
 8008964:	89ab      	ldrh	r3, [r5, #12]
 8008966:	065b      	lsls	r3, r3, #25
 8008968:	f53f af12 	bmi.w	8008790 <_vfiprintf_r+0x4c>
 800896c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800896e:	e711      	b.n	8008794 <_vfiprintf_r+0x50>
 8008970:	ab03      	add	r3, sp, #12
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	462a      	mov	r2, r5
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <_vfiprintf_r+0x258>)
 8008978:	a904      	add	r1, sp, #16
 800897a:	4630      	mov	r0, r6
 800897c:	f000 f880 	bl	8008a80 <_printf_i>
 8008980:	e7e4      	b.n	800894c <_vfiprintf_r+0x208>
 8008982:	bf00      	nop
 8008984:	080095e0 	.word	0x080095e0
 8008988:	08009600 	.word	0x08009600
 800898c:	080095c0 	.word	0x080095c0
 8008990:	08009620 	.word	0x08009620
 8008994:	0800962a 	.word	0x0800962a
 8008998:	00000000 	.word	0x00000000
 800899c:	0800871f 	.word	0x0800871f
 80089a0:	08009626 	.word	0x08009626

080089a4 <_printf_common>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	4616      	mov	r6, r2
 80089aa:	4699      	mov	r9, r3
 80089ac:	688a      	ldr	r2, [r1, #8]
 80089ae:	690b      	ldr	r3, [r1, #16]
 80089b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089b4:	4293      	cmp	r3, r2
 80089b6:	bfb8      	it	lt
 80089b8:	4613      	movlt	r3, r2
 80089ba:	6033      	str	r3, [r6, #0]
 80089bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089c0:	4607      	mov	r7, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	b10a      	cbz	r2, 80089ca <_printf_common+0x26>
 80089c6:	3301      	adds	r3, #1
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	0699      	lsls	r1, r3, #26
 80089ce:	bf42      	ittt	mi
 80089d0:	6833      	ldrmi	r3, [r6, #0]
 80089d2:	3302      	addmi	r3, #2
 80089d4:	6033      	strmi	r3, [r6, #0]
 80089d6:	6825      	ldr	r5, [r4, #0]
 80089d8:	f015 0506 	ands.w	r5, r5, #6
 80089dc:	d106      	bne.n	80089ec <_printf_common+0x48>
 80089de:	f104 0a19 	add.w	sl, r4, #25
 80089e2:	68e3      	ldr	r3, [r4, #12]
 80089e4:	6832      	ldr	r2, [r6, #0]
 80089e6:	1a9b      	subs	r3, r3, r2
 80089e8:	42ab      	cmp	r3, r5
 80089ea:	dc26      	bgt.n	8008a3a <_printf_common+0x96>
 80089ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089f0:	1e13      	subs	r3, r2, #0
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	bf18      	it	ne
 80089f6:	2301      	movne	r3, #1
 80089f8:	0692      	lsls	r2, r2, #26
 80089fa:	d42b      	bmi.n	8008a54 <_printf_common+0xb0>
 80089fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a00:	4649      	mov	r1, r9
 8008a02:	4638      	mov	r0, r7
 8008a04:	47c0      	blx	r8
 8008a06:	3001      	adds	r0, #1
 8008a08:	d01e      	beq.n	8008a48 <_printf_common+0xa4>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	68e5      	ldr	r5, [r4, #12]
 8008a0e:	6832      	ldr	r2, [r6, #0]
 8008a10:	f003 0306 	and.w	r3, r3, #6
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	bf08      	it	eq
 8008a18:	1aad      	subeq	r5, r5, r2
 8008a1a:	68a3      	ldr	r3, [r4, #8]
 8008a1c:	6922      	ldr	r2, [r4, #16]
 8008a1e:	bf0c      	ite	eq
 8008a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a24:	2500      	movne	r5, #0
 8008a26:	4293      	cmp	r3, r2
 8008a28:	bfc4      	itt	gt
 8008a2a:	1a9b      	subgt	r3, r3, r2
 8008a2c:	18ed      	addgt	r5, r5, r3
 8008a2e:	2600      	movs	r6, #0
 8008a30:	341a      	adds	r4, #26
 8008a32:	42b5      	cmp	r5, r6
 8008a34:	d11a      	bne.n	8008a6c <_printf_common+0xc8>
 8008a36:	2000      	movs	r0, #0
 8008a38:	e008      	b.n	8008a4c <_printf_common+0xa8>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4638      	mov	r0, r7
 8008a42:	47c0      	blx	r8
 8008a44:	3001      	adds	r0, #1
 8008a46:	d103      	bne.n	8008a50 <_printf_common+0xac>
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a50:	3501      	adds	r5, #1
 8008a52:	e7c6      	b.n	80089e2 <_printf_common+0x3e>
 8008a54:	18e1      	adds	r1, r4, r3
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	2030      	movs	r0, #48	; 0x30
 8008a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a5e:	4422      	add	r2, r4
 8008a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a68:	3302      	adds	r3, #2
 8008a6a:	e7c7      	b.n	80089fc <_printf_common+0x58>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4622      	mov	r2, r4
 8008a70:	4649      	mov	r1, r9
 8008a72:	4638      	mov	r0, r7
 8008a74:	47c0      	blx	r8
 8008a76:	3001      	adds	r0, #1
 8008a78:	d0e6      	beq.n	8008a48 <_printf_common+0xa4>
 8008a7a:	3601      	adds	r6, #1
 8008a7c:	e7d9      	b.n	8008a32 <_printf_common+0x8e>
	...

08008a80 <_printf_i>:
 8008a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	460c      	mov	r4, r1
 8008a86:	4691      	mov	r9, r2
 8008a88:	7e27      	ldrb	r7, [r4, #24]
 8008a8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a8c:	2f78      	cmp	r7, #120	; 0x78
 8008a8e:	4680      	mov	r8, r0
 8008a90:	469a      	mov	sl, r3
 8008a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a96:	d807      	bhi.n	8008aa8 <_printf_i+0x28>
 8008a98:	2f62      	cmp	r7, #98	; 0x62
 8008a9a:	d80a      	bhi.n	8008ab2 <_printf_i+0x32>
 8008a9c:	2f00      	cmp	r7, #0
 8008a9e:	f000 80d8 	beq.w	8008c52 <_printf_i+0x1d2>
 8008aa2:	2f58      	cmp	r7, #88	; 0x58
 8008aa4:	f000 80a3 	beq.w	8008bee <_printf_i+0x16e>
 8008aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ab0:	e03a      	b.n	8008b28 <_printf_i+0xa8>
 8008ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ab6:	2b15      	cmp	r3, #21
 8008ab8:	d8f6      	bhi.n	8008aa8 <_printf_i+0x28>
 8008aba:	a001      	add	r0, pc, #4	; (adr r0, 8008ac0 <_printf_i+0x40>)
 8008abc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b2d 	.word	0x08008b2d
 8008ac8:	08008aa9 	.word	0x08008aa9
 8008acc:	08008aa9 	.word	0x08008aa9
 8008ad0:	08008aa9 	.word	0x08008aa9
 8008ad4:	08008aa9 	.word	0x08008aa9
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008aa9 	.word	0x08008aa9
 8008ae0:	08008aa9 	.word	0x08008aa9
 8008ae4:	08008aa9 	.word	0x08008aa9
 8008ae8:	08008aa9 	.word	0x08008aa9
 8008aec:	08008c39 	.word	0x08008c39
 8008af0:	08008b5d 	.word	0x08008b5d
 8008af4:	08008c1b 	.word	0x08008c1b
 8008af8:	08008aa9 	.word	0x08008aa9
 8008afc:	08008aa9 	.word	0x08008aa9
 8008b00:	08008c5b 	.word	0x08008c5b
 8008b04:	08008aa9 	.word	0x08008aa9
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008aa9 	.word	0x08008aa9
 8008b10:	08008aa9 	.word	0x08008aa9
 8008b14:	08008c23 	.word	0x08008c23
 8008b18:	680b      	ldr	r3, [r1, #0]
 8008b1a:	1d1a      	adds	r2, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	600a      	str	r2, [r1, #0]
 8008b20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e0a3      	b.n	8008c74 <_printf_i+0x1f4>
 8008b2c:	6825      	ldr	r5, [r4, #0]
 8008b2e:	6808      	ldr	r0, [r1, #0]
 8008b30:	062e      	lsls	r6, r5, #24
 8008b32:	f100 0304 	add.w	r3, r0, #4
 8008b36:	d50a      	bpl.n	8008b4e <_printf_i+0xce>
 8008b38:	6805      	ldr	r5, [r0, #0]
 8008b3a:	600b      	str	r3, [r1, #0]
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	da03      	bge.n	8008b48 <_printf_i+0xc8>
 8008b40:	232d      	movs	r3, #45	; 0x2d
 8008b42:	426d      	negs	r5, r5
 8008b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b48:	485e      	ldr	r0, [pc, #376]	; (8008cc4 <_printf_i+0x244>)
 8008b4a:	230a      	movs	r3, #10
 8008b4c:	e019      	b.n	8008b82 <_printf_i+0x102>
 8008b4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b52:	6805      	ldr	r5, [r0, #0]
 8008b54:	600b      	str	r3, [r1, #0]
 8008b56:	bf18      	it	ne
 8008b58:	b22d      	sxthne	r5, r5
 8008b5a:	e7ef      	b.n	8008b3c <_printf_i+0xbc>
 8008b5c:	680b      	ldr	r3, [r1, #0]
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	1d18      	adds	r0, r3, #4
 8008b62:	6008      	str	r0, [r1, #0]
 8008b64:	0628      	lsls	r0, r5, #24
 8008b66:	d501      	bpl.n	8008b6c <_printf_i+0xec>
 8008b68:	681d      	ldr	r5, [r3, #0]
 8008b6a:	e002      	b.n	8008b72 <_printf_i+0xf2>
 8008b6c:	0669      	lsls	r1, r5, #25
 8008b6e:	d5fb      	bpl.n	8008b68 <_printf_i+0xe8>
 8008b70:	881d      	ldrh	r5, [r3, #0]
 8008b72:	4854      	ldr	r0, [pc, #336]	; (8008cc4 <_printf_i+0x244>)
 8008b74:	2f6f      	cmp	r7, #111	; 0x6f
 8008b76:	bf0c      	ite	eq
 8008b78:	2308      	moveq	r3, #8
 8008b7a:	230a      	movne	r3, #10
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b82:	6866      	ldr	r6, [r4, #4]
 8008b84:	60a6      	str	r6, [r4, #8]
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	bfa2      	ittt	ge
 8008b8a:	6821      	ldrge	r1, [r4, #0]
 8008b8c:	f021 0104 	bicge.w	r1, r1, #4
 8008b90:	6021      	strge	r1, [r4, #0]
 8008b92:	b90d      	cbnz	r5, 8008b98 <_printf_i+0x118>
 8008b94:	2e00      	cmp	r6, #0
 8008b96:	d04d      	beq.n	8008c34 <_printf_i+0x1b4>
 8008b98:	4616      	mov	r6, r2
 8008b9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b9e:	fb03 5711 	mls	r7, r3, r1, r5
 8008ba2:	5dc7      	ldrb	r7, [r0, r7]
 8008ba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ba8:	462f      	mov	r7, r5
 8008baa:	42bb      	cmp	r3, r7
 8008bac:	460d      	mov	r5, r1
 8008bae:	d9f4      	bls.n	8008b9a <_printf_i+0x11a>
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d10b      	bne.n	8008bcc <_printf_i+0x14c>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	07df      	lsls	r7, r3, #31
 8008bb8:	d508      	bpl.n	8008bcc <_printf_i+0x14c>
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	6861      	ldr	r1, [r4, #4]
 8008bbe:	4299      	cmp	r1, r3
 8008bc0:	bfde      	ittt	le
 8008bc2:	2330      	movle	r3, #48	; 0x30
 8008bc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bcc:	1b92      	subs	r2, r2, r6
 8008bce:	6122      	str	r2, [r4, #16]
 8008bd0:	f8cd a000 	str.w	sl, [sp]
 8008bd4:	464b      	mov	r3, r9
 8008bd6:	aa03      	add	r2, sp, #12
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff fee2 	bl	80089a4 <_printf_common>
 8008be0:	3001      	adds	r0, #1
 8008be2:	d14c      	bne.n	8008c7e <_printf_i+0x1fe>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295
 8008be8:	b004      	add	sp, #16
 8008bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bee:	4835      	ldr	r0, [pc, #212]	; (8008cc4 <_printf_i+0x244>)
 8008bf0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	680e      	ldr	r6, [r1, #0]
 8008bf8:	061f      	lsls	r7, r3, #24
 8008bfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8008bfe:	600e      	str	r6, [r1, #0]
 8008c00:	d514      	bpl.n	8008c2c <_printf_i+0x1ac>
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	bf44      	itt	mi
 8008c06:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0a:	6023      	strmi	r3, [r4, #0]
 8008c0c:	b91d      	cbnz	r5, 8008c16 <_printf_i+0x196>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f023 0320 	bic.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	2310      	movs	r3, #16
 8008c18:	e7b0      	b.n	8008b7c <_printf_i+0xfc>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	f043 0320 	orr.w	r3, r3, #32
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	2378      	movs	r3, #120	; 0x78
 8008c24:	4828      	ldr	r0, [pc, #160]	; (8008cc8 <_printf_i+0x248>)
 8008c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c2a:	e7e3      	b.n	8008bf4 <_printf_i+0x174>
 8008c2c:	065e      	lsls	r6, r3, #25
 8008c2e:	bf48      	it	mi
 8008c30:	b2ad      	uxthmi	r5, r5
 8008c32:	e7e6      	b.n	8008c02 <_printf_i+0x182>
 8008c34:	4616      	mov	r6, r2
 8008c36:	e7bb      	b.n	8008bb0 <_printf_i+0x130>
 8008c38:	680b      	ldr	r3, [r1, #0]
 8008c3a:	6826      	ldr	r6, [r4, #0]
 8008c3c:	6960      	ldr	r0, [r4, #20]
 8008c3e:	1d1d      	adds	r5, r3, #4
 8008c40:	600d      	str	r5, [r1, #0]
 8008c42:	0635      	lsls	r5, r6, #24
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	d501      	bpl.n	8008c4c <_printf_i+0x1cc>
 8008c48:	6018      	str	r0, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <_printf_i+0x1d2>
 8008c4c:	0671      	lsls	r1, r6, #25
 8008c4e:	d5fb      	bpl.n	8008c48 <_printf_i+0x1c8>
 8008c50:	8018      	strh	r0, [r3, #0]
 8008c52:	2300      	movs	r3, #0
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	4616      	mov	r6, r2
 8008c58:	e7ba      	b.n	8008bd0 <_printf_i+0x150>
 8008c5a:	680b      	ldr	r3, [r1, #0]
 8008c5c:	1d1a      	adds	r2, r3, #4
 8008c5e:	600a      	str	r2, [r1, #0]
 8008c60:	681e      	ldr	r6, [r3, #0]
 8008c62:	6862      	ldr	r2, [r4, #4]
 8008c64:	2100      	movs	r1, #0
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7f7 fab2 	bl	80001d0 <memchr>
 8008c6c:	b108      	cbz	r0, 8008c72 <_printf_i+0x1f2>
 8008c6e:	1b80      	subs	r0, r0, r6
 8008c70:	6060      	str	r0, [r4, #4]
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	2300      	movs	r3, #0
 8008c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c7c:	e7a8      	b.n	8008bd0 <_printf_i+0x150>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	4632      	mov	r2, r6
 8008c82:	4649      	mov	r1, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	47d0      	blx	sl
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d0ab      	beq.n	8008be4 <_printf_i+0x164>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	079b      	lsls	r3, r3, #30
 8008c90:	d413      	bmi.n	8008cba <_printf_i+0x23a>
 8008c92:	68e0      	ldr	r0, [r4, #12]
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	4298      	cmp	r0, r3
 8008c98:	bfb8      	it	lt
 8008c9a:	4618      	movlt	r0, r3
 8008c9c:	e7a4      	b.n	8008be8 <_printf_i+0x168>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	47d0      	blx	sl
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d09b      	beq.n	8008be4 <_printf_i+0x164>
 8008cac:	3501      	adds	r5, #1
 8008cae:	68e3      	ldr	r3, [r4, #12]
 8008cb0:	9903      	ldr	r1, [sp, #12]
 8008cb2:	1a5b      	subs	r3, r3, r1
 8008cb4:	42ab      	cmp	r3, r5
 8008cb6:	dcf2      	bgt.n	8008c9e <_printf_i+0x21e>
 8008cb8:	e7eb      	b.n	8008c92 <_printf_i+0x212>
 8008cba:	2500      	movs	r5, #0
 8008cbc:	f104 0619 	add.w	r6, r4, #25
 8008cc0:	e7f5      	b.n	8008cae <_printf_i+0x22e>
 8008cc2:	bf00      	nop
 8008cc4:	08009631 	.word	0x08009631
 8008cc8:	08009642 	.word	0x08009642

08008ccc <_sbrk_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d06      	ldr	r5, [pc, #24]	; (8008ce8 <_sbrk_r+0x1c>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	f7f8 fe5c 	bl	8001994 <_sbrk>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_sbrk_r+0x1a>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_sbrk_r+0x1a>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	20002084 	.word	0x20002084

08008cec <__sread>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	460c      	mov	r4, r1
 8008cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf4:	f000 fab4 	bl	8009260 <_read_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	bfab      	itete	ge
 8008cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8008d00:	181b      	addge	r3, r3, r0
 8008d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d06:	bfac      	ite	ge
 8008d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d0a:	81a3      	strhlt	r3, [r4, #12]
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <__swrite>:
 8008d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	461f      	mov	r7, r3
 8008d14:	898b      	ldrh	r3, [r1, #12]
 8008d16:	05db      	lsls	r3, r3, #23
 8008d18:	4605      	mov	r5, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	d505      	bpl.n	8008d2c <__swrite+0x1e>
 8008d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d24:	2302      	movs	r3, #2
 8008d26:	2200      	movs	r2, #0
 8008d28:	f000 f9c8 	bl	80090bc <_lseek_r>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	4632      	mov	r2, r6
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d42:	f000 b869 	b.w	8008e18 <_write_r>

08008d46 <__sseek>:
 8008d46:	b510      	push	{r4, lr}
 8008d48:	460c      	mov	r4, r1
 8008d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4e:	f000 f9b5 	bl	80090bc <_lseek_r>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	bf15      	itete	ne
 8008d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d62:	81a3      	strheq	r3, [r4, #12]
 8008d64:	bf18      	it	ne
 8008d66:	81a3      	strhne	r3, [r4, #12]
 8008d68:	bd10      	pop	{r4, pc}

08008d6a <__sclose>:
 8008d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6e:	f000 b8d3 	b.w	8008f18 <_close_r>
	...

08008d74 <__swbuf_r>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	460e      	mov	r6, r1
 8008d78:	4614      	mov	r4, r2
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b118      	cbz	r0, 8008d86 <__swbuf_r+0x12>
 8008d7e:	6983      	ldr	r3, [r0, #24]
 8008d80:	b90b      	cbnz	r3, 8008d86 <__swbuf_r+0x12>
 8008d82:	f7ff fbbb 	bl	80084fc <__sinit>
 8008d86:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <__swbuf_r+0x98>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	d12b      	bne.n	8008de4 <__swbuf_r+0x70>
 8008d8c:	686c      	ldr	r4, [r5, #4]
 8008d8e:	69a3      	ldr	r3, [r4, #24]
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	071a      	lsls	r2, r3, #28
 8008d96:	d52f      	bpl.n	8008df8 <__swbuf_r+0x84>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	b36b      	cbz	r3, 8008df8 <__swbuf_r+0x84>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	1ac0      	subs	r0, r0, r3
 8008da2:	6963      	ldr	r3, [r4, #20]
 8008da4:	b2f6      	uxtb	r6, r6
 8008da6:	4283      	cmp	r3, r0
 8008da8:	4637      	mov	r7, r6
 8008daa:	dc04      	bgt.n	8008db6 <__swbuf_r+0x42>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f948 	bl	8009044 <_fflush_r>
 8008db4:	bb30      	cbnz	r0, 8008e04 <__swbuf_r+0x90>
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	6022      	str	r2, [r4, #0]
 8008dc2:	701e      	strb	r6, [r3, #0]
 8008dc4:	6963      	ldr	r3, [r4, #20]
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	4283      	cmp	r3, r0
 8008dca:	d004      	beq.n	8008dd6 <__swbuf_r+0x62>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	07db      	lsls	r3, r3, #31
 8008dd0:	d506      	bpl.n	8008de0 <__swbuf_r+0x6c>
 8008dd2:	2e0a      	cmp	r6, #10
 8008dd4:	d104      	bne.n	8008de0 <__swbuf_r+0x6c>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f933 	bl	8009044 <_fflush_r>
 8008dde:	b988      	cbnz	r0, 8008e04 <__swbuf_r+0x90>
 8008de0:	4638      	mov	r0, r7
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <__swbuf_r+0x9c>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d101      	bne.n	8008dee <__swbuf_r+0x7a>
 8008dea:	68ac      	ldr	r4, [r5, #8]
 8008dec:	e7cf      	b.n	8008d8e <__swbuf_r+0x1a>
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <__swbuf_r+0xa0>)
 8008df0:	429c      	cmp	r4, r3
 8008df2:	bf08      	it	eq
 8008df4:	68ec      	ldreq	r4, [r5, #12]
 8008df6:	e7ca      	b.n	8008d8e <__swbuf_r+0x1a>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 f81e 	bl	8008e3c <__swsetup_r>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d0cb      	beq.n	8008d9c <__swbuf_r+0x28>
 8008e04:	f04f 37ff 	mov.w	r7, #4294967295
 8008e08:	e7ea      	b.n	8008de0 <__swbuf_r+0x6c>
 8008e0a:	bf00      	nop
 8008e0c:	080095e0 	.word	0x080095e0
 8008e10:	08009600 	.word	0x08009600
 8008e14:	080095c0 	.word	0x080095c0

08008e18 <_write_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	; (8008e38 <_write_r+0x20>)
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	602a      	str	r2, [r5, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7f8 fd63 	bl	80018f2 <_write>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_write_r+0x1e>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_write_r+0x1e>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20002084 	.word	0x20002084

08008e3c <__swsetup_r>:
 8008e3c:	4b32      	ldr	r3, [pc, #200]	; (8008f08 <__swsetup_r+0xcc>)
 8008e3e:	b570      	push	{r4, r5, r6, lr}
 8008e40:	681d      	ldr	r5, [r3, #0]
 8008e42:	4606      	mov	r6, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	b125      	cbz	r5, 8008e52 <__swsetup_r+0x16>
 8008e48:	69ab      	ldr	r3, [r5, #24]
 8008e4a:	b913      	cbnz	r3, 8008e52 <__swsetup_r+0x16>
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f7ff fb55 	bl	80084fc <__sinit>
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <__swsetup_r+0xd0>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	d10f      	bne.n	8008e78 <__swsetup_r+0x3c>
 8008e58:	686c      	ldr	r4, [r5, #4]
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e60:	0719      	lsls	r1, r3, #28
 8008e62:	d42c      	bmi.n	8008ebe <__swsetup_r+0x82>
 8008e64:	06dd      	lsls	r5, r3, #27
 8008e66:	d411      	bmi.n	8008e8c <__swsetup_r+0x50>
 8008e68:	2309      	movs	r3, #9
 8008e6a:	6033      	str	r3, [r6, #0]
 8008e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
 8008e76:	e03e      	b.n	8008ef6 <__swsetup_r+0xba>
 8008e78:	4b25      	ldr	r3, [pc, #148]	; (8008f10 <__swsetup_r+0xd4>)
 8008e7a:	429c      	cmp	r4, r3
 8008e7c:	d101      	bne.n	8008e82 <__swsetup_r+0x46>
 8008e7e:	68ac      	ldr	r4, [r5, #8]
 8008e80:	e7eb      	b.n	8008e5a <__swsetup_r+0x1e>
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <__swsetup_r+0xd8>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	bf08      	it	eq
 8008e88:	68ec      	ldreq	r4, [r5, #12]
 8008e8a:	e7e6      	b.n	8008e5a <__swsetup_r+0x1e>
 8008e8c:	0758      	lsls	r0, r3, #29
 8008e8e:	d512      	bpl.n	8008eb6 <__swsetup_r+0x7a>
 8008e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e92:	b141      	cbz	r1, 8008ea6 <__swsetup_r+0x6a>
 8008e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d002      	beq.n	8008ea2 <__swsetup_r+0x66>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 f98f 	bl	80091c0 <_free_r>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f043 0308 	orr.w	r3, r3, #8
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	b94b      	cbnz	r3, 8008ed6 <__swsetup_r+0x9a>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ecc:	d003      	beq.n	8008ed6 <__swsetup_r+0x9a>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f929 	bl	8009128 <__smakebuf_r>
 8008ed6:	89a0      	ldrh	r0, [r4, #12]
 8008ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008edc:	f010 0301 	ands.w	r3, r0, #1
 8008ee0:	d00a      	beq.n	8008ef8 <__swsetup_r+0xbc>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	6963      	ldr	r3, [r4, #20]
 8008ee8:	425b      	negs	r3, r3
 8008eea:	61a3      	str	r3, [r4, #24]
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	b943      	cbnz	r3, 8008f02 <__swsetup_r+0xc6>
 8008ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ef4:	d1ba      	bne.n	8008e6c <__swsetup_r+0x30>
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	0781      	lsls	r1, r0, #30
 8008efa:	bf58      	it	pl
 8008efc:	6963      	ldrpl	r3, [r4, #20]
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	e7f4      	b.n	8008eec <__swsetup_r+0xb0>
 8008f02:	2000      	movs	r0, #0
 8008f04:	e7f7      	b.n	8008ef6 <__swsetup_r+0xba>
 8008f06:	bf00      	nop
 8008f08:	20000010 	.word	0x20000010
 8008f0c:	080095e0 	.word	0x080095e0
 8008f10:	08009600 	.word	0x08009600
 8008f14:	080095c0 	.word	0x080095c0

08008f18 <_close_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_close_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f8 fd01 	bl	800192a <_close>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_close_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_close_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20002084 	.word	0x20002084

08008f38 <__sflush_r>:
 8008f38:	898a      	ldrh	r2, [r1, #12]
 8008f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3e:	4605      	mov	r5, r0
 8008f40:	0710      	lsls	r0, r2, #28
 8008f42:	460c      	mov	r4, r1
 8008f44:	d458      	bmi.n	8008ff8 <__sflush_r+0xc0>
 8008f46:	684b      	ldr	r3, [r1, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc05      	bgt.n	8008f58 <__sflush_r+0x20>
 8008f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	dc02      	bgt.n	8008f58 <__sflush_r+0x20>
 8008f52:	2000      	movs	r0, #0
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	d0f9      	beq.n	8008f52 <__sflush_r+0x1a>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f64:	682f      	ldr	r7, [r5, #0]
 8008f66:	602b      	str	r3, [r5, #0]
 8008f68:	d032      	beq.n	8008fd0 <__sflush_r+0x98>
 8008f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	075a      	lsls	r2, r3, #29
 8008f70:	d505      	bpl.n	8008f7e <__sflush_r+0x46>
 8008f72:	6863      	ldr	r3, [r4, #4]
 8008f74:	1ac0      	subs	r0, r0, r3
 8008f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f78:	b10b      	cbz	r3, 8008f7e <__sflush_r+0x46>
 8008f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f7c:	1ac0      	subs	r0, r0, r3
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4602      	mov	r2, r0
 8008f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f84:	6a21      	ldr	r1, [r4, #32]
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b0      	blx	r6
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	d106      	bne.n	8008f9e <__sflush_r+0x66>
 8008f90:	6829      	ldr	r1, [r5, #0]
 8008f92:	291d      	cmp	r1, #29
 8008f94:	d82c      	bhi.n	8008ff0 <__sflush_r+0xb8>
 8008f96:	4a2a      	ldr	r2, [pc, #168]	; (8009040 <__sflush_r+0x108>)
 8008f98:	40ca      	lsrs	r2, r1
 8008f9a:	07d6      	lsls	r6, r2, #31
 8008f9c:	d528      	bpl.n	8008ff0 <__sflush_r+0xb8>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6062      	str	r2, [r4, #4]
 8008fa2:	04d9      	lsls	r1, r3, #19
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	6022      	str	r2, [r4, #0]
 8008fa8:	d504      	bpl.n	8008fb4 <__sflush_r+0x7c>
 8008faa:	1c42      	adds	r2, r0, #1
 8008fac:	d101      	bne.n	8008fb2 <__sflush_r+0x7a>
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	b903      	cbnz	r3, 8008fb4 <__sflush_r+0x7c>
 8008fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8008fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	d0ca      	beq.n	8008f52 <__sflush_r+0x1a>
 8008fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc0:	4299      	cmp	r1, r3
 8008fc2:	d002      	beq.n	8008fca <__sflush_r+0x92>
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f000 f8fb 	bl	80091c0 <_free_r>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8008fce:	e7c1      	b.n	8008f54 <__sflush_r+0x1c>
 8008fd0:	6a21      	ldr	r1, [r4, #32]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b0      	blx	r6
 8008fd8:	1c41      	adds	r1, r0, #1
 8008fda:	d1c7      	bne.n	8008f6c <__sflush_r+0x34>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0c4      	beq.n	8008f6c <__sflush_r+0x34>
 8008fe2:	2b1d      	cmp	r3, #29
 8008fe4:	d001      	beq.n	8008fea <__sflush_r+0xb2>
 8008fe6:	2b16      	cmp	r3, #22
 8008fe8:	d101      	bne.n	8008fee <__sflush_r+0xb6>
 8008fea:	602f      	str	r7, [r5, #0]
 8008fec:	e7b1      	b.n	8008f52 <__sflush_r+0x1a>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	e7ad      	b.n	8008f54 <__sflush_r+0x1c>
 8008ff8:	690f      	ldr	r7, [r1, #16]
 8008ffa:	2f00      	cmp	r7, #0
 8008ffc:	d0a9      	beq.n	8008f52 <__sflush_r+0x1a>
 8008ffe:	0793      	lsls	r3, r2, #30
 8009000:	680e      	ldr	r6, [r1, #0]
 8009002:	bf08      	it	eq
 8009004:	694b      	ldreq	r3, [r1, #20]
 8009006:	600f      	str	r7, [r1, #0]
 8009008:	bf18      	it	ne
 800900a:	2300      	movne	r3, #0
 800900c:	eba6 0807 	sub.w	r8, r6, r7
 8009010:	608b      	str	r3, [r1, #8]
 8009012:	f1b8 0f00 	cmp.w	r8, #0
 8009016:	dd9c      	ble.n	8008f52 <__sflush_r+0x1a>
 8009018:	6a21      	ldr	r1, [r4, #32]
 800901a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800901c:	4643      	mov	r3, r8
 800901e:	463a      	mov	r2, r7
 8009020:	4628      	mov	r0, r5
 8009022:	47b0      	blx	r6
 8009024:	2800      	cmp	r0, #0
 8009026:	dc06      	bgt.n	8009036 <__sflush_r+0xfe>
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	e78e      	b.n	8008f54 <__sflush_r+0x1c>
 8009036:	4407      	add	r7, r0
 8009038:	eba8 0800 	sub.w	r8, r8, r0
 800903c:	e7e9      	b.n	8009012 <__sflush_r+0xda>
 800903e:	bf00      	nop
 8009040:	20400001 	.word	0x20400001

08009044 <_fflush_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	690b      	ldr	r3, [r1, #16]
 8009048:	4605      	mov	r5, r0
 800904a:	460c      	mov	r4, r1
 800904c:	b913      	cbnz	r3, 8009054 <_fflush_r+0x10>
 800904e:	2500      	movs	r5, #0
 8009050:	4628      	mov	r0, r5
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	b118      	cbz	r0, 800905e <_fflush_r+0x1a>
 8009056:	6983      	ldr	r3, [r0, #24]
 8009058:	b90b      	cbnz	r3, 800905e <_fflush_r+0x1a>
 800905a:	f7ff fa4f 	bl	80084fc <__sinit>
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <_fflush_r+0x6c>)
 8009060:	429c      	cmp	r4, r3
 8009062:	d11b      	bne.n	800909c <_fflush_r+0x58>
 8009064:	686c      	ldr	r4, [r5, #4]
 8009066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0ef      	beq.n	800904e <_fflush_r+0xa>
 800906e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009070:	07d0      	lsls	r0, r2, #31
 8009072:	d404      	bmi.n	800907e <_fflush_r+0x3a>
 8009074:	0599      	lsls	r1, r3, #22
 8009076:	d402      	bmi.n	800907e <_fflush_r+0x3a>
 8009078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800907a:	f7ff fadd 	bl	8008638 <__retarget_lock_acquire_recursive>
 800907e:	4628      	mov	r0, r5
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff ff59 	bl	8008f38 <__sflush_r>
 8009086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009088:	07da      	lsls	r2, r3, #31
 800908a:	4605      	mov	r5, r0
 800908c:	d4e0      	bmi.n	8009050 <_fflush_r+0xc>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	059b      	lsls	r3, r3, #22
 8009092:	d4dd      	bmi.n	8009050 <_fflush_r+0xc>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f7ff fad0 	bl	800863a <__retarget_lock_release_recursive>
 800909a:	e7d9      	b.n	8009050 <_fflush_r+0xc>
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <_fflush_r+0x70>)
 800909e:	429c      	cmp	r4, r3
 80090a0:	d101      	bne.n	80090a6 <_fflush_r+0x62>
 80090a2:	68ac      	ldr	r4, [r5, #8]
 80090a4:	e7df      	b.n	8009066 <_fflush_r+0x22>
 80090a6:	4b04      	ldr	r3, [pc, #16]	; (80090b8 <_fflush_r+0x74>)
 80090a8:	429c      	cmp	r4, r3
 80090aa:	bf08      	it	eq
 80090ac:	68ec      	ldreq	r4, [r5, #12]
 80090ae:	e7da      	b.n	8009066 <_fflush_r+0x22>
 80090b0:	080095e0 	.word	0x080095e0
 80090b4:	08009600 	.word	0x08009600
 80090b8:	080095c0 	.word	0x080095c0

080090bc <_lseek_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	; (80090dc <_lseek_r+0x20>)
 80090c0:	4604      	mov	r4, r0
 80090c2:	4608      	mov	r0, r1
 80090c4:	4611      	mov	r1, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	602a      	str	r2, [r5, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f7f8 fc54 	bl	8001978 <_lseek>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_lseek_r+0x1e>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_lseek_r+0x1e>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20002084 	.word	0x20002084

080090e0 <__swhatbuf_r>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	460e      	mov	r6, r1
 80090e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e8:	2900      	cmp	r1, #0
 80090ea:	b096      	sub	sp, #88	; 0x58
 80090ec:	4614      	mov	r4, r2
 80090ee:	461d      	mov	r5, r3
 80090f0:	da07      	bge.n	8009102 <__swhatbuf_r+0x22>
 80090f2:	2300      	movs	r3, #0
 80090f4:	602b      	str	r3, [r5, #0]
 80090f6:	89b3      	ldrh	r3, [r6, #12]
 80090f8:	061a      	lsls	r2, r3, #24
 80090fa:	d410      	bmi.n	800911e <__swhatbuf_r+0x3e>
 80090fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009100:	e00e      	b.n	8009120 <__swhatbuf_r+0x40>
 8009102:	466a      	mov	r2, sp
 8009104:	f000 f8be 	bl	8009284 <_fstat_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	dbf2      	blt.n	80090f2 <__swhatbuf_r+0x12>
 800910c:	9a01      	ldr	r2, [sp, #4]
 800910e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009116:	425a      	negs	r2, r3
 8009118:	415a      	adcs	r2, r3
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	e7ee      	b.n	80090fc <__swhatbuf_r+0x1c>
 800911e:	2340      	movs	r3, #64	; 0x40
 8009120:	2000      	movs	r0, #0
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	b016      	add	sp, #88	; 0x58
 8009126:	bd70      	pop	{r4, r5, r6, pc}

08009128 <__smakebuf_r>:
 8009128:	898b      	ldrh	r3, [r1, #12]
 800912a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800912c:	079d      	lsls	r5, r3, #30
 800912e:	4606      	mov	r6, r0
 8009130:	460c      	mov	r4, r1
 8009132:	d507      	bpl.n	8009144 <__smakebuf_r+0x1c>
 8009134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	2301      	movs	r3, #1
 800913e:	6163      	str	r3, [r4, #20]
 8009140:	b002      	add	sp, #8
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	ab01      	add	r3, sp, #4
 8009146:	466a      	mov	r2, sp
 8009148:	f7ff ffca 	bl	80090e0 <__swhatbuf_r>
 800914c:	9900      	ldr	r1, [sp, #0]
 800914e:	4605      	mov	r5, r0
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff fa73 	bl	800863c <_malloc_r>
 8009156:	b948      	cbnz	r0, 800916c <__smakebuf_r+0x44>
 8009158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d4ef      	bmi.n	8009140 <__smakebuf_r+0x18>
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	f043 0302 	orr.w	r3, r3, #2
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	e7e3      	b.n	8009134 <__smakebuf_r+0xc>
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <__smakebuf_r+0x7c>)
 800916e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	9b00      	ldr	r3, [sp, #0]
 800917c:	6163      	str	r3, [r4, #20]
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	6120      	str	r0, [r4, #16]
 8009182:	b15b      	cbz	r3, 800919c <__smakebuf_r+0x74>
 8009184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009188:	4630      	mov	r0, r6
 800918a:	f000 f88d 	bl	80092a8 <_isatty_r>
 800918e:	b128      	cbz	r0, 800919c <__smakebuf_r+0x74>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	89a0      	ldrh	r0, [r4, #12]
 800919e:	4305      	orrs	r5, r0
 80091a0:	81a5      	strh	r5, [r4, #12]
 80091a2:	e7cd      	b.n	8009140 <__smakebuf_r+0x18>
 80091a4:	08008495 	.word	0x08008495

080091a8 <__malloc_lock>:
 80091a8:	4801      	ldr	r0, [pc, #4]	; (80091b0 <__malloc_lock+0x8>)
 80091aa:	f7ff ba45 	b.w	8008638 <__retarget_lock_acquire_recursive>
 80091ae:	bf00      	nop
 80091b0:	2000207c 	.word	0x2000207c

080091b4 <__malloc_unlock>:
 80091b4:	4801      	ldr	r0, [pc, #4]	; (80091bc <__malloc_unlock+0x8>)
 80091b6:	f7ff ba40 	b.w	800863a <__retarget_lock_release_recursive>
 80091ba:	bf00      	nop
 80091bc:	2000207c 	.word	0x2000207c

080091c0 <_free_r>:
 80091c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c2:	2900      	cmp	r1, #0
 80091c4:	d048      	beq.n	8009258 <_free_r+0x98>
 80091c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ca:	9001      	str	r0, [sp, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f1a1 0404 	sub.w	r4, r1, #4
 80091d2:	bfb8      	it	lt
 80091d4:	18e4      	addlt	r4, r4, r3
 80091d6:	f7ff ffe7 	bl	80091a8 <__malloc_lock>
 80091da:	4a20      	ldr	r2, [pc, #128]	; (800925c <_free_r+0x9c>)
 80091dc:	9801      	ldr	r0, [sp, #4]
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	4615      	mov	r5, r2
 80091e2:	b933      	cbnz	r3, 80091f2 <_free_r+0x32>
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6014      	str	r4, [r2, #0]
 80091e8:	b003      	add	sp, #12
 80091ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091ee:	f7ff bfe1 	b.w	80091b4 <__malloc_unlock>
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	d90b      	bls.n	800920e <_free_r+0x4e>
 80091f6:	6821      	ldr	r1, [r4, #0]
 80091f8:	1862      	adds	r2, r4, r1
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bf04      	itt	eq
 80091fe:	681a      	ldreq	r2, [r3, #0]
 8009200:	685b      	ldreq	r3, [r3, #4]
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	bf04      	itt	eq
 8009206:	1852      	addeq	r2, r2, r1
 8009208:	6022      	streq	r2, [r4, #0]
 800920a:	602c      	str	r4, [r5, #0]
 800920c:	e7ec      	b.n	80091e8 <_free_r+0x28>
 800920e:	461a      	mov	r2, r3
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	b10b      	cbz	r3, 8009218 <_free_r+0x58>
 8009214:	42a3      	cmp	r3, r4
 8009216:	d9fa      	bls.n	800920e <_free_r+0x4e>
 8009218:	6811      	ldr	r1, [r2, #0]
 800921a:	1855      	adds	r5, r2, r1
 800921c:	42a5      	cmp	r5, r4
 800921e:	d10b      	bne.n	8009238 <_free_r+0x78>
 8009220:	6824      	ldr	r4, [r4, #0]
 8009222:	4421      	add	r1, r4
 8009224:	1854      	adds	r4, r2, r1
 8009226:	42a3      	cmp	r3, r4
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	d1dd      	bne.n	80091e8 <_free_r+0x28>
 800922c:	681c      	ldr	r4, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	6053      	str	r3, [r2, #4]
 8009232:	4421      	add	r1, r4
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	e7d7      	b.n	80091e8 <_free_r+0x28>
 8009238:	d902      	bls.n	8009240 <_free_r+0x80>
 800923a:	230c      	movs	r3, #12
 800923c:	6003      	str	r3, [r0, #0]
 800923e:	e7d3      	b.n	80091e8 <_free_r+0x28>
 8009240:	6825      	ldr	r5, [r4, #0]
 8009242:	1961      	adds	r1, r4, r5
 8009244:	428b      	cmp	r3, r1
 8009246:	bf04      	itt	eq
 8009248:	6819      	ldreq	r1, [r3, #0]
 800924a:	685b      	ldreq	r3, [r3, #4]
 800924c:	6063      	str	r3, [r4, #4]
 800924e:	bf04      	itt	eq
 8009250:	1949      	addeq	r1, r1, r5
 8009252:	6021      	streq	r1, [r4, #0]
 8009254:	6054      	str	r4, [r2, #4]
 8009256:	e7c7      	b.n	80091e8 <_free_r+0x28>
 8009258:	b003      	add	sp, #12
 800925a:	bd30      	pop	{r4, r5, pc}
 800925c:	200019a0 	.word	0x200019a0

08009260 <_read_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d07      	ldr	r5, [pc, #28]	; (8009280 <_read_r+0x20>)
 8009264:	4604      	mov	r4, r0
 8009266:	4608      	mov	r0, r1
 8009268:	4611      	mov	r1, r2
 800926a:	2200      	movs	r2, #0
 800926c:	602a      	str	r2, [r5, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f7f8 fb22 	bl	80018b8 <_read>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_read_r+0x1e>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_read_r+0x1e>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	20002084 	.word	0x20002084

08009284 <_fstat_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4d07      	ldr	r5, [pc, #28]	; (80092a4 <_fstat_r+0x20>)
 8009288:	2300      	movs	r3, #0
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	f7f8 fb56 	bl	8001942 <_fstat>
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	d102      	bne.n	80092a0 <_fstat_r+0x1c>
 800929a:	682b      	ldr	r3, [r5, #0]
 800929c:	b103      	cbz	r3, 80092a0 <_fstat_r+0x1c>
 800929e:	6023      	str	r3, [r4, #0]
 80092a0:	bd38      	pop	{r3, r4, r5, pc}
 80092a2:	bf00      	nop
 80092a4:	20002084 	.word	0x20002084

080092a8 <_isatty_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4d06      	ldr	r5, [pc, #24]	; (80092c4 <_isatty_r+0x1c>)
 80092ac:	2300      	movs	r3, #0
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	602b      	str	r3, [r5, #0]
 80092b4:	f7f8 fb55 	bl	8001962 <_isatty>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d102      	bne.n	80092c2 <_isatty_r+0x1a>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	b103      	cbz	r3, 80092c2 <_isatty_r+0x1a>
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
 80092c4:	20002084 	.word	0x20002084

080092c8 <ceil>:
 80092c8:	ec51 0b10 	vmov	r0, r1, d0
 80092cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80092d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80092d8:	2e13      	cmp	r6, #19
 80092da:	ee10 5a10 	vmov	r5, s0
 80092de:	ee10 8a10 	vmov	r8, s0
 80092e2:	460c      	mov	r4, r1
 80092e4:	dc30      	bgt.n	8009348 <ceil+0x80>
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	da12      	bge.n	8009310 <ceil+0x48>
 80092ea:	a335      	add	r3, pc, #212	; (adr r3, 80093c0 <ceil+0xf8>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f7f6 ffc4 	bl	800027c <__adddf3>
 80092f4:	2200      	movs	r2, #0
 80092f6:	2300      	movs	r3, #0
 80092f8:	f7f7 f9f4 	bl	80006e4 <__aeabi_dcmpgt>
 80092fc:	b128      	cbz	r0, 800930a <ceil+0x42>
 80092fe:	2c00      	cmp	r4, #0
 8009300:	db55      	blt.n	80093ae <ceil+0xe6>
 8009302:	432c      	orrs	r4, r5
 8009304:	d057      	beq.n	80093b6 <ceil+0xee>
 8009306:	4c30      	ldr	r4, [pc, #192]	; (80093c8 <ceil+0x100>)
 8009308:	2500      	movs	r5, #0
 800930a:	4621      	mov	r1, r4
 800930c:	4628      	mov	r0, r5
 800930e:	e025      	b.n	800935c <ceil+0x94>
 8009310:	4f2e      	ldr	r7, [pc, #184]	; (80093cc <ceil+0x104>)
 8009312:	4137      	asrs	r7, r6
 8009314:	ea01 0307 	and.w	r3, r1, r7
 8009318:	4303      	orrs	r3, r0
 800931a:	d01f      	beq.n	800935c <ceil+0x94>
 800931c:	a328      	add	r3, pc, #160	; (adr r3, 80093c0 <ceil+0xf8>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f6 ffab 	bl	800027c <__adddf3>
 8009326:	2200      	movs	r2, #0
 8009328:	2300      	movs	r3, #0
 800932a:	f7f7 f9db 	bl	80006e4 <__aeabi_dcmpgt>
 800932e:	2800      	cmp	r0, #0
 8009330:	d0eb      	beq.n	800930a <ceil+0x42>
 8009332:	2c00      	cmp	r4, #0
 8009334:	bfc2      	ittt	gt
 8009336:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800933a:	fa43 f606 	asrgt.w	r6, r3, r6
 800933e:	19a4      	addgt	r4, r4, r6
 8009340:	ea24 0407 	bic.w	r4, r4, r7
 8009344:	2500      	movs	r5, #0
 8009346:	e7e0      	b.n	800930a <ceil+0x42>
 8009348:	2e33      	cmp	r6, #51	; 0x33
 800934a:	dd0b      	ble.n	8009364 <ceil+0x9c>
 800934c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009350:	d104      	bne.n	800935c <ceil+0x94>
 8009352:	ee10 2a10 	vmov	r2, s0
 8009356:	460b      	mov	r3, r1
 8009358:	f7f6 ff90 	bl	800027c <__adddf3>
 800935c:	ec41 0b10 	vmov	d0, r0, r1
 8009360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009364:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009368:	f04f 33ff 	mov.w	r3, #4294967295
 800936c:	fa23 f707 	lsr.w	r7, r3, r7
 8009370:	4207      	tst	r7, r0
 8009372:	d0f3      	beq.n	800935c <ceil+0x94>
 8009374:	a312      	add	r3, pc, #72	; (adr r3, 80093c0 <ceil+0xf8>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ff7f 	bl	800027c <__adddf3>
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	f7f7 f9af 	bl	80006e4 <__aeabi_dcmpgt>
 8009386:	2800      	cmp	r0, #0
 8009388:	d0bf      	beq.n	800930a <ceil+0x42>
 800938a:	2c00      	cmp	r4, #0
 800938c:	dd02      	ble.n	8009394 <ceil+0xcc>
 800938e:	2e14      	cmp	r6, #20
 8009390:	d103      	bne.n	800939a <ceil+0xd2>
 8009392:	3401      	adds	r4, #1
 8009394:	ea25 0507 	bic.w	r5, r5, r7
 8009398:	e7b7      	b.n	800930a <ceil+0x42>
 800939a:	2301      	movs	r3, #1
 800939c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80093a0:	fa03 f606 	lsl.w	r6, r3, r6
 80093a4:	4435      	add	r5, r6
 80093a6:	4545      	cmp	r5, r8
 80093a8:	bf38      	it	cc
 80093aa:	18e4      	addcc	r4, r4, r3
 80093ac:	e7f2      	b.n	8009394 <ceil+0xcc>
 80093ae:	2500      	movs	r5, #0
 80093b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80093b4:	e7a9      	b.n	800930a <ceil+0x42>
 80093b6:	4625      	mov	r5, r4
 80093b8:	e7a7      	b.n	800930a <ceil+0x42>
 80093ba:	bf00      	nop
 80093bc:	f3af 8000 	nop.w
 80093c0:	8800759c 	.word	0x8800759c
 80093c4:	7e37e43c 	.word	0x7e37e43c
 80093c8:	3ff00000 	.word	0x3ff00000
 80093cc:	000fffff 	.word	0x000fffff

080093d0 <_init>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr

080093dc <_fini>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	bf00      	nop
 80093e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e2:	bc08      	pop	{r3}
 80093e4:	469e      	mov	lr, r3
 80093e6:	4770      	bx	lr
